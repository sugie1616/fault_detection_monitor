include "lib:gluelink";
//include "hierarchy.k";

@Native class QAbstractFileEngine;
class QFSFileEngine extends QAbstractFileEngine;
@Native class QAbstractFileEngineHandler;
class QAbstractFileEngineIterator;
@Native class QAccessible;
@Native class QAccessibleInterface extends QAccessible;
@Native class QAccessibleObject extends QAccessibleInterface;
@Native class QAccessibleWidget extends QAccessibleObject;
class QAccessiblePlugin extends QAccessible;
@Native class QAccessibleBridge;
@Native class QAtomicInt;
class QAtomicPointer;
@Native class QAuthenticator;
@Native class QBasicTimer;
@Native class QBitArray;
@Native class QBrush;
@Native class QByteArray;
@Native class QByteArrayMatcher;
class QCache;
@Native class QChar;
@Native class QColor;
@Native class QColormap;
class QContiguousCache;
@Native class QCryptographicHash;
@Native class QCursor;
class QDataStream;
@Native class QDate;
@Native class QDateTime;
@Native class QDebug;
class QDecoration;
class QDecorationDefault extends QDecoration;
class QDecorationFactory;
@Native class QDesktopServices;
@Native class QDir;
class QDirIterator;
@Native class QEasingCurve;
@Native class QElapsedTimer;
@Native class QEvent;
@Native class QAccessibleEvent extends QEvent;
@Native class QActionEvent extends QEvent;
@Native class QChildEvent extends QEvent;
@Native class QCloseEvent extends QEvent;
class QCustomEvent extends QEvent;
@Native class QDragLeaveEvent extends QEvent;
@Native class QDropEvent extends QEvent;
@Native class QDragMoveEvent extends QDropEvent;
@Native class QDragEnterEvent extends QDragMoveEvent;
@Native class QDynamicPropertyChangeEvent extends QEvent;
class QFileOpenEvent extends QEvent;
@Native class QFocusEvent extends QEvent;
@Native class QGestureEvent extends QEvent;
@Native class QGraphicsSceneEvent extends QEvent;
@Native class QGraphicsSceneContextMenuEvent extends QGraphicsSceneEvent;
@Native class QGraphicsSceneDragDropEvent extends QGraphicsSceneEvent;
@Native class QGraphicsSceneHelpEvent extends QGraphicsSceneEvent;
@Native class QGraphicsSceneHoverEvent extends QGraphicsSceneEvent;
@Native class QGraphicsSceneMouseEvent extends QGraphicsSceneEvent;
@Native class QGraphicsSceneMoveEvent extends QGraphicsSceneEvent;
@Native class QGraphicsSceneResizeEvent extends QGraphicsSceneEvent;
@Native class QGraphicsSceneWheelEvent extends QGraphicsSceneEvent;
@Native class QHelpEvent extends QEvent;
@Native class QHideEvent extends QEvent;
@Native class QHoverEvent extends QEvent;
@Native class QIconDragEvent extends QEvent;
@Native class QInputEvent extends QEvent;
@Native class QContextMenuEvent extends QInputEvent;
@Native class QKeyEvent extends QInputEvent;
@Native class QMouseEvent extends QInputEvent;
@Native class QTabletEvent extends QInputEvent;
@Native class QTouchEvent extends QInputEvent;
@Native class QWheelEvent extends QInputEvent;
@Native class QInputMethodEvent extends QEvent;
@Native class QMoveEvent extends QEvent;
@Native class QPaintEvent extends QEvent;
@Native class QResizeEvent extends QEvent;
@Native class QShortcutEvent extends QEvent;
@Native class QShowEvent extends QEvent;
@Native class QStatusTipEvent extends QEvent;
@Native class QTimerEvent extends QEvent;
@Native class QWhatsThisClickedEvent extends QEvent;
@Native class QWindowStateChangeEvent extends QEvent;
class QExplicitlySharedDataPointer;
class QFileIconProvider;
class QFileInfo;
class QFlag;
class QFlags;
@Native class QFont;
@Native class QFontDatabase;
class QFontEngineInfo;
@Native class QFontInfo;
@Native class QFontMetrics;
@Native class QFontMetricsF;
class QFuture;
class QFutureIterator;
class QFutureSynchronizer;
@Native class QGenericArgument;
@Native class QGenericReturnArgument extends QGenericArgument;
class QGenericMatrix;
class QGestureRecognizer;
@Native class QGradient;
@Native class QConicalGradient extends QGradient;
@Native class QLinearGradient extends QGradient;
@Native class QRadialGradient extends QGradient;
@Native class QGraphicsItem;
@Native class QAbstractGraphicsShapeItem extends QGraphicsItem;
@Native class QGraphicsEllipseItem extends QAbstractGraphicsShapeItem;
@Native class QGraphicsPathItem extends QAbstractGraphicsShapeItem;
@Native class QGraphicsPolygonItem extends QAbstractGraphicsShapeItem;
@Native class QGraphicsRectItem extends QAbstractGraphicsShapeItem;
@Native class QGraphicsSimpleTextItem extends QAbstractGraphicsShapeItem;
@Native class QGraphicsItemGroup extends QGraphicsItem;
@Native class QGraphicsLineItem extends QGraphicsItem;
@Native class QGraphicsObject extends QGraphicsItem;
@Native class QGraphicsTextItem extends QGraphicsObject;
@Native class QGraphicsWidget extends QGraphicsObject;
@Native class QGraphicsProxyWidget extends QGraphicsWidget;
@Native class QGraphicsWebView extends QGraphicsWidget;
@Native class QGraphicsPixmapItem extends QGraphicsItem;
@Native class QGraphicsLayoutItem;
@Native class QGraphicsLayout extends QGraphicsLayoutItem;
@Native class QGraphicsAnchorLayout extends QGraphicsLayout;
@Native class QGraphicsGridLayout extends QGraphicsLayout;
@Native class QGraphicsLinearLayout extends QGraphicsLayout;
//@Native class QGraphicsWidget extends QGraphicsLayoutItem;
//@Native class QGraphicsProxyWidget extends QGraphicsWidget;
//@Native class QGraphicsWebView extends QGraphicsWidget;
class QHash;
class QMultiHash extends QHash;
class QHashIterator;
@Native class QHostAddress;
@Native class QHostInfo;
@Native class QIcon;
@Native class QIconEngine;
@Native class QIconEngineV2 extends QIconEngine;
class QImageIOHandler;
@Native class QImageReader;
@Native class QImageWriter;
@Native class QInputContextFactory;
class QItemEditorCreatorBase;
class QItemEditorCreator extends QItemEditorCreatorBase;
class QStandardItemEditorCreator extends QItemEditorCreatorBase;
@Native class QItemEditorFactory;
class QItemSelectionRange;
class QKbdDriverFactory;
@Native class QKeySequence;
@Native class QLatin1Char;
@Native class QLatin1String;
@Native class QLayoutItem;
@Native class QLayout extends QLayoutItem;
@Native class QBoxLayout extends QLayout;
@Native class QHBoxLayout extends QBoxLayout;
@Native class QVBoxLayout extends QBoxLayout;
@Native class QFormLayout extends QLayout;
@Native class QGridLayout extends QLayout;
class QStackedLayout extends QLayout;
@Native class QSpacerItem extends QLayoutItem;
@Native class QWidgetItem extends QLayoutItem;
@Native class QLibraryInfo;
@Native class QLine;
@Native class QLineF;
class QLinkedList;
class QLinkedListIterator;
class QList;
class QItemSelection extends QList;
class QQueue extends QList;
class QStringList extends QList;
class QListIterator;
class QListWidgetItem;
@Native class QLocale;
class QMacPasteboardMime;
class QMap;
class QMultiMap extends QMap;
class QMapIterator;
@Native class QMargins;
@Native class QMatrix4x4;
@Native class QMetaClassInfo;
@Native class QMetaEnum;
@Native class QMetaMethod;
@Native class QMetaObject;
@Native class QMetaProperty;
class QMetaType;
@Native class QModelIndex;
class QMouseDriverFactory;
class QMutableHashIterator;
class QMutableLinkedListIterator;
class QMutableListIterator;
class QMutableMapIterator;
class QMutableSetIterator;
class QMutableVectorIterator;
@Native class QMutex;
@Native class QMutexLocker;
@Native class QNetworkAddressEntry;
@Native class QNetworkCacheMetaData;
@Native class QNetworkConfiguration;
@Native class QNetworkCookie;
@Native class QNetworkInterface;
@Native class QNetworkProxy;
@Native class QNetworkProxyFactory;
@Native class QNetworkProxyQuery;
@Native class QNetworkRequest;
@Native class QObject;
class QAbstractAnimation extends QObject;
class QAnimationGroup extends QAbstractAnimation;
class QParallelAnimationGroup extends QAnimationGroup;
class QSequentialAnimationGroup extends QAnimationGroup;
class QPauseAnimation extends QAbstractAnimation;
class QVariantAnimation extends QAbstractAnimation;
class QPropertyAnimation extends QVariantAnimation;
@Native class QAbstractEventDispatcher extends QObject;
class QAbstractFontEngine extends QObject;
@Native class QAbstractItemDelegate extends QObject;
@Native class QItemDelegate extends QAbstractItemDelegate;
@Native class QStyledItemDelegate extends QAbstractItemDelegate;
@Native class QAbstractItemModel extends QObject;
@Native class QAbstractListModel extends QAbstractItemModel;
class QStringListModel extends QAbstractListModel;
@Native class QAbstractProxyModel extends QAbstractItemModel;
@Native class QSortFilterProxyModel extends QAbstractProxyModel;
@Native class QAbstractTableModel extends QAbstractItemModel;
@Native class QDirModel extends QAbstractItemModel;
class QFileSystemModel extends QAbstractItemModel;
@Native class QProxyModel extends QAbstractItemModel;
@Native class QStandardItemModel extends QAbstractItemModel;
@Native class QAbstractNetworkCache extends QObject;
@Native class QNetworkDiskCache extends QAbstractNetworkCache;
@Native class QAbstractState extends QObject;
@Native class QFinalState extends QAbstractState;
@Native class QHistoryState extends QAbstractState;
@Native class QState extends QAbstractState;
class QStateMachine extends QState;
@Native class QAbstractTextDocumentLayout extends QObject;
@Native class QPlainTextDocumentLayout extends QAbstractTextDocumentLayout;
@Native class QAbstractTransition extends QObject;
@Native class QEventTransition extends QAbstractTransition;
@Native class QKeyEventTransition extends QEventTransition;
@Native class QMouseEventTransition extends QEventTransition;
@Native class QSignalTransition extends QAbstractTransition;
class QAccessibleBridgePlugin extends QObject;
//class QAccessiblePlugin extends QObject;
@Native class QAction extends QObject;
class QMenuItem extends QAction;
@Native class QWidgetAction extends QAction;
@Native class QActionGroup extends QObject;
@Native class QButtonGroup extends QObject;
class QClipboard extends QObject;
@Native class QCompleter extends QObject;
class QCopChannel extends QObject;
@Native class QCoreApplication extends QObject;
@Native class QApplication extends QCoreApplication;
@Native class QDataWidgetMapper extends QObject;
class QDecorationPlugin extends QObject;
class QDirectPainter extends QObject;
@Native class QDrag extends QObject;
@Native class QEventLoop extends QObject;
class QFileSystemWatcher extends QObject;
class QFontEnginePlugin extends QObject;
@Native class QFtp extends QObject;
class QFutureWatcher extends QObject;
@Native class QGesture extends QObject;
@Native class QPanGesture extends QGesture;
@Native class QPinchGesture extends QGesture;
@Native class QSwipeGesture extends QGesture;
@Native class QTapAndHoldGesture extends QGesture;
@Native class QTapGesture extends QGesture;
@Native class QGraphicsAnchor extends QObject;
@Native class QGraphicsEffect extends QObject;
@Native class QGraphicsBlurEffect extends QGraphicsEffect;
@Native class QGraphicsColorizeEffect extends QGraphicsEffect;
@Native class QGraphicsDropShadowEffect extends QGraphicsEffect;
@Native class QGraphicsOpacityEffect extends QGraphicsEffect;
class QGraphicsItemAnimation extends QObject;
//@Native class QGraphicsObject extends QObject;
//@Native class QGraphicsTextItem extends QGraphicsObject;
//@Native class QGraphicsWidget extends QGraphicsObject;
//@Native class QGraphicsProxyWidget extends QGraphicsWidget;
//@Native class QGraphicsWebView extends QGraphicsWidget;
@Native class QGraphicsScene extends QObject;
@Native class QGraphicsTransform extends QObject;
@Native class QGraphicsRotation extends QGraphicsTransform;
@Native class QGraphicsScale extends QGraphicsTransform;
@Native class QHttp extends QObject;
@Native class QIODevice extends QObject;
@Native class QAbstractSocket extends QIODevice;
@Native class QTcpSocket extends QAbstractSocket;
@Native class QSslSocket extends QTcpSocket;
@Native class QUdpSocket extends QAbstractSocket;
@Native class QBuffer extends QIODevice;
class QFile extends QIODevice;
class QTemporaryFile extends QFile;
@Native class QLocalSocket extends QIODevice;
@Native class QNetworkReply extends QIODevice;
@Native class QProcess extends QIODevice;
class QIconEnginePlugin extends QObject;
class QIconEnginePluginV2 extends QObject;
class QImageIOPlugin extends QObject;
@Native class QInputContext extends QObject;
class QInputContextPlugin extends QObject;
class QItemSelectionModel extends QObject;
class QKbdDriverPlugin extends QObject;
//@Native class QLayout extends QObject;
//@Native class QBoxLayout extends QLayout;
//@Native class QHBoxLayout extends QBoxLayout;
//@Native class QVBoxLayout extends QBoxLayout;
//@Native class QFormLayout extends QLayout;
//@Native class QGridLayout extends QLayout;
//class QStackedLayout extends QLayout;
@Native class QLibrary extends QObject;
@Native class QLocalServer extends QObject;
@Native class QMimeData extends QObject;
class QMouseDriverPlugin extends QObject;
@Native class QMovie extends QObject;
@Native class QNetworkAccessManager extends QObject;
@Native class QNetworkConfigurationManager extends QObject;
@Native class QNetworkCookieJar extends QObject;
@Native class QNetworkSession extends QObject;
@Native class QObjectCleanupHandler extends QObject;
class QPictureFormatPlugin extends QObject;
class QPluginLoader extends QObject;
class QScreenDriverPlugin extends QObject;
class QSessionManager extends QObject;
class QSettings extends QObject;
@Native class QSharedMemory extends QObject;
@Native class QShortcut extends QObject;
@Native class QSignalMapper extends QObject;
@Native class QSocketNotifier extends QObject;
@Native class QSound extends QObject;
@Native class QStyle extends QObject;
@Native class QCommonStyle extends QStyle;
@Native class QMotifStyle extends QCommonStyle;
@Native class QCDEStyle extends QMotifStyle;
@Native class QProxyStyle extends QCommonStyle;
class QS60Style extends QCommonStyle;
class QWindowsStyle extends QCommonStyle;
class QCleanlooksStyle extends QWindowsStyle;
class QGtkStyle extends QCleanlooksStyle;
class QMacStyle extends QWindowsStyle;
class QPlastiqueStyle extends QWindowsStyle;
class QWindowsXPStyle extends QWindowsStyle;
class QWindowsVistaStyle extends QWindowsXPStyle;
class QStylePlugin extends QObject;
class QSyntaxHighlighter extends QObject;
@Native class QSystemTrayIcon extends QObject;
@Native class QTcpServer extends QObject;
class QTextCodecPlugin extends QObject;
@Native class QTextDocument extends QObject;
@Native class QTextObject extends QObject;
@Native class QTextBlockGroup extends QTextObject;
@Native class QTextList extends QTextBlockGroup;
@Native class QTextFrame extends QTextObject;
@Native class QTextTable extends QTextFrame;
@Native class QThread extends QObject;
@Native class QThreadPool extends QObject;
@Native class QTimeLine extends QObject;
@Native class QTimer extends QObject;
@Native class QTranslator extends QObject;
@Native class QUndoGroup extends QObject;
@Native class QUndoStack extends QObject;
@Native class QValidator extends QObject;
@Native class QDoubleValidator extends QValidator;
@Native class QIntValidator extends QValidator;
@Native class QRegExpValidator extends QValidator;
class QWSClient extends QObject;
class QWSInputMethod extends QObject;
class QWSServer extends QObject;
@Native class QWebFrame extends QObject;
@Native class QWebHistoryInterface extends QObject;
@Native class QWebPage extends QObject;
class QWebPluginFactory extends QObject;
@Native class QWidget extends QObject;
@Native class QAbstractButton extends QWidget;
@Native class QCheckBox extends QAbstractButton;
@Native class QPushButton extends QAbstractButton;
@Native class QCommandLinkButton extends QPushButton;
@Native class QRadioButton extends QAbstractButton;
@Native class QToolButton extends QAbstractButton;
@Native class QAbstractSlider extends QWidget;
@Native class QDial extends QAbstractSlider;
@Native class QScrollBar extends QAbstractSlider;
@Native class QSlider extends QAbstractSlider;
@Native class QAbstractSpinBox extends QWidget;
@Native class QDateTimeEdit extends QAbstractSpinBox;
@Native class QDateEdit extends QDateTimeEdit;
@Native class QTimeEdit extends QDateTimeEdit;
@Native class QDoubleSpinBox extends QAbstractSpinBox;
@Native class QSpinBox extends QAbstractSpinBox;
@Native class QCalendarWidget extends QWidget;
@Native class QComboBox extends QWidget;
@Native class QFontComboBox extends QComboBox;
@Native class QDesktopWidget extends QWidget;
@Native class QDialog extends QWidget;
@Native class QAbstractPrintDialog extends QDialog;
@Native class QPrintDialog extends QAbstractPrintDialog;
@Native class QColorDialog extends QDialog;
@Native class QErrorMessage extends QDialog;
class QFileDialog extends QDialog;
@Native class QFontDialog extends QDialog;
@Native class QInputDialog extends QDialog;
@Native class QMessageBox extends QDialog;
@Native class QPageSetupDialog extends QDialog;
@Native class QPrintPreviewDialog extends QDialog;
@Native class QProgressDialog extends QDialog;
@Native class QWizard extends QDialog;
@Native class QDialogButtonBox extends QWidget;
@Native class QDockWidget extends QWidget;
@Native class QFocusFrame extends QWidget;
@Native class QFrame extends QWidget;
@Native class QAbstractScrollArea extends QFrame;
@Native class QAbstractItemView extends QAbstractScrollArea;
@Native class QColumnView extends QAbstractItemView;
@Native class QHeaderView extends QAbstractItemView;
class QListView extends QAbstractItemView;
class QListWidget extends QListView;
class QUndoView extends QListView;
@Native class QTableView extends QAbstractItemView;
class QTableWidget extends QTableView;
@Native class QTreeView extends QAbstractItemView;
@Native class QTreeWidget extends QTreeView;
@Native class QGraphicsView extends QAbstractScrollArea;
@Native class QMdiArea extends QAbstractScrollArea;
@Native class QPlainTextEdit extends QAbstractScrollArea;
@Native class QScrollArea extends QAbstractScrollArea;
@Native class QTextEdit extends QAbstractScrollArea;
@Native class QTextBrowser extends QTextEdit;
@Native class QLCDNumber extends QFrame;
@Native class QLabel extends QFrame;
@Native class QSplitter extends QFrame;
class QStackedWidget extends QFrame;
@Native class QToolBox extends QFrame;
@Native class QGroupBox extends QWidget;
@Native class QLineEdit extends QWidget;
class QMacCocoaViewContainer extends QWidget;
class QMacNativeWidget extends QWidget;
@Native class QMainWindow extends QWidget;
@Native class QMdiSubWindow extends QWidget;
@Native class QMenu extends QWidget;
@Native class QMenuBar extends QWidget;
@Native class QPrintPreviewWidget extends QWidget;
@Native class QProgressBar extends QWidget;
@Native class QRubberBand extends QWidget;
@Native class QSizeGrip extends QWidget;
@Native class QSplashScreen extends QWidget;
@Native class QSplitterHandle extends QWidget;
@Native class QStatusBar extends QWidget;
@Native class QTabBar extends QWidget;
@Native class QTabWidget extends QWidget;
@Native class QToolBar extends QWidget;
class QWSEmbedWidget extends QWidget;
@Native class QWebInspector extends QWidget;
@Native class QWebView extends QWidget;
@Native class QWizardPage extends QWidget;
@Native class QWorkspace extends QWidget;
class QX11EmbedContainer extends QWidget;
class QX11EmbedWidget extends QWidget;
@Native class QPaintDevice;
@Native class QImage extends QPaintDevice;
@Native class QPicture extends QPaintDevice;
@Native class QPixmap extends QPaintDevice;
@Native class QBitmap extends QPixmap;
@Native class QPrinter extends QPaintDevice;
//@Native class QWidget extends QPaintDevice;
//@Native class QAbstractButton extends QWidget;
//@Native class QCheckBox extends QAbstractButton;
//@Native class QPushButton extends QAbstractButton;
//@Native class QCommandLinkButton extends QPushButton;
//@Native class QRadioButton extends QAbstractButton;
//@Native class QToolButton extends QAbstractButton;
//@Native class QAbstractSlider extends QWidget;
//@Native class QDial extends QAbstractSlider;
//@Native class QScrollBar extends QAbstractSlider;
//@Native class QSlider extends QAbstractSlider;
//@Native class QAbstractSpinBox extends QWidget;
//@Native class QDateTimeEdit extends QAbstractSpinBox;
//@Native class QDateEdit extends QDateTimeEdit;
//@Native class QTimeEdit extends QDateTimeEdit;
//@Native class QDoubleSpinBox extends QAbstractSpinBox;
//@Native class QSpinBox extends QAbstractSpinBox;
//@Native class QCalendarWidget extends QWidget;
//@Native class QComboBox extends QWidget;
//@Native class QFontComboBox extends QComboBox;
//@Native class QDesktopWidget extends QWidget;
//@Native class QDialog extends QWidget;
//@Native class QAbstractPrintDialog extends QDialog;
//@Native class QPrintDialog extends QAbstractPrintDialog;
//@Native class QColorDialog extends QDialog;
//@Native class QErrorMessage extends QDialog;
//class QFileDialog extends QDialog;
//@Native class QFontDialog extends QDialog;
//@Native class QInputDialog extends QDialog;
//@Native class QMessageBox extends QDialog;
//@Native class QPageSetupDialog extends QDialog;
//@Native class QPrintPreviewDialog extends QDialog;
//@Native class QProgressDialog extends QDialog;
//@Native class QWizard extends QDialog;
//@Native class QDialogButtonBox extends QWidget;
//@Native class QDockWidget extends QWidget;
//@Native class QFocusFrame extends QWidget;
//@Native class QFrame extends QWidget;
//@Native class QAbstractScrollArea extends QFrame;
//@Native class QAbstractItemView extends QAbstractScrollArea;
//@Native class QColumnView extends QAbstractItemView;
//@Native class QHeaderView extends QAbstractItemView;
//class QListView extends QAbstractItemView;
//class QListWidget extends QListView;
//class QUndoView extends QListView;
//@Native class QTableView extends QAbstractItemView;
//class QTableWidget extends QTableView;
//@Native class QTreeView extends QAbstractItemView;
//@Native class QTreeWidget extends QTreeView;
//@Native class QGraphicsView extends QAbstractScrollArea;
//@Native class QMdiArea extends QAbstractScrollArea;
//@Native class QPlainTextEdit extends QAbstractScrollArea;
//@Native class QScrollArea extends QAbstractScrollArea;
//@Native class QTextEdit extends QAbstractScrollArea;
//@Native class QTextBrowser extends QTextEdit;
//@Native class QLCDNumber extends QFrame;
//@Native class QLabel extends QFrame;
//@Native class QSplitter extends QFrame;
//class QStackedWidget extends QFrame;
//@Native class QToolBox extends QFrame;
//@Native class QGroupBox extends QWidget;
//@Native class QLineEdit extends QWidget;
//class QMacCocoaViewContainer extends QWidget;
//class QMacNativeWidget extends QWidget;
//@Native class QMainWindow extends QWidget;
//@Native class QMdiSubWindow extends QWidget;
//@Native class QMenu extends QWidget;
//@Native class QMenuBar extends QWidget;
//@Native class QPrintPreviewWidget extends QWidget;
//@Native class QProgressBar extends QWidget;
//@Native class QRubberBand extends QWidget;
//@Native class QSizeGrip extends QWidget;
//@Native class QSplashScreen extends QWidget;
//@Native class QSplitterHandle extends QWidget;
//@Native class QStatusBar extends QWidget;
//@Native class QTabBar extends QWidget;
//@Native class QTabWidget extends QWidget;
//@Native class QToolBar extends QWidget;
//class QWSEmbedWidget extends QWidget;
//@Native class QWebInspector extends QWidget;
//@Native class QWebView extends QWidget;
//@Native class QWizardPage extends QWidget;
//@Native class QWorkspace extends QWidget;
//class QX11EmbedContainer extends QWidget;
//class QX11EmbedWidget extends QWidget;
@Native class QPaintEngine;
@Native class QPaintEngineState;
@Native class QPainter;
@Native class QStylePainter extends QPainter;
@Native class QPainterPath;
@Native class QPainterPathStroker;
class QPair;
@Native class QPalette;
class QColorGroup extends QPalette;
@Native class QPen;
@Native class QPersistentModelIndex;
@Native class QPixmapCache;
@Native class QPoint;
@Native class QPointF;
class QPointer;
@Native class QPrintEngine;
@Native class QPrinterInfo;
@Native class QProcessEnvironment;
@Native class QQuaternion;
@Native class QReadLocker;
@Native class QReadWriteLock;
@Native class QRect;
@Native class QRectF;
@Native class QRegExp;
@Native class QRegion;
@Native class QResource;
@Native class QRunnable;
class QS60MainAppUi;
class QS60MainApplication;
class QS60MainDocument;
class QScopedPointer;
class QScopedArrayPointer extends QScopedPointer;
class QScreen;
class QProxyScreen extends QScreen;
class QScreenCursor;
class QProxyScreenCursor extends QScreenCursor;
class QScreenDriverFactory;
@Native class QSemaphore;
class QSet;
class QSetIterator;
@Native class QSharedData;
class QSharedDataPointer;
class QSharedPointer;
@Native class QSize;
@Native class QSizeF;
@Native class QSizePolicy;
@Native class QSslCertificate;
@Native class QSslCipher;
@Native class QSslConfiguration;
@Native class QSslError;
@Native class QSslKey;
@Native class QStandardItem;
@Native class QStaticText;
class QString;
class QConstString extends QString;
class QStringMatcher;
class QStringRef;
@Native class QStyleFactory;
@Native class QStyleHintReturn;
@Native class QStyleHintReturnMask extends QStyleHintReturn;
@Native class QStyleHintReturnVariant extends QStyleHintReturn;
@Native class QStyleOption;
@Native class QStyleOptionButton extends QStyleOption;
@Native class QStyleOptionComplex extends QStyleOption;
@Native class QStyleOptionComboBox extends QStyleOptionComplex;
@Native class QStyleOptionGroupBox extends QStyleOptionComplex;
@Native class QStyleOptionSizeGrip extends QStyleOptionComplex;
@Native class QStyleOptionSlider extends QStyleOptionComplex;
@Native class QStyleOptionSpinBox extends QStyleOptionComplex;
@Native class QStyleOptionTitleBar extends QStyleOptionComplex;
@Native class QStyleOptionToolButton extends QStyleOptionComplex;
@Native class QStyleOptionDockWidget extends QStyleOption;
@Native class QStyleOptionFocusRect extends QStyleOption;
@Native class QStyleOptionFrame extends QStyleOption;
@Native class QStyleOptionFrameV2 extends QStyleOptionFrame;
@Native class QStyleOptionFrameV3 extends QStyleOptionFrameV2;
@Native class QStyleOptionGraphicsItem extends QStyleOption;
@Native class QStyleOptionHeader extends QStyleOption;
@Native class QStyleOptionMenuItem extends QStyleOption;
@Native class QStyleOptionProgressBar extends QStyleOption;
@Native class QStyleOptionProgressBarV2 extends QStyleOptionProgressBar;
@Native class QStyleOptionRubberBand extends QStyleOption;
@Native class QStyleOptionTab extends QStyleOption;
@Native class QStyleOptionTabV2 extends QStyleOptionTab;
@Native class QStyleOptionTabV3 extends QStyleOptionTabV2;
@Native class QStyleOptionTabBarBase extends QStyleOption;
@Native class QStyleOptionTabBarBaseV2 extends QStyleOptionTabBarBase;
@Native class QStyleOptionTabWidgetFrame extends QStyleOption;
@Native class QStyleOptionTabWidgetFrameV2 extends QStyleOptionTabWidgetFrame;
@Native class QStyleOptionToolBar extends QStyleOption;
@Native class QStyleOptionToolBox extends QStyleOption;
@Native class QStyleOptionToolBoxV2 extends QStyleOptionToolBox;
@Native class QStyleOptionViewItem extends QStyleOption;
@Native class QStyleOptionViewItemV2 extends QStyleOptionViewItem;
@Native class QStyleOptionViewItemV3 extends QStyleOptionViewItemV2;
@Native class QStyleOptionViewItemV4 extends QStyleOptionViewItemV3;
class QSymbianEvent;
@Native class QSysInfo;
@Native class QSystemLocale;
@Native class QSystemSemaphore;
class QTableWidgetItem;
class QTableWidgetSelectionRange;
@Native class QTextBlock;
@Native class QTextBlockUserData;
@Native class QTextBoundaryFinder;
@Native class QTextCodec;
@Native class QTextCursor;
@Native class QTextDecoder;
@Native class QTextDocumentFragment;
@Native class QTextDocumentWriter;
@Native class QTextEncoder;
@Native class QTextFormat;
@Native class QTextBlockFormat extends QTextFormat;
@Native class QTextCharFormat extends QTextFormat;
@Native class QTextImageFormat extends QTextCharFormat;
@Native class QTextTableCellFormat extends QTextCharFormat;
@Native class QTextFrameFormat extends QTextFormat;
@Native class QTextTableFormat extends QTextFrameFormat;
@Native class QTextListFormat extends QTextFormat;
@Native class QTextFragment;
@Native class QTextInlineObject;
@Native class QTextItem;
@Native class QTextLayout;
@Native class QTextLength;
@Native class QTextLine;
@Native class QTextObjectInterface;
@Native class QTextOption;
class QTextStream;
class QTextIStream extends QTextStream;
class QTextOStream extends QTextStream;
@Native class QTextTableCell;
class QThreadStorage;
@Native class QTileRules;
@Native class QTime;
@Native class QToolTip;
@Native class QTransform;
@Native class QTreeWidgetItem;
class QTreeWidgetItemIterator;
@Native class QUndoCommand;
@Native class QUrl;
@Native class QUrlInfo;
@Native class QUuid;
class QVarLengthArray;
class QVariant;
class QVector;
@Native class QPolygon extends QVector;
@Native class QPolygonF extends QVector;
class QStack extends QVector;
class QXmlStreamAttributes extends QVector;
class QVector2D;
class QVector3D;
class QVector4D;
class QVectorIterator;
class QWSEvent;
class QWSKeyboardHandler;
class QWSMouseHandler;
class QWSCalibratedMouseHandler extends QWSMouseHandler;
class QWSPointerCalibrationData;
class QWSScreenSaver;
class QWSWindow;
@Native class QWaitCondition;
class QWeakPointer;
@Native class QWebDatabase;
@Native class QWebElement;
@Native class QWebElementCollection;
@Native class QWebHistory;
@Native class QWebHistoryItem;
@Native class QWebHitTestResult;
@Native class QWebSecurityOrigin;
@Native class QWebSettings;
@Native class QWhatsThis;
class QWindowsMime;
@Native class QWriteLocker;
class QX11Info;
class QXmlStreamAttribute;
class QXmlStreamEntityDeclaration;
class QXmlStreamEntityResolver;
class QXmlStreamNamespaceDeclaration;
class QXmlStreamNotationDeclaration;
class QXmlStreamReader;
class QXmlStreamWriter;
@Native class Qt;
@Native class QtAlignment;
@Native class QtDockWidgetAreas;
@Native class QtDropActions;
@Native class QtGestureFlags;
@Native class QtImageConversionFlags;
@Native class QtInputMethodHints;
@Native class QtItemFlags;
@Native class QtKeyboardModifiers;
@Native class QtMatchFlags;
@Native class QtMouseButtons;
@Native class QtOrientations;
@Native class QtTextInteractionFlags;
@Native class QtToolBarAreas;
@Native class QtTouchPointStates;
@Native class QtWindowFlags;
@Native class QtWindowStates;
@Native class QNetworkConfigurationManagerCapabilities;
@Native class QStyleOptionToolBarToolBarFeatures;
@Native class QWizardWizardOptions;
@Native class QTextCodecConversionFlags;
@Native class QStyleOptionButtonButtonFeatures;
@Native class QTextEditAutoFormatting;
@Native class QLocaleNumberOptions;
@Native class QMainWindowDockOptions;
@Native class QTextBoundaryFinderBoundaryReasons;
@Native class QDialogButtonBoxStandardButtons;
@Native class QPainterPixmapFragmentHints;
@Native class QPainterRenderHints;
@Native class QGraphicsViewCacheMode;
@Native class QGraphicsViewOptimizationFlags;
@Native class QGraphicsSceneSceneLayers;
@Native class QGraphicsEffectChangeFlags;
@Native class QNetworkProxyCapabilities;
@Native class QLibraryLoadHints;
@Native class QPaintEngineDirtyFlags;
@Native class QPaintEnginePaintEngineFeatures;
@Native class QIODeviceOpenMode;
@Native class QStyleState;
@Native class QStyleSubControls;
@Native class QStyleOptionViewItemV2ViewItemFeatures;
@Native class QTextOptionFlags;
@Native class QNetworkInterfaceInterfaceFlags;
@Native class QStyleOptionToolButtonToolButtonFeatures;
@Native class QInputDialogInputDialogOptions;
@Native class QStyleOptionTabCornerWidgets;
@Native class QWebPageFindFlags;
@Native class QPageSetupDialogPageSetupDialogOptions;
@Native class QColorDialogColorDialogOptions;
@Native class QDateTimeEditSections;
@Native class QAccessibleRelation;
@Native class QAccessibleState;
@Native class QAbstractItemViewEditTriggers;
@Native class QEventLoopProcessEventsFlags;
@Native class QAbstractFileEngineFileFlags;
@Native class QSizePolicyControlTypes;
@Native class QFontComboBoxFontFilters;
@Native class QNetworkConfigurationStateFlags;
@Native class QUdpSocketBindMode;
@Native class QMdiAreaAreaOptions;
@Native class QDockWidgetDockWidgetFeatures;
@Native class QDirFilters;
@Native class QDirSortFlags;
@Native class QMdiSubWindowSubWindowOptions;
@Native class QMessageBoxStandardButtons;
@Native class QStyleOptionFrameV2FrameFeatures;
@Native class QAbstractPrintDialogPrintDialogOptions;
@Native class QWidgetRenderFlags;
@Native class QGraphicsItemGraphicsItemFlags;
@Native class QTextItemRenderFlags;
@Native class QGraphicsBlurEffectBlurHints;
@Native class QUrlFormattingOptions;
@Native class QAbstractSpinBoxStepEnabled;
@Native class QTextFormatPageBreakFlags;
@Native class QFontDialogFontDialogOptions;
@Native class QPinchGestureChangeFlags;
@Native class QTextDocumentFindFlags;

QtAlignment QtAlignment.new(int value);
QtAlignment QtAlignment.and(int mask);
QtAlignment QtAlignment.iand(QtAlignment other);
QtAlignment QtAlignment.or(QtAlignment f);
QtAlignment QtAlignment.ior(QtAlignment other);
QtAlignment QtAlignment.xor(QtAlignment f);
QtAlignment QtAlignment.ixor(QtAlignment other);
boolean QtAlignment.testFlag(int flag);
int QtAlignment.value();

QtDockWidgetAreas QtDockWidgetAreas.new(int value);
QtDockWidgetAreas QtDockWidgetAreas.and(int mask);
QtDockWidgetAreas QtDockWidgetAreas.iand(QtDockWidgetAreas other);
QtDockWidgetAreas QtDockWidgetAreas.or(QtDockWidgetAreas f);
QtDockWidgetAreas QtDockWidgetAreas.ior(QtDockWidgetAreas other);
QtDockWidgetAreas QtDockWidgetAreas.xor(QtDockWidgetAreas f);
QtDockWidgetAreas QtDockWidgetAreas.ixor(QtDockWidgetAreas other);
boolean QtDockWidgetAreas.testFlag(int flag);
int QtDockWidgetAreas.value();

QtDropActions QtDropActions.new(int value);
QtDropActions QtDropActions.and(int mask);
QtDropActions QtDropActions.iand(QtDropActions other);
QtDropActions QtDropActions.or(QtDropActions f);
QtDropActions QtDropActions.ior(QtDropActions other);
QtDropActions QtDropActions.xor(QtDropActions f);
QtDropActions QtDropActions.ixor(QtDropActions other);
boolean QtDropActions.testFlag(int flag);
int QtDropActions.value();

QtGestureFlags QtGestureFlags.new(int value);
QtGestureFlags QtGestureFlags.and(int mask);
QtGestureFlags QtGestureFlags.iand(QtGestureFlags other);
QtGestureFlags QtGestureFlags.or(QtGestureFlags f);
QtGestureFlags QtGestureFlags.ior(QtGestureFlags other);
QtGestureFlags QtGestureFlags.xor(QtGestureFlags f);
QtGestureFlags QtGestureFlags.ixor(QtGestureFlags other);
boolean QtGestureFlags.testFlag(int flag);
int QtGestureFlags.value();

QtImageConversionFlags QtImageConversionFlags.new(int value);
QtImageConversionFlags QtImageConversionFlags.and(int mask);
QtImageConversionFlags QtImageConversionFlags.iand(QtImageConversionFlags other);
QtImageConversionFlags QtImageConversionFlags.or(QtImageConversionFlags f);
QtImageConversionFlags QtImageConversionFlags.ior(QtImageConversionFlags other);
QtImageConversionFlags QtImageConversionFlags.xor(QtImageConversionFlags f);
QtImageConversionFlags QtImageConversionFlags.ixor(QtImageConversionFlags other);
boolean QtImageConversionFlags.testFlag(int flag);
int QtImageConversionFlags.value();

QtInputMethodHints QtInputMethodHints.new(int value);
QtInputMethodHints QtInputMethodHints.and(int mask);
QtInputMethodHints QtInputMethodHints.iand(QtInputMethodHints other);
QtInputMethodHints QtInputMethodHints.or(QtInputMethodHints f);
QtInputMethodHints QtInputMethodHints.ior(QtInputMethodHints other);
QtInputMethodHints QtInputMethodHints.xor(QtInputMethodHints f);
QtInputMethodHints QtInputMethodHints.ixor(QtInputMethodHints other);
boolean QtInputMethodHints.testFlag(int flag);
int QtInputMethodHints.value();

QtItemFlags QtItemFlags.new(int value);
QtItemFlags QtItemFlags.and(int mask);
QtItemFlags QtItemFlags.iand(QtItemFlags other);
QtItemFlags QtItemFlags.or(QtItemFlags f);
QtItemFlags QtItemFlags.ior(QtItemFlags other);
QtItemFlags QtItemFlags.xor(QtItemFlags f);
QtItemFlags QtItemFlags.ixor(QtItemFlags other);
boolean QtItemFlags.testFlag(int flag);
int QtItemFlags.value();

QtKeyboardModifiers QtKeyboardModifiers.new(int value);
QtKeyboardModifiers QtKeyboardModifiers.and(int mask);
QtKeyboardModifiers QtKeyboardModifiers.iand(QtKeyboardModifiers other);
QtKeyboardModifiers QtKeyboardModifiers.or(QtKeyboardModifiers f);
QtKeyboardModifiers QtKeyboardModifiers.ior(QtKeyboardModifiers other);
QtKeyboardModifiers QtKeyboardModifiers.xor(QtKeyboardModifiers f);
QtKeyboardModifiers QtKeyboardModifiers.ixor(QtKeyboardModifiers other);
boolean QtKeyboardModifiers.testFlag(int flag);
int QtKeyboardModifiers.value();

QtMatchFlags QtMatchFlags.new(int value);
QtMatchFlags QtMatchFlags.and(int mask);
QtMatchFlags QtMatchFlags.iand(QtMatchFlags other);
QtMatchFlags QtMatchFlags.or(QtMatchFlags f);
QtMatchFlags QtMatchFlags.ior(QtMatchFlags other);
QtMatchFlags QtMatchFlags.xor(QtMatchFlags f);
QtMatchFlags QtMatchFlags.ixor(QtMatchFlags other);
boolean QtMatchFlags.testFlag(int flag);
int QtMatchFlags.value();

QtMouseButtons QtMouseButtons.new(int value);
QtMouseButtons QtMouseButtons.and(int mask);
QtMouseButtons QtMouseButtons.iand(QtMouseButtons other);
QtMouseButtons QtMouseButtons.or(QtMouseButtons f);
QtMouseButtons QtMouseButtons.ior(QtMouseButtons other);
QtMouseButtons QtMouseButtons.xor(QtMouseButtons f);
QtMouseButtons QtMouseButtons.ixor(QtMouseButtons other);
boolean QtMouseButtons.testFlag(int flag);
int QtMouseButtons.value();

QtOrientations QtOrientations.new(int value);
QtOrientations QtOrientations.and(int mask);
QtOrientations QtOrientations.iand(QtOrientations other);
QtOrientations QtOrientations.or(QtOrientations f);
QtOrientations QtOrientations.ior(QtOrientations other);
QtOrientations QtOrientations.xor(QtOrientations f);
QtOrientations QtOrientations.ixor(QtOrientations other);
boolean QtOrientations.testFlag(int flag);
int QtOrientations.value();

QtTextInteractionFlags QtTextInteractionFlags.new(int value);
QtTextInteractionFlags QtTextInteractionFlags.and(int mask);
QtTextInteractionFlags QtTextInteractionFlags.iand(QtTextInteractionFlags other);
QtTextInteractionFlags QtTextInteractionFlags.or(QtTextInteractionFlags f);
QtTextInteractionFlags QtTextInteractionFlags.ior(QtTextInteractionFlags other);
QtTextInteractionFlags QtTextInteractionFlags.xor(QtTextInteractionFlags f);
QtTextInteractionFlags QtTextInteractionFlags.ixor(QtTextInteractionFlags other);
boolean QtTextInteractionFlags.testFlag(int flag);
int QtTextInteractionFlags.value();

QtToolBarAreas QtToolBarAreas.new(int value);
QtToolBarAreas QtToolBarAreas.and(int mask);
QtToolBarAreas QtToolBarAreas.iand(QtToolBarAreas other);
QtToolBarAreas QtToolBarAreas.or(QtToolBarAreas f);
QtToolBarAreas QtToolBarAreas.ior(QtToolBarAreas other);
QtToolBarAreas QtToolBarAreas.xor(QtToolBarAreas f);
QtToolBarAreas QtToolBarAreas.ixor(QtToolBarAreas other);
boolean QtToolBarAreas.testFlag(int flag);
int QtToolBarAreas.value();

QtTouchPointStates QtTouchPointStates.new(int value);
QtTouchPointStates QtTouchPointStates.and(int mask);
QtTouchPointStates QtTouchPointStates.iand(QtTouchPointStates other);
QtTouchPointStates QtTouchPointStates.or(QtTouchPointStates f);
QtTouchPointStates QtTouchPointStates.ior(QtTouchPointStates other);
QtTouchPointStates QtTouchPointStates.xor(QtTouchPointStates f);
QtTouchPointStates QtTouchPointStates.ixor(QtTouchPointStates other);
boolean QtTouchPointStates.testFlag(int flag);
int QtTouchPointStates.value();

QtWindowFlags QtWindowFlags.new(int value);
QtWindowFlags QtWindowFlags.and(int mask);
QtWindowFlags QtWindowFlags.iand(QtWindowFlags other);
QtWindowFlags QtWindowFlags.or(QtWindowFlags f);
QtWindowFlags QtWindowFlags.ior(QtWindowFlags other);
QtWindowFlags QtWindowFlags.xor(QtWindowFlags f);
QtWindowFlags QtWindowFlags.ixor(QtWindowFlags other);
boolean QtWindowFlags.testFlag(int flag);
int QtWindowFlags.value();

QtWindowStates QtWindowStates.new(int value);
QtWindowStates QtWindowStates.and(int mask);
QtWindowStates QtWindowStates.iand(QtWindowStates other);
QtWindowStates QtWindowStates.or(QtWindowStates f);
QtWindowStates QtWindowStates.ior(QtWindowStates other);
QtWindowStates QtWindowStates.xor(QtWindowStates f);
QtWindowStates QtWindowStates.ixor(QtWindowStates other);
boolean QtWindowStates.testFlag(int flag);
int QtWindowStates.value();
QModelIndexList = Array<QModelIndex>;
@Public @Native Array<String> System.getClassParents(String class_name);
@Virtual void QTreeWidgetItemIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QTreeWidgetItemIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTreeWidgetItemIterator.parents();

void QGraphicsAnchor.setSizePolicy(int policy);
void QGraphicsAnchor.setSpacing(float spacing);
int QGraphicsAnchor.getSizePolicy();
float QGraphicsAnchor.getSpacing();
void QGraphicsAnchor.unsetSpacing();
@Override @Virtual void QGraphicsAnchor.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsAnchor.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMultiHash.addEvent(String event_name, dynamic callback_func);
@Virtual void QMultiHash.signalConnect(String signal_name, dynamic callback_func);

QReadLocker QReadLocker.new(QReadWriteLock lock);
QReadWriteLock QReadLocker.readWriteLock();
void QReadLocker.relock();
void QReadLocker.unlock();
@Virtual void QReadLocker.addEvent(String event_name, dynamic callback_func);
@Virtual void QReadLocker.signalConnect(String signal_name, dynamic callback_func);
Array<String> QReadLocker.parents();

@Virtual void QStringRef.addEvent(String event_name, dynamic callback_func);
@Virtual void QStringRef.signalConnect(String signal_name, dynamic callback_func);
Array<String> QStringRef.parents();

QPen QPen.new();
//QPen QPen.new(int style);
//QPen QPen.new(QColor color);
//QPen QPen.new(QBrush brush, float width, int style, int cap, int join);
//QPen QPen.new(QPen pen);
QBrush QPen.getBrush();
int QPen.getCapStyle();
QColor QPen.getColor();
float QPen.dashOffset();
boolean QPen.isCosmetic();
boolean QPen.isSolid();
int QPen.getJoinStyle();
float QPen.getMiterLimit();
void QPen.setBrush(QBrush brush);
void QPen.setCapStyle(int style);
void QPen.setColor(QColor color);
void QPen.setCosmetic(boolean cosmetic);
void QPen.setDashOffset(float offset);
void QPen.setJoinStyle(int style);
void QPen.setMiterLimit(float limit);
void QPen.setStyle(int style);
void QPen.setWidth(int width);
void QPen.setWidthF(float width);
int QPen.getStyle();
int QPen.getWidth();
float QPen.getWidthF();
@Virtual void QPen.addEvent(String event_name, dynamic callback_func);
@Virtual void QPen.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPen.parents();

@Virtual int QAbstractNetworkCache.cacheSize();
@Virtual QIODevice QAbstractNetworkCache.data(QUrl url);
@Virtual void QAbstractNetworkCache.insert(QIODevice device);
@Virtual QNetworkCacheMetaData QAbstractNetworkCache.metaData(QUrl url);
@Virtual QIODevice QAbstractNetworkCache.prepare(QNetworkCacheMetaData metaData);
@Virtual boolean QAbstractNetworkCache.remove(QUrl url);
@Virtual void QAbstractNetworkCache.updateMetaData(QNetworkCacheMetaData metaData);
@Virtual void QAbstractNetworkCache.clear();
@Override @Virtual void QAbstractNetworkCache.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractNetworkCache.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionComboBox QStyleOptionComboBox.new();
//QStyleOptionComboBox QStyleOptionComboBox.new(QStyleOptionComboBox other);
@Override @Virtual void QStyleOptionComboBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionComboBox.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionToolBoxV2 QStyleOptionToolBoxV2.new();
//QStyleOptionToolBoxV2 QStyleOptionToolBoxV2.new(QStyleOptionToolBoxV2 other);
//QStyleOptionToolBoxV2 QStyleOptionToolBoxV2.new(QStyleOptionToolBox other);
@Override @Virtual void QStyleOptionToolBoxV2.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionToolBoxV2.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override int QStandardItemModel.getColumnCount(QModelIndex parent);
@Virtual @Override QVariant QStandardItemModel.getData(QModelIndex index, int role);
@Virtual @Override boolean QStandardItemModel.dropMimeData(QMimeData data, int action, int row, int column, QModelIndex parent);
@Virtual @Override QtItemFlags QStandardItemModel.flags(QModelIndex index);
@Virtual @Override boolean QStandardItemModel.hasChildren(QModelIndex parent);
@Virtual @Override QVariant QStandardItemModel.getHeaderData(int section, int orientation, int role);
@Virtual @Override QModelIndex QStandardItemModel.index(int row, int column, QModelIndex parent);
@Virtual @Override boolean QStandardItemModel.insertColumns(int column, int count, QModelIndex parent);
@Virtual @Override boolean QStandardItemModel.insertRows(int row, int count, QModelIndex parent);
@Virtual @Override QMimeData QStandardItemModel.mimeData(QModelIndexList indexes);
@Virtual @Override QModelIndex QStandardItemModel.parent(QModelIndex child);
@Virtual @Override boolean QStandardItemModel.removeColumns(int column, int count, QModelIndex parent);
@Virtual @Override boolean QStandardItemModel.removeRows(int row, int count, QModelIndex parent);
@Virtual @Override int QStandardItemModel.getRowCount(QModelIndex parent);
@Virtual @Override boolean QStandardItemModel.setData(QModelIndex index, QVariant value, int role);
@Virtual @Override boolean QStandardItemModel.setHeaderData(int section, int orientation, QVariant value, int role);
@Virtual @Override void QStandardItemModel.sort(int column, int order);
@Virtual @Override QtDropActions QStandardItemModel.supportedDropActions();
QStandardItemModel QStandardItemModel.new(QObject parent);
//QStandardItemModel QStandardItemModel.new(int rows, int columns, QObject parent);
void QStandardItemModel.appendColumn(Array<QStandardItem> items);
void QStandardItemModel.appendRow(Array<QStandardItem> items);
//void QStandardItemModel.appendRow(QStandardItem item);
void QStandardItemModel.clear();
Array<QStandardItem> QStandardItemModel.findItems(String text, QtMatchFlags flags, int column);
QStandardItem QStandardItemModel.getHorizontalHeaderItem(int column);
QModelIndex QStandardItemModel.indexFromItem(QStandardItem item);
QStandardItem QStandardItemModel.invisibleRootItem();
QStandardItem QStandardItemModel.getItem(int row, int column);
QStandardItem QStandardItemModel.itemFromIndex(QModelIndex index);
QStandardItem QStandardItemModel.getItemPrototype();
void QStandardItemModel.setColumnCount(int columns);
void QStandardItemModel.setHorizontalHeaderItem(int column, QStandardItem item);
void QStandardItemModel.setItem(int row, int column, QStandardItem item);
//void QStandardItemModel.setItem(int row, QStandardItem item);
void QStandardItemModel.setItemPrototype(QStandardItem item);
void QStandardItemModel.setRowCount(int rows);
void QStandardItemModel.setSortRole(int role);
void QStandardItemModel.setVerticalHeaderItem(int row, QStandardItem item);
int QStandardItemModel.getSortRole();
Array<QStandardItem> QStandardItemModel.takeColumn(int column);
QStandardItem QStandardItemModel.takeHorizontalHeaderItem(int column);
QStandardItem QStandardItemModel.takeItem(int row, int column);
Array<QStandardItem> QStandardItemModel.takeRow(int row);
QStandardItem QStandardItemModel.takeVerticalHeaderItem(int row);
QStandardItem QStandardItemModel.getVerticalHeaderItem(int row);
@Override @Virtual void QStandardItemModel.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStandardItemModel.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWSPointerCalibrationData.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSPointerCalibrationData.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWSPointerCalibrationData.parents();

QMatrix4x4 QMatrix4x4.new();
//QMatrix4x4 QMatrix4x4.new(float values);
//QMatrix4x4 QMatrix4x4.new(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44);
//QMatrix4x4 QMatrix4x4.new(QTransform transform);
//QMatrix4x4 QMatrix4x4.new(QMatrix matrix);
float QMatrix4x4.constData();
void QMatrix4x4.copyDataTo(float values);
float QMatrix4x4.data();
//float QMatrix4x4.data();
float QMatrix4x4.determinant();
void QMatrix4x4.fill(float value);
void QMatrix4x4.flipCoordinates();
void QMatrix4x4.frustum(float left, float right, float bottom, float top, float nearPlane, float farPlane);
QMatrix4x4 QMatrix4x4.inverted(boolean invertible);
boolean QMatrix4x4.isIdentity();
QPoint QMatrix4x4.map(QPoint point);
//QPointF QMatrix4x4.map(QPointF point);
QRect QMatrix4x4.mapRect(QRect rect);
//QRectF QMatrix4x4.mapRect(QRectF rect);
QMatrix3x3 QMatrix4x4.normalMatrix();
void QMatrix4x4.optimize();
void QMatrix4x4.ortho(float left, float right, float bottom, float top, float nearPlane, float farPlane);
//void QMatrix4x4.ortho(QRect rect);
//void QMatrix4x4.ortho(QRectF rect);
void QMatrix4x4.perspective(float angle, float aspect, float nearPlane, float farPlane);
void QMatrix4x4.rotate(QQuaternion quaternion);
//void QMatrix4x4.rotate(float angle, float x, float y, float z);
void QMatrix4x4.scale(float x, float y);
//void QMatrix4x4.scale(float x, float y, float z);
//void QMatrix4x4.scale(float factor);
void QMatrix4x4.setToIdentity();
QMatrix QMatrix4x4.toAffine();
QTransform QMatrix4x4.toTransform();
//QTransform QMatrix4x4.toTransform(float distanceToPlane);
void QMatrix4x4.translate(float x, float y);
//void QMatrix4x4.translate(float x, float y, float z);
QMatrix4x4 QMatrix4x4.transposed();
@Virtual void QMatrix4x4.addEvent(String event_name, dynamic callback_func);
@Virtual void QMatrix4x4.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMatrix4x4.parents();

QByteArray QByteArray.new();
//QByteArray QByteArray.new(String str);
//QByteArray QByteArray.new(String data, int size);
//QByteArray QByteArray.new(int size, String ch);
//QByteArray QByteArray.new(QByteArray other);
QByteArray QByteArray.append(QByteArray ba);
//QByteArray QByteArray.append(String str);
//QByteArray QByteArray.append(String str);
//QByteArray QByteArray.append(String str, int len);
//QByteArray QByteArray.append(String ch);
String QByteArray.at(int i);
int QByteArray.capacity();
void QByteArray.chop(int n);
void QByteArray.clear();
String QByteArray.constData();
boolean QByteArray.contains(QByteArray ba);
//boolean QByteArray.contains(String str);
//boolean QByteArray.contains(String ch);
int QByteArray.count(QByteArray ba);
//int QByteArray.count(String str);
//int QByteArray.count(String ch);
//int QByteArray.count();
String QByteArray.data();
//String QByteArray.data();
boolean QByteArray.endsWith(QByteArray ba);
//boolean QByteArray.endsWith(String str);
//boolean QByteArray.endsWith(String ch);
QByteArray QByteArray.fill(String ch, int size);
int QByteArray.indexOf(QByteArray ba, int from_);
//int QByteArray.indexOf(String str, int from_);
//int QByteArray.indexOf(String str, int from_);
//int QByteArray.indexOf(String ch, int from_);
QByteArray QByteArray.insert(int i, QByteArray ba);
//QByteArray QByteArray.insert(int i, String str);
//QByteArray QByteArray.insert(int i, String str);
//QByteArray QByteArray.insert(int i, String str, int len);
//QByteArray QByteArray.insert(int i, String ch);
boolean QByteArray.isEmpty();
int QByteArray.lastIndexOf(QByteArray ba, int from_);
//int QByteArray.lastIndexOf(String str, int from_);
//int QByteArray.lastIndexOf(String str, int from_);
//int QByteArray.lastIndexOf(String ch, int from_);
QByteArray QByteArray.left(int len);
QByteArray QByteArray.leftJustified(int width, String fill, boolean truncate);
int QByteArray.length();
QByteArray QByteArray.mid(int pos, int len);
QByteArray QByteArray.prepend(QByteArray ba);
//QByteArray QByteArray.prepend(String str);
//QByteArray QByteArray.prepend(String str, int len);
//QByteArray QByteArray.prepend(String ch);
void QByteArray.push_back(QByteArray other);
//void QByteArray.push_back(String str);
//void QByteArray.push_back(String ch);
void QByteArray.push_front(QByteArray other);
//void QByteArray.push_front(String str);
//void QByteArray.push_front(String ch);
QByteArray QByteArray.remove(int pos, int len);
QByteArray QByteArray.repeated(int times);
QByteArray QByteArray.replace(int pos, int len, QByteArray after);
//QByteArray QByteArray.replace(int pos, int len, String after);
//QByteArray QByteArray.replace(int pos, int len, String after, int alen);
//QByteArray QByteArray.replace(QByteArray before, QByteArray after);
//QByteArray QByteArray.replace(String before, QByteArray after);
//QByteArray QByteArray.replace(String before, int bsize, String after, int asize);
//QByteArray QByteArray.replace(QByteArray before, String after);
//QByteArray QByteArray.replace(String before, QByteArray after);
//QByteArray QByteArray.replace(String before, String after);
//QByteArray QByteArray.replace(String before, String after);
//QByteArray QByteArray.replace(String before, QByteArray after);
//QByteArray QByteArray.replace(String before, String after);
//QByteArray QByteArray.replace(String before, String after);
//QByteArray QByteArray.replace(String before, String after);
void QByteArray.reserve(int size);
void QByteArray.resize(int size);
QByteArray QByteArray.right(int len);
QByteArray QByteArray.rightJustified(int width, String fill, boolean truncate);
QByteArray QByteArray.setNum(int n, int base);
//QByteArray QByteArray.setNum(int n, int base);
//QByteArray QByteArray.setNum(short n, int base);
//QByteArray QByteArray.setNum(int n, int base);
//QByteArray QByteArray.setNum(int n, int base);
//QByteArray QByteArray.setNum(int n, int base);
//QByteArray QByteArray.setNum(double n, String f, int prec);
//QByteArray QByteArray.setNum(float n, String f, int prec);
QByteArray QByteArray.setRawData(String data, int size);
QByteArray QByteArray.simplified();
int QByteArray.size();
Array<QByteArray> QByteArray.split(String sep);
void QByteArray.squeeze();
boolean QByteArray.startsWith(QByteArray ba);
//boolean QByteArray.startsWith(String str);
//boolean QByteArray.startsWith(String ch);
QByteArray QByteArray.toBase64();
double QByteArray.toDouble(boolean ok);
float QByteArray.toFloat(boolean ok);
QByteArray QByteArray.toHex();
int QByteArray.toInt(boolean ok, int base);
long QByteArray.toLong(boolean ok, int base);
int QByteArray.toLongLong(boolean ok, int base);
QByteArray QByteArray.toLower();
QByteArray QByteArray.toPercentEncoding(QByteArray exclude, QByteArray inc, String percent);
short QByteArray.toShort(boolean ok, int base);
int QByteArray.toUInt(boolean ok, int base);
int QByteArray.toULong(boolean ok, int base);
int QByteArray.toULongLong(boolean ok, int base);
int QByteArray.toUShort(boolean ok, int base);
QByteArray QByteArray.toUpper();
QByteArray QByteArray.trimmed();
void QByteArray.truncate(int pos);
QByteArray QByteArray.fromBase64(QByteArray base64);
QByteArray QByteArray.fromHex(QByteArray hexEncoded);
QByteArray QByteArray.fromPercentEncoding(QByteArray input, String percent);
QByteArray QByteArray.fromRawData(String data, int size);
QByteArray QByteArray.number(int n, int base);
//QByteArray QByteArray.number(int n, int base);
//QByteArray QByteArray.number(int n, int base);
//QByteArray QByteArray.number(int n, int base);
//QByteArray QByteArray.number(double n, String f, int prec);
@Virtual void QByteArray.addEvent(String event_name, dynamic callback_func);
@Virtual void QByteArray.signalConnect(String signal_name, dynamic callback_func);
Array<String> QByteArray.parents();

@Virtual void QListWidget.addEvent(String event_name, dynamic callback_func);
@Virtual void QListWidget.signalConnect(String signal_name, dynamic callback_func);

QNetworkConfigurationManager QNetworkConfigurationManager.new(QObject parent);
Array<QNetworkConfiguration> QNetworkConfigurationManager.allConfigurations(int filter);
QNetworkConfigurationManagerCapabilities QNetworkConfigurationManager.capabilities();
QNetworkConfiguration QNetworkConfigurationManager.configurationFromIdentifier(String identifier);
QNetworkConfiguration QNetworkConfigurationManager.defaultConfiguration();
boolean QNetworkConfigurationManager.isOnline();
void QNetworkConfigurationManager.updateConfigurations();
@Override @Virtual void QNetworkConfigurationManager.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QNetworkConfigurationManager.signalConnect(String signal_name, dynamic callback_func);

QUndoStack QUndoStack.new(QObject parent);
void QUndoStack.beginMacro(String text);
boolean QUndoStack.canRedo();
boolean QUndoStack.canUndo();
int QUndoStack.cleanIndex();
void QUndoStack.clear();
QUndoCommand QUndoStack.command(int index);
int QUndoStack.count();
QAction QUndoStack.createRedoAction(QObject parent, String prefix);
QAction QUndoStack.createUndoAction(QObject parent, String prefix);
void QUndoStack.endMacro();
int QUndoStack.getIndex();
boolean QUndoStack.isActive();
boolean QUndoStack.isClean();
void QUndoStack.push(QUndoCommand cmd);
String QUndoStack.redoText();
void QUndoStack.setUndoLimit(int limit);
String QUndoStack.text(int idx);
int QUndoStack.getUndoLimit();
String QUndoStack.undoText();
void QUndoStack.redo();
void QUndoStack.setActive(boolean active);
void QUndoStack.setClean();
void QUndoStack.setIndex(int idx);
void QUndoStack.undo();
@Override @Virtual void QUndoStack.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QUndoStack.signalConnect(String signal_name, dynamic callback_func);

@Virtual Array<QAction> QInputContext.actions();
@Virtual boolean QInputContext.filterEvent(QEvent event);
QWidget QInputContext.getFocusWidget();
@Virtual QFont QInputContext.font();
@Virtual String QInputContext.identifierName();
@Virtual boolean QInputContext.isComposing();
@Virtual String QInputContext.language();
@Virtual void QInputContext.mouseHandler(int x, QMouseEvent event);
@Virtual void QInputContext.reset();
void QInputContext.sendEvent(QInputMethodEvent event);
@Virtual void QInputContext.setFocusWidget(QWidget widget);
QTextFormat QInputContext.standardFormat(int s);
@Virtual void QInputContext.update();
@Virtual void QInputContext.widgetDestroyed(QWidget widget);
@Override @Virtual void QInputContext.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QInputContext.signalConnect(String signal_name, dynamic callback_func);

void QWebHistory.back();
QWebHistoryItem QWebHistory.backItem();
Array<QWebHistoryItem> QWebHistory.backItems(int maxItems);
boolean QWebHistory.canGoBack();
boolean QWebHistory.canGoForward();
void QWebHistory.clear();
int QWebHistory.count();
QWebHistoryItem QWebHistory.currentItem();
int QWebHistory.currentItemIndex();
void QWebHistory.forward();
QWebHistoryItem QWebHistory.forwardItem();
Array<QWebHistoryItem> QWebHistory.forwardItems(int maxItems);
void QWebHistory.goToItem(QWebHistoryItem item);
QWebHistoryItem QWebHistory.itemAt(int i);
Array<QWebHistoryItem> QWebHistory.items();
int QWebHistory.getMaximumItemCount();
void QWebHistory.setMaximumItemCount(int count);
@Virtual void QWebHistory.addEvent(String event_name, dynamic callback_func);
@Virtual void QWebHistory.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWebHistory.parents();

QPointF QGraphicsSceneHelpEvent.scenePos();
QPoint QGraphicsSceneHelpEvent.screenPos();
@Override @Virtual void QGraphicsSceneHelpEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsSceneHelpEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QScrollArea.focusNextPrevChild(boolean next);
@Virtual @Override QSize QScrollArea.sizeHint();
QScrollArea QScrollArea.new(QWidget parent);
QtAlignment QScrollArea.getAlignment();
void QScrollArea.ensureVisible(int x, int y, int xmargin, int ymargin);
void QScrollArea.ensureWidgetVisible(QWidget childWidget, int xmargin, int ymargin);
void QScrollArea.setAlignment(QtAlignment arg0);
void QScrollArea.setWidget(QWidget widget);
void QScrollArea.setWidgetResizable(boolean resizable);
QWidget QScrollArea.takeWidget();
QWidget QScrollArea.getWidget();
boolean QScrollArea.getWidgetResizable();
@Override @Virtual void QScrollArea.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QScrollArea.signalConnect(String signal_name, dynamic callback_func);

QHostAddress QHostAddress.new();
//QHostAddress QHostAddress.new(int ip4Addr);
//QHostAddress QHostAddress.new(int ip6Addr);
//QHostAddress QHostAddress.new(Q_IPV6ADDR ip6Addr);
//QHostAddress QHostAddress.new(sockaddr sockaddr);
//QHostAddress QHostAddress.new(String address);
//QHostAddress QHostAddress.new(QHostAddress address);
//QHostAddress QHostAddress.new(int address);
void QHostAddress.clear();
boolean QHostAddress.isInSubnet(QHostAddress subnet, int netmask);
int QHostAddress.protocol();
String QHostAddress.getScopeId();
void QHostAddress.setAddress(int ip4Addr);
//void QHostAddress.setAddress(int ip6Addr);
//void QHostAddress.setAddress(Q_IPV6ADDR ip6Addr);
//boolean QHostAddress.setAddress(String address);
//void QHostAddress.setAddress(sockaddr sockaddr);
void QHostAddress.setScopeId(String id);
int QHostAddress.toIPv4Address();
Q_IPV6ADDR QHostAddress.toIPv6Address();
String QHostAddress.toString();
@Virtual void QHostAddress.addEvent(String event_name, dynamic callback_func);
@Virtual void QHostAddress.signalConnect(String signal_name, dynamic callback_func);
Array<String> QHostAddress.parents();

@Virtual @Override void QBoxLayout.addItem(QLayoutItem item);
@Virtual @Override int QBoxLayout.count();
@Virtual @Override QtOrientations QBoxLayout.expandingDirections();
@Virtual @Override boolean QBoxLayout.hasHeightForWidth();
@Virtual @Override int QBoxLayout.heightForWidth(int w);
@Virtual @Override void QBoxLayout.invalidate();
@Virtual @Override QLayoutItem QBoxLayout.itemAt(int index);
@Virtual @Override QSize QBoxLayout.maximumSize();
@Virtual @Override int QBoxLayout.minimumHeightForWidth(int w);
@Virtual @Override QSize QBoxLayout.minimumSize();
@Virtual @Override void QBoxLayout.setGeometry(QRect r);
@Virtual @Override QSize QBoxLayout.sizeHint();
@Virtual @Override QLayoutItem QBoxLayout.takeAt(int index);
QBoxLayout QBoxLayout.new(int dir, QWidget parent);
void QBoxLayout.addLayout(QLayout layout, int stretch);
void QBoxLayout.addSpacerItem(QSpacerItem spacerItem);
void QBoxLayout.addSpacing(int size);
void QBoxLayout.addStretch(int stretch);
void QBoxLayout.addStrut(int size);
void QBoxLayout.addWidget(QWidget widget, int stretch, QtAlignment alignment);
int QBoxLayout.getDirection();
void QBoxLayout.insertLayout(int index, QLayout layout, int stretch);
void QBoxLayout.insertSpacerItem(int index, QSpacerItem spacerItem);
void QBoxLayout.insertSpacing(int index, int size);
void QBoxLayout.insertStretch(int index, int stretch);
void QBoxLayout.insertWidget(int index, QWidget widget, int stretch, QtAlignment alignment);
void QBoxLayout.setDirection(int direction);
void QBoxLayout.setSpacing(int spacing);
void QBoxLayout.setStretch(int index, int stretch);
boolean QBoxLayout.setStretchFactor(QWidget widget, int stretch);
//boolean QBoxLayout.setStretchFactor(QLayout layout, int stretch);
int QBoxLayout.getSpacing();
int QBoxLayout.getStretch(int index);
@Override @Virtual void QBoxLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QBoxLayout.signalConnect(String signal_name, dynamic callback_func);

QShortcutEvent QShortcutEvent.new(QKeySequence key, int id, boolean ambiguous);
boolean QShortcutEvent.isAmbiguous();
QKeySequence QShortcutEvent.key();
int QShortcutEvent.shortcutId();
@Override @Virtual void QShortcutEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QShortcutEvent.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionTabBarBase QStyleOptionTabBarBase.new();
//QStyleOptionTabBarBase QStyleOptionTabBarBase.new(QStyleOptionTabBarBase other);
@Override @Virtual void QStyleOptionTabBarBase.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionTabBarBase.signalConnect(String signal_name, dynamic callback_func);

QSizeF QSizeF.new();
//QSizeF QSizeF.new(QSize size);
//QSizeF QSizeF.new(float width, float height);
QSizeF QSizeF.boundedTo(QSizeF otherSize);
QSizeF QSizeF.expandedTo(QSizeF otherSize);
float QSizeF.getHeight();
boolean QSizeF.isEmpty();
float QSizeF.rheight();
float QSizeF.rwidth();
void QSizeF.scale(float width, float height, int mode);
//void QSizeF.scale(QSizeF size, int mode);
void QSizeF.setHeight(float height);
void QSizeF.setWidth(float width);
QSize QSizeF.toSize();
void QSizeF.transpose();
float QSizeF.getWidth();
@Virtual void QSizeF.addEvent(String event_name, dynamic callback_func);
@Virtual void QSizeF.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSizeF.parents();

@Virtual @Override void QPrintPreviewWidget.setVisible(boolean visible);
QPrintPreviewWidget QPrintPreviewWidget.new(QPrinter printer, QWidget parent, QtWindowFlags flags);
//QPrintPreviewWidget QPrintPreviewWidget.new(QWidget parent, QtWindowFlags flags);
int QPrintPreviewWidget.getCurrentPage();
int QPrintPreviewWidget.getOrientation();
int QPrintPreviewWidget.pageCount();
int QPrintPreviewWidget.getViewMode();
float QPrintPreviewWidget.getZoomFactor();
int QPrintPreviewWidget.getZoomMode();
void QPrintPreviewWidget.fitInView();
void QPrintPreviewWidget.fitToWidth();
void QPrintPreviewWidget.print();
void QPrintPreviewWidget.setAllPagesViewMode();
void QPrintPreviewWidget.setCurrentPage(int page);
void QPrintPreviewWidget.setFacingPagesViewMode();
void QPrintPreviewWidget.setLandscapeOrientation();
void QPrintPreviewWidget.setOrientation(int orientation);
void QPrintPreviewWidget.setPortraitOrientation();
void QPrintPreviewWidget.setSinglePageViewMode();
void QPrintPreviewWidget.setViewMode(int mode);
void QPrintPreviewWidget.setZoomFactor(float factor);
void QPrintPreviewWidget.setZoomMode(int zoomMode);
void QPrintPreviewWidget.updatePreview();
void QPrintPreviewWidget.zoomIn(float factor);
void QPrintPreviewWidget.zoomOut(float factor);
@Override @Virtual void QPrintPreviewWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPrintPreviewWidget.signalConnect(String signal_name, dynamic callback_func);

QIconDragEvent QIconDragEvent.new();
@Override @Virtual void QIconDragEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QIconDragEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QScreenDriverPlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QScreenDriverPlugin.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QDirectPainter.addEvent(String event_name, dynamic callback_func);
@Virtual void QDirectPainter.signalConnect(String signal_name, dynamic callback_func);

QGesture QGesture.new(QObject parent);
int QGesture.getGestureCancelPolicy();
int QGesture.gestureType();
boolean QGesture.hasHotSpot();
QPointF QGesture.getHotSpot();
void QGesture.setGestureCancelPolicy(int policy);
void QGesture.setHotSpot(QPointF value);
int QGesture.state();
void QGesture.unsetHotSpot();
@Override @Virtual void QGesture.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGesture.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QWebFrame.event(QEvent e);
void QWebFrame.addToJavaScriptWindowObject(String name, QObject object);
//void QWebFrame.addToJavaScriptWindowObject(String name, QObject object, int own);
QUrl QWebFrame.baseUrl();
Array<QWebFrame> QWebFrame.childFrames();
QSize QWebFrame.contentsSize();
QWebElement QWebFrame.documentElement();
QWebElementCollection QWebFrame.findAllElements(String selectorQuery);
QWebElement QWebFrame.findFirstElement(String selectorQuery);
String QWebFrame.frameName();
QRect QWebFrame.geometry();
boolean QWebFrame.hasFocus();
QWebHitTestResult QWebFrame.hitTestContent(QPoint pos);
QIcon QWebFrame.icon();
void QWebFrame.load(QUrl url);
//void QWebFrame.load(QNetworkRequest req, int operation, QByteArray body);
QWebPage QWebFrame.page();
QWebFrame QWebFrame.parentFrame();
QPoint QWebFrame.pos();
void QWebFrame.render(QPainter painter);
//void QWebFrame.render(QPainter painter, QRegion clip);
//void QWebFrame.render(QPainter painter, int layer, QRegion clip);
String QWebFrame.renderTreeDump();
QUrl QWebFrame.requestedUrl();
void QWebFrame.scroll(int dx, int dy);
QRect QWebFrame.scrollBarGeometry(int orientation);
int QWebFrame.scrollBarMaximum(int orientation);
int QWebFrame.scrollBarMinimum(int orientation);
int QWebFrame.getScrollBarPolicy(int orientation);
int QWebFrame.getScrollBarValue(int orientation);
QPoint QWebFrame.getScrollPosition();
void QWebFrame.scrollToAnchor(String anchor);
QWebSecurityOrigin QWebFrame.securityOrigin();
void QWebFrame.setContent(QByteArray data, String mimeType, QUrl baseUrl);
void QWebFrame.setFocus();
void QWebFrame.setHtml(String html, QUrl baseUrl);
void QWebFrame.setScrollBarPolicy(int orientation, int policy);
void QWebFrame.setScrollBarValue(int orientation, int value);
void QWebFrame.setScrollPosition(QPoint pos);
void QWebFrame.setTextSizeMultiplier(float factor);
void QWebFrame.setUrl(QUrl url);
void QWebFrame.setZoomFactor(float factor);
float QWebFrame.getTextSizeMultiplier();
String QWebFrame.title();
String QWebFrame.toHtml();
String QWebFrame.toPlainText();
QUrl QWebFrame.getUrl();
float QWebFrame.getZoomFactor();
QVariant QWebFrame.evaluateJavaScript(String scriptSource);
void QWebFrame.print(QPrinter printer);
@Override @Virtual void QWebFrame.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWebFrame.signalConnect(String signal_name, dynamic callback_func);

QAuthenticator QAuthenticator.new();
//QAuthenticator QAuthenticator.new(QAuthenticator other);
QVariant QAuthenticator.getOption(String opt);
QVariantHash QAuthenticator.options();
String QAuthenticator.getPassword();
String QAuthenticator.realm();
void QAuthenticator.setOption(String opt, QVariant value);
void QAuthenticator.setPassword(String password);
void QAuthenticator.setUser(String user);
String QAuthenticator.getUser();
@Virtual void QAuthenticator.addEvent(String event_name, dynamic callback_func);
@Virtual void QAuthenticator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QAuthenticator.parents();

QWebDatabase QWebDatabase.new(QWebDatabase other);
String QWebDatabase.displayName();
int QWebDatabase.expectedSize();
String QWebDatabase.fileName();
String QWebDatabase.name();
QWebSecurityOrigin QWebDatabase.origin();
int QWebDatabase.size();
void QWebDatabase.removeAllDatabases();
void QWebDatabase.removeDatabase(QWebDatabase db);
@Virtual void QWebDatabase.addEvent(String event_name, dynamic callback_func);
@Virtual void QWebDatabase.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWebDatabase.parents();

QStyleOptionToolBar QStyleOptionToolBar.new();
//QStyleOptionToolBar QStyleOptionToolBar.new(QStyleOptionToolBar other);
@Override @Virtual void QStyleOptionToolBar.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionToolBar.signalConnect(String signal_name, dynamic callback_func);

QSslCipher QSslCipher.new();
//QSslCipher QSslCipher.new(String name, int protocol);
//QSslCipher QSslCipher.new(QSslCipher other);
String QSslCipher.authenticationMethod();
String QSslCipher.encryptionMethod();
String QSslCipher.keyExchangeMethod();
String QSslCipher.name();
int QSslCipher.protocol();
String QSslCipher.protocolString();
int QSslCipher.supportedBits();
int QSslCipher.usedBits();
@Virtual void QSslCipher.addEvent(String event_name, dynamic callback_func);
@Virtual void QSslCipher.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSslCipher.parents();

QPointF QTapAndHoldGesture.getPosition();
void QTapAndHoldGesture.setPosition(QPointF pos);
void QTapAndHoldGesture.setTimeout(int msecs);
int QTapAndHoldGesture.getTimeout();
@Override @Virtual void QTapAndHoldGesture.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTapAndHoldGesture.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QXmlStreamWriter.addEvent(String event_name, dynamic callback_func);
@Virtual void QXmlStreamWriter.signalConnect(String signal_name, dynamic callback_func);
Array<String> QXmlStreamWriter.parents();

QDragLeaveEvent QDragLeaveEvent.new();
@Override @Virtual void QDragLeaveEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDragLeaveEvent.signalConnect(String signal_name, dynamic callback_func);

QRect QDesktopWidget.availableGeometry(int screen);
//QRect QDesktopWidget.availableGeometry(QWidget widget);
//QRect QDesktopWidget.availableGeometry(QPoint p);
boolean QDesktopWidget.isVirtualDesktop();
int QDesktopWidget.primaryScreen();
QWidget QDesktopWidget.screen(int screen);
int QDesktopWidget.screenCount();
QRect QDesktopWidget.screenGeometry(int screen);
//QRect QDesktopWidget.screenGeometry(QWidget widget);
//QRect QDesktopWidget.screenGeometry(QPoint p);
int QDesktopWidget.screenNumber(QWidget widget);
//int QDesktopWidget.screenNumber(QPoint point);
@Override @Virtual void QDesktopWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDesktopWidget.signalConnect(String signal_name, dynamic callback_func);

QSslKey QSslKey.new();
//QSslKey QSslKey.new(QByteArray encoded, int algorithm, int encoding, int type, QByteArray passPhrase);
//QSslKey QSslKey.new(QIODevice device, int algorithm, int encoding, int type, QByteArray passPhrase);
//QSslKey QSslKey.new(QSslKey other);
int QSslKey.algorithm();
void QSslKey.clear();
int QSslKey.length();
QByteArray QSslKey.toDer(QByteArray passPhrase);
QByteArray QSslKey.toPem(QByteArray passPhrase);
int QSslKey.type();
@Virtual void QSslKey.addEvent(String event_name, dynamic callback_func);
@Virtual void QSslKey.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSslKey.parents();

@Virtual @Override void QWizard.setVisible(boolean visible);
@Virtual @Override QSize QWizard.sizeHint();
QWizard QWizard.new(QWidget parent, QtWindowFlags flags);
int QWizard.addPage(QWizardPage page);
QAbstractButton QWizard.getButton(int which);
String QWizard.getButtonText(int which);
int QWizard.currentId();
QWizardPage QWizard.currentPage();
QVariant QWizard.getField(String name);
boolean QWizard.hasVisitedPage(int id);
@Virtual int QWizard.nextId();
QWizardWizardOptions QWizard.getOptions();
QWizardPage QWizard.getPage(int id);
Array<int> QWizard.pageIds();
QPixmap QWizard.getPixmap(int which);
void QWizard.removePage(int id);
void QWizard.setButton(int which, QAbstractButton button);
void QWizard.setButtonLayout(Array<int> layout);
void QWizard.setButtonText(int which, String text);
void QWizard.setDefaultProperty(String className, String property, String changedSignal);
void QWizard.setField(String name, QVariant value);
void QWizard.setOption(int option, boolean on);
void QWizard.setOptions(QWizardWizardOptions options);
void QWizard.setPage(int id, QWizardPage page);
void QWizard.setPixmap(int which, QPixmap pixmap);
void QWizard.setSideWidget(QWidget widget);
void QWizard.setStartId(int id);
void QWizard.setSubTitleFormat(int fmt);
void QWizard.setTitleFormat(int fmt);
void QWizard.setWizardStyle(int style);
QWidget QWizard.getSideWidget();
int QWizard.getStartId();
int QWizard.getSubTitleFormat();
boolean QWizard.testOption(int option);
int QWizard.getTitleFormat();
@Virtual boolean QWizard.validateCurrentPage();
Array<int> QWizard.visitedPages();
int QWizard.getWizardStyle();
void QWizard.back();
void QWizard.next();
void QWizard.restart();
@Override @Virtual void QWizard.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWizard.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QSlider.event(QEvent event);
@Virtual @Override QSize QSlider.minimumSizeHint();
@Virtual @Override QSize QSlider.sizeHint();
QSlider QSlider.new(QWidget parent);
//QSlider QSlider.new(int orientation, QWidget parent);
void QSlider.setTickInterval(int ti);
void QSlider.setTickPosition(int position);
int QSlider.getTickInterval();
int QSlider.getTickPosition();
@Override @Virtual void QSlider.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSlider.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QKbdDriverPlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QKbdDriverPlugin.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QPrintPreviewDialog.done(int result);
@Virtual @Override void QPrintPreviewDialog.setVisible(boolean visible);
QPrintPreviewDialog QPrintPreviewDialog.new(QPrinter printer, QWidget parent, QtWindowFlags flags);
//QPrintPreviewDialog QPrintPreviewDialog.new(QWidget parent, QtWindowFlags flags);
void QPrintPreviewDialog.open(QObject receiver, String member);
QPrinter QPrintPreviewDialog.printer();
@Override @Virtual void QPrintPreviewDialog.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPrintPreviewDialog.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QLineEdit.event(QEvent e);
@Virtual @Override QVariant QLineEdit.inputMethodQuery(int property);
@Virtual @Override QSize QLineEdit.minimumSizeHint();
@Virtual @Override QSize QLineEdit.sizeHint();
QLineEdit QLineEdit.new(QWidget parent);
//QLineEdit QLineEdit.new(String contents, QWidget parent);
QtAlignment QLineEdit.getAlignment();
void QLineEdit.backspace();
QCompleter QLineEdit.getCompleter();
QMenu QLineEdit.createStandardContextMenu();
void QLineEdit.cursorBackward(boolean mark, int steps);
void QLineEdit.cursorForward(boolean mark, int steps);
int QLineEdit.getCursorPosition();
int QLineEdit.cursorPositionAt(QPoint pos);
void QLineEdit.cursorWordBackward(boolean mark);
void QLineEdit.cursorWordForward(boolean mark);
void QLineEdit.del();
void QLineEdit.deselect();
String QLineEdit.displayText();
boolean QLineEdit.getDragEnabled();
int QLineEdit.getEchoMode();
void QLineEdit.end(boolean mark);
void QLineEdit.getTextMargins(int left, int top, int right, int bottom);
boolean QLineEdit.hasAcceptableInput();
boolean QLineEdit.hasFrame();
boolean QLineEdit.hasSelectedText();
void QLineEdit.home(boolean mark);
String QLineEdit.getInputMask();
void QLineEdit.insert(String new_Text);
boolean QLineEdit.isModified();
boolean QLineEdit.isReadOnly();
boolean QLineEdit.isRedoAvailable();
boolean QLineEdit.isUndoAvailable();
int QLineEdit.getMaxLength();
String QLineEdit.getPlaceholderText();
String QLineEdit.selectedText();
int QLineEdit.selectionStart();
void QLineEdit.setAlignment(QtAlignment flag);
void QLineEdit.setCompleter(QCompleter c);
void QLineEdit.setCursorPosition(int arg0);
void QLineEdit.setDragEnabled(boolean b);
void QLineEdit.setEchoMode(int arg0);
void QLineEdit.setFrame(boolean arg0);
void QLineEdit.setInputMask(String inputMask);
void QLineEdit.setMaxLength(int arg0);
void QLineEdit.setModified(boolean arg0);
void QLineEdit.setPlaceholderText(String arg0);
void QLineEdit.setReadOnly(boolean arg0);
void QLineEdit.setSelection(int start, int length);
void QLineEdit.setTextMargins(int left, int top, int right, int bottom);
//void QLineEdit.setTextMargins(QMargins margins);
void QLineEdit.setValidator(QValidator v);
String QLineEdit.getText();
QMargins QLineEdit.textMargins();
QValidator QLineEdit.getValidator();
void QLineEdit.clear();
void QLineEdit.copy();
void QLineEdit.cut();
void QLineEdit.paste();
void QLineEdit.redo();
void QLineEdit.selectAll();
void QLineEdit.setText(String arg0);
void QLineEdit.undo();
@Override @Virtual void QLineEdit.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QLineEdit.signalConnect(String signal_name, dynamic callback_func);

QSslConfiguration QSslConfiguration.new();
//QSslConfiguration QSslConfiguration.new(QSslConfiguration other);
Array<QSslCertificate> QSslConfiguration.getCaCertificates();
Array<QSslCipher> QSslConfiguration.getCiphers();
QSslCertificate QSslConfiguration.getLocalCertificate();
QSslCertificate QSslConfiguration.peerCertificate();
Array<QSslCertificate> QSslConfiguration.peerCertificateChain();
int QSslConfiguration.getPeerVerifyDepth();
int QSslConfiguration.getPeerVerifyMode();
QSslKey QSslConfiguration.getPrivateKey();
int QSslConfiguration.getProtocol();
QSslCipher QSslConfiguration.sessionCipher();
void QSslConfiguration.setCaCertificates(Array<QSslCertificate> certificates);
void QSslConfiguration.setCiphers(Array<QSslCipher> ciphers);
void QSslConfiguration.setLocalCertificate(QSslCertificate certificate);
void QSslConfiguration.setPeerVerifyDepth(int depth);
void QSslConfiguration.setPeerVerifyMode(int mode);
void QSslConfiguration.setPrivateKey(QSslKey key);
void QSslConfiguration.setProtocol(int protocol);
QSslConfiguration QSslConfiguration.getDefaultConfiguration();
void QSslConfiguration.setDefaultConfiguration(QSslConfiguration configuration);
@Virtual void QSslConfiguration.addEvent(String event_name, dynamic callback_func);
@Virtual void QSslConfiguration.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSslConfiguration.parents();

QHttp QHttp.new(QObject parent);
//QHttp QHttp.new(String hostName, int port, QObject parent);
//QHttp QHttp.new(String hostName, int mode, int port, QObject parent);
int QHttp.bytesAvailable();
void QHttp.clearPendingRequests();
int QHttp.close();
QIODevice QHttp.currentDestinationDevice();
int QHttp.currentId();
QHttpRequestHeader QHttp.currentRequest();
QIODevice QHttp.currentSourceDevice();
int QHttp.error();
String QHttp.errorString();
int QHttp.get(String path, QIODevice to_);
boolean QHttp.hasPendingRequests();
int QHttp.head(String path);
QHttpResponseHeader QHttp.lastResponse();
int QHttp.post(String path, QIODevice data, QIODevice to_);
//int QHttp.post(String path, QByteArray data, QIODevice to_);
int QHttp.read(String data, int maxlen);
QByteArray QHttp.readAll();
int QHttp.request(QHttpRequestHeader header, QIODevice data, QIODevice to_);
//int QHttp.request(QHttpRequestHeader header, QByteArray data, QIODevice to_);
int QHttp.setHost(String hostName, int port);
//int QHttp.setHost(String hostName, int mode, int port);
int QHttp.setProxy(String host, int port, String username, String password);
//int QHttp.setProxy(QNetworkProxy proxy);
int QHttp.setSocket(QTcpSocket socket);
int QHttp.setUser(String userName, String password);
int QHttp.state();
void QHttp.abort();
void QHttp.ignoreSslErrors();
@Override @Virtual void QHttp.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QHttp.signalConnect(String signal_name, dynamic callback_func);

QKeySequence QKeySequence.new();
//QKeySequence QKeySequence.new(String key);
//QKeySequence QKeySequence.new(String key, int fmt);
//QKeySequence QKeySequence.new(int k1, int k2, int k3, int k4);
//QKeySequence QKeySequence.new(QKeySequence keysequence);
//QKeySequence QKeySequence.new(int key);
int QKeySequence.count();
boolean QKeySequence.isEmpty();
int QKeySequence.matches(QKeySequence seq);
String QKeySequence.toString(int fmt);
QKeySequence QKeySequence.fromString(String str, int fmt);
Array<QKeySequence> QKeySequence.keyBindings(int key);
QKeySequence QKeySequence.mnemonic(String text);
@Virtual void QKeySequence.addEvent(String event_name, dynamic callback_func);
@Virtual void QKeySequence.signalConnect(String signal_name, dynamic callback_func);
Array<String> QKeySequence.parents();

QLine QLine.new();
//QLine QLine.new(QPoint p1, QPoint p2);
//QLine QLine.new(int x1, int y1, int x2, int y2);
QPoint QLine.getP1();
QPoint QLine.getP2();
int QLine.x1();
int QLine.x2();
int QLine.y1();
int QLine.y2();
int QLine.dx();
int QLine.dy();
void QLine.setP1(QPoint p1);
void QLine.setP2(QPoint p2);
void QLine.setLine(int x1, int y1, int x2, int y2);
void QLine.setPoints(QPoint p1, QPoint p2);
void QLine.translate(QPoint offset);
//void QLine.translate(int dx, int dy);
QLine QLine.translated(QPoint offset);
//QLine QLine.translated(int dx, int dy);
@Virtual void QLine.addEvent(String event_name, dynamic callback_func);
@Virtual void QLine.signalConnect(String signal_name, dynamic callback_func);
Array<String> QLine.parents();

@Virtual @Override boolean QSslSocket.atEnd();
@Virtual @Override int QSslSocket.bytesAvailable();
@Virtual @Override int QSslSocket.bytesToWrite();
@Virtual @Override boolean QSslSocket.canReadLine();
@Virtual @Override void QSslSocket.close();
@Virtual @Override boolean QSslSocket.waitForBytesWritten(int msecs);
@Virtual @Override boolean QSslSocket.waitForReadyRead(int msecs);
QSslSocket QSslSocket.new(QObject parent);
void QSslSocket.abort();
void QSslSocket.addCaCertificate(QSslCertificate certificate);
boolean QSslSocket.addCaCertificates(String path, int fmt, int syntax);
//void QSslSocket.addCaCertificates(Array<QSslCertificate> certificates);
Array<QSslCertificate> QSslSocket.getCaCertificates();
Array<QSslCipher> QSslSocket.getCiphers();
void QSslSocket.connectToHostEncrypted(String hostName, int port, QIODeviceOpenMode mode);
//void QSslSocket.connectToHostEncrypted(String hostName, int port, String sslPeerName, QIODeviceOpenMode mode);
int QSslSocket.encryptedBytesAvailable();
int QSslSocket.encryptedBytesToWrite();
boolean QSslSocket.flush();
void QSslSocket.ignoreSslErrors(Array<QSslError> errors);
boolean QSslSocket.isEncrypted();
QSslCertificate QSslSocket.getLocalCertificate();
int QSslSocket.mode();
QSslCertificate QSslSocket.peerCertificate();
Array<QSslCertificate> QSslSocket.peerCertificateChain();
int QSslSocket.getPeerVerifyDepth();
int QSslSocket.getPeerVerifyMode();
QSslKey QSslSocket.getPrivateKey();
int QSslSocket.getProtocol();
QSslCipher QSslSocket.sessionCipher();
void QSslSocket.setCaCertificates(Array<QSslCertificate> certificates);
void QSslSocket.setCiphers(Array<QSslCipher> ciphers);
//void QSslSocket.setCiphers(String ciphers);
void QSslSocket.setLocalCertificate(QSslCertificate certificate);
//void QSslSocket.setLocalCertificate(String path, int fmt);
void QSslSocket.setPeerVerifyDepth(int depth);
void QSslSocket.setPeerVerifyMode(int mode);
void QSslSocket.setPrivateKey(QSslKey key);
//void QSslSocket.setPrivateKey(String fileName, int algorithm, int fmt, QByteArray passPhrase);
void QSslSocket.setProtocol(int protocol);
void QSslSocket.setReadBufferSize(int size);
boolean QSslSocket.setSocketDescriptor(int socketDescriptor, int state, QIODeviceOpenMode openMode);
void QSslSocket.setSocketOption(int option, QVariant value);
void QSslSocket.setSslConfiguration(QSslConfiguration configuration);
QVariant QSslSocket.getSocketOption(int option);
QSslConfiguration QSslSocket.getSslConfiguration();
Array<QSslError> QSslSocket.sslErrors();
boolean QSslSocket.waitForConnected(int msecs);
boolean QSslSocket.waitForDisconnected(int msecs);
boolean QSslSocket.waitForEncrypted(int msecs);
void QSslSocket.addDefaultCaCertificate(QSslCertificate certificate);
boolean QSslSocket.addDefaultCaCertificates(String path, int encoding, int syntax);
//void QSslSocket.addDefaultCaCertificates(Array<QSslCertificate> certificates);
Array<QSslCertificate> QSslSocket.getDefaultCaCertificates();
Array<QSslCipher> QSslSocket.getDefaultCiphers();
void QSslSocket.setDefaultCaCertificates(Array<QSslCertificate> certificates);
void QSslSocket.setDefaultCiphers(Array<QSslCipher> ciphers);
Array<QSslCipher> QSslSocket.supportedCiphers();
boolean QSslSocket.supportsSsl();
Array<QSslCertificate> QSslSocket.systemCaCertificates();
//void QSslSocket.ignoreSslErrors();
void QSslSocket.startClientEncryption();
void QSslSocket.startServerEncryption();
@Override @Virtual void QSslSocket.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSslSocket.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override int QGraphicsAnchorLayout.count();
@Virtual @Override void QGraphicsAnchorLayout.invalidate();
@Virtual @Override QGraphicsLayoutItem QGraphicsAnchorLayout.itemAt(int index);
@Virtual @Override void QGraphicsAnchorLayout.removeAt(int index);
@Virtual @Override void QGraphicsAnchorLayout.setGeometry(QRectF geom);
QGraphicsAnchorLayout QGraphicsAnchorLayout.new(QGraphicsLayoutItem parent);
QGraphicsAnchor QGraphicsAnchorLayout.addAnchor(QGraphicsLayoutItem firstItem, int firstEdge, QGraphicsLayoutItem secondItem, int secondEdge);
void QGraphicsAnchorLayout.addAnchors(QGraphicsLayoutItem firstItem, QGraphicsLayoutItem secondItem, QtOrientations orientations);
void QGraphicsAnchorLayout.addCornerAnchors(QGraphicsLayoutItem firstItem, int firstCorner, QGraphicsLayoutItem secondItem, int secondCorner);
QGraphicsAnchor QGraphicsAnchorLayout.anchor(QGraphicsLayoutItem firstItem, int firstEdge, QGraphicsLayoutItem secondItem, int secondEdge);
float QGraphicsAnchorLayout.getHorizontalSpacing();
void QGraphicsAnchorLayout.setHorizontalSpacing(float spacing);
void QGraphicsAnchorLayout.setSpacing(float spacing);
void QGraphicsAnchorLayout.setVerticalSpacing(float spacing);
float QGraphicsAnchorLayout.getVerticalSpacing();
@Override @Virtual void QGraphicsAnchorLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsAnchorLayout.signalConnect(String signal_name, dynamic callback_func);

QFontInfo QFontInfo.new(QFont font);
//QFontInfo QFontInfo.new(QFontInfo fi);
boolean QFontInfo.bold();
boolean QFontInfo.exactMatch();
String QFontInfo.family();
boolean QFontInfo.fixedPitch();
boolean QFontInfo.italic();
int QFontInfo.pixelSize();
int QFontInfo.pointSize();
float QFontInfo.pointSizeF();
boolean QFontInfo.rawMode();
int QFontInfo.style();
int QFontInfo.styleHint();
int QFontInfo.weight();
@Virtual void QFontInfo.addEvent(String event_name, dynamic callback_func);
@Virtual void QFontInfo.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFontInfo.parents();

@Virtual void QListWidgetItem.addEvent(String event_name, dynamic callback_func);
@Virtual void QListWidgetItem.signalConnect(String signal_name, dynamic callback_func);
Array<String> QListWidgetItem.parents();

@Virtual @Override int QDoubleValidator.validate(String input, int pos);
QDoubleValidator QDoubleValidator.new(QObject parent);
//QDoubleValidator QDoubleValidator.new(double bottom, double top, int decimals, QObject parent);
double QDoubleValidator.getBottom();
int QDoubleValidator.getDecimals();
int QDoubleValidator.getNotation();
void QDoubleValidator.setBottom(double arg0);
void QDoubleValidator.setDecimals(int arg0);
void QDoubleValidator.setNotation(int arg0);
@Virtual void QDoubleValidator.setRange(double minimum, double maximum, int decimals);
void QDoubleValidator.setTop(double arg0);
double QDoubleValidator.getTop();
@Override @Virtual void QDoubleValidator.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDoubleValidator.signalConnect(String signal_name, dynamic callback_func);

QFontMetricsF QFontMetricsF.new(QFont font);
//QFontMetricsF QFontMetricsF.new(QFont font, QPaintDevice paintdevice);
//QFontMetricsF QFontMetricsF.new(QFontMetrics fontMetrics);
//QFontMetricsF QFontMetricsF.new(QFontMetricsF fm);
float QFontMetricsF.ascent();
float QFontMetricsF.averageCharWidth();
QRectF QFontMetricsF.boundingRect(String text);
//QRectF QFontMetricsF.boundingRect(QChar ch);
//QRectF QFontMetricsF.boundingRect(QRectF rect, int flags, String text, int tabStops, int tabArray);
float QFontMetricsF.descent();
String QFontMetricsF.elidedText(String text, int mode, float width, int flags);
float QFontMetricsF.height();
boolean QFontMetricsF.inFont(QChar ch);
float QFontMetricsF.leading();
float QFontMetricsF.leftBearing(QChar ch);
float QFontMetricsF.lineSpacing();
float QFontMetricsF.lineWidth();
float QFontMetricsF.maxWidth();
float QFontMetricsF.minLeftBearing();
float QFontMetricsF.minRightBearing();
float QFontMetricsF.overlinePos();
float QFontMetricsF.rightBearing(QChar ch);
QSizeF QFontMetricsF.size(int flags, String text, int tabStops, int tabArray);
float QFontMetricsF.strikeOutPos();
QRectF QFontMetricsF.tightBoundingRect(String text);
float QFontMetricsF.underlinePos();
float QFontMetricsF.width(String text);
//float QFontMetricsF.width(QChar ch);
float QFontMetricsF.xHeight();
@Virtual void QFontMetricsF.addEvent(String event_name, dynamic callback_func);
@Virtual void QFontMetricsF.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFontMetricsF.parents();

@Virtual Array<QByteArray> QTextCodec.aliases();
boolean QTextCodec.canEncode(QChar ch);
//boolean QTextCodec.canEncode(String s);
QByteArray QTextCodec.fromUnicode(String str);
QTextDecoder QTextCodec.makeDecoder();
//QTextDecoder QTextCodec.makeDecoder(QTextCodecConversionFlags flags);
QTextEncoder QTextCodec.makeEncoder();
//QTextEncoder QTextCodec.makeEncoder(QTextCodecConversionFlags flags);
@Virtual int QTextCodec.mibEnum();
@Virtual QByteArray QTextCodec.name();
String QTextCodec.toUnicode(QByteArray a);
//String QTextCodec.toUnicode(String chars);
Array<QByteArray> QTextCodec.availableCodecs();
Array<int> QTextCodec.availableMibs();
QTextCodec QTextCodec.getCodecForCStrings();
QTextCodec QTextCodec.codecForHtml(QByteArray ba, QTextCodec defaultCodec);
//QTextCodec QTextCodec.codecForHtml(QByteArray ba);
QTextCodec QTextCodec.getCodecForLocale();
QTextCodec QTextCodec.codecForMib(int mib);
QTextCodec QTextCodec.codecForName(QByteArray name);
//QTextCodec QTextCodec.codecForName(String name);
QTextCodec QTextCodec.getCodecForTr();
QTextCodec QTextCodec.codecForUtfText(QByteArray ba, QTextCodec defaultCodec);
//QTextCodec QTextCodec.codecForUtfText(QByteArray ba);
void QTextCodec.setCodecForCStrings(QTextCodec codec);
void QTextCodec.setCodecForLocale(QTextCodec c);
void QTextCodec.setCodecForTr(QTextCodec c);
@Virtual void QTextCodec.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextCodec.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextCodec.parents();

QStyleOptionButton QStyleOptionButton.new();
//QStyleOptionButton QStyleOptionButton.new(QStyleOptionButton other);
@Override @Virtual void QStyleOptionButton.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionButton.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWSMouseHandler.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSMouseHandler.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWSMouseHandler.parents();

QWebElementCollection QWebElementCollection.new();
//QWebElementCollection QWebElementCollection.new(QWebElement contextElement, String query);
//QWebElementCollection QWebElementCollection.new(QWebElementCollection other);
void QWebElementCollection.append(QWebElementCollection other);
QWebElement QWebElementCollection.at(int i);
int QWebElementCollection.count();
QWebElement QWebElementCollection.first();
QWebElement QWebElementCollection.last();
Array<QWebElement> QWebElementCollection.toList();
@Virtual void QWebElementCollection.addEvent(String event_name, dynamic callback_func);
@Virtual void QWebElementCollection.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWebElementCollection.parents();

QStyleOptionFocusRect QStyleOptionFocusRect.new();
//QStyleOptionFocusRect QStyleOptionFocusRect.new(QStyleOptionFocusRect other);
@Override @Virtual void QStyleOptionFocusRect.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionFocusRect.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWSClient.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSClient.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QTableWidgetItem.addEvent(String event_name, dynamic callback_func);
@Virtual void QTableWidgetItem.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTableWidgetItem.parents();

@Virtual void QFutureSynchronizer.addEvent(String event_name, dynamic callback_func);
@Virtual void QFutureSynchronizer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFutureSynchronizer.parents();

@Virtual void QAtomicPointer.addEvent(String event_name, dynamic callback_func);
@Virtual void QAtomicPointer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QAtomicPointer.parents();

@Virtual void QStackedWidget.addEvent(String event_name, dynamic callback_func);
@Virtual void QStackedWidget.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionHeader QStyleOptionHeader.new();
//QStyleOptionHeader QStyleOptionHeader.new(QStyleOptionHeader other);
@Override @Virtual void QStyleOptionHeader.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionHeader.signalConnect(String signal_name, dynamic callback_func);

QColor QColor.new();
//QColor QColor.new(int r, int g, int b, int a);
//QColor QColor.new(QRgb color);
//QColor QColor.new(String name);
//QColor QColor.new(String name);
//QColor QColor.new(QColor color);
//QColor QColor.new(int color);
int QColor.getAlpha();
float QColor.getAlphaF();
int QColor.black();
float QColor.blackF();
int QColor.getBlue();
float QColor.getBlueF();
QColor QColor.convertTo(int colorSpec);
int QColor.cyan();
float QColor.cyanF();
QColor QColor.darker(int factor);
void QColor.getCmyk(int c, int m, int y, int k, int a);
void QColor.getCmykF(float c, float m, float y, float k, float a);
void QColor.getHsl(int h, int s, int l, int a);
void QColor.getHslF(float h, float s, float l, float a);
void QColor.getHsv(int h, int s, int v, int a);
void QColor.getHsvF(float h, float s, float v, float a);
void QColor.getRgb(int r, int g, int b, int a);
void QColor.getRgbF(float r, float g, float b, float a);
int QColor.getGreen();
float QColor.getGreenF();
int QColor.hslHue();
float QColor.hslHueF();
int QColor.hslSaturation();
float QColor.hslSaturationF();
int QColor.hsvHue();
float QColor.hsvHueF();
int QColor.hsvSaturation();
float QColor.hsvSaturationF();
int QColor.hue();
float QColor.hueF();
QColor QColor.lighter(int factor);
int QColor.lightness();
float QColor.lightnessF();
int QColor.magenta();
float QColor.magentaF();
String QColor.name();
int QColor.getRed();
float QColor.getRedF();
QRgb QColor.rgb();
QRgb QColor.getRgba();
int QColor.saturation();
float QColor.saturationF();
void QColor.setAlpha(int alpha);
void QColor.setAlphaF(float alpha);
void QColor.setBlue(int blue);
void QColor.setBlueF(float blue);
void QColor.setCmyk(int c, int m, int y, int k, int a);
void QColor.setCmykF(float c, float m, float y, float k, float a);
void QColor.setGreen(int green);
void QColor.setGreenF(float green);
void QColor.setHsl(int h, int s, int l, int a);
void QColor.setHslF(float h, float s, float l, float a);
void QColor.setHsv(int h, int s, int v, int a);
void QColor.setHsvF(float h, float s, float v, float a);
void QColor.setNamedColor(String name);
void QColor.setRed(int red);
void QColor.setRedF(float red);
void QColor.setRgb(int r, int g, int b, int a);
//void QColor.setRgb(QRgb rgb);
void QColor.setRgbF(float r, float g, float b, float a);
void QColor.setRgba(QRgb rgba);
int QColor.spec();
QColor QColor.toCmyk();
QColor QColor.toHsl();
QColor QColor.toHsv();
QColor QColor.toRgb();
int QColor.value();
float QColor.valueF();
int QColor.yellow();
float QColor.yellowF();
QColor QColor.fromCmyk(int c, int m, int y, int k, int a);
QColor QColor.fromCmykF(float c, float m, float y, float k, float a);
QColor QColor.fromHsl(int h, int s, int l, int a);
QColor QColor.fromHslF(float h, float s, float l, float a);
QColor QColor.fromHsv(int h, int s, int v, int a);
QColor QColor.fromHsvF(float h, float s, float v, float a);
QColor QColor.fromRgb(QRgb rgb);
//QColor QColor.fromRgb(int r, int g, int b, int a);
QColor QColor.fromRgbF(float r, float g, float b, float a);
QColor QColor.fromRgba(QRgb rgba);
boolean QColor.isValidColor(String name);
@Virtual void QColor.addEvent(String event_name, dynamic callback_func);
@Virtual void QColor.signalConnect(String signal_name, dynamic callback_func);
Array<String> QColor.parents();

@Virtual void QWindowsXPStyle.addEvent(String event_name, dynamic callback_func);
@Virtual void QWindowsXPStyle.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QModelIndex QColumnView.indexAt(QPoint point);
@Virtual @Override void QColumnView.scrollTo(QModelIndex index, int hint);
@Virtual @Override void QColumnView.selectAll();
@Virtual @Override void QColumnView.setModel(QAbstractItemModel model);
@Virtual @Override void QColumnView.setRootIndex(QModelIndex index);
@Virtual @Override void QColumnView.setSelectionModel(QItemSelectionModel new_SelectionModel);
@Virtual @Override QSize QColumnView.sizeHint();
@Virtual @Override QRect QColumnView.visualRect(QModelIndex index);
QColumnView QColumnView.new(QWidget parent);
Array<int> QColumnView.getColumnWidths();
QWidget QColumnView.getPreviewWidget();
boolean QColumnView.getResizeGripsVisible();
void QColumnView.setColumnWidths(Array<int> list);
void QColumnView.setPreviewWidget(QWidget widget);
void QColumnView.setResizeGripsVisible(boolean visible);
@Override @Virtual void QColumnView.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QColumnView.signalConnect(String signal_name, dynamic callback_func);

QStyleHintReturnVariant QStyleHintReturnVariant.new();
@Override @Virtual void QStyleHintReturnVariant.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleHintReturnVariant.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override int QDirModel.columnCount(QModelIndex parent);
@Virtual @Override QVariant QDirModel.getData(QModelIndex index, int role);
@Virtual @Override boolean QDirModel.dropMimeData(QMimeData data, int action, int row, int column, QModelIndex parent);
@Virtual @Override QtItemFlags QDirModel.flags(QModelIndex index);
@Virtual @Override boolean QDirModel.hasChildren(QModelIndex parent);
@Virtual @Override QVariant QDirModel.headerData(int section, int orientation, int role);
@Virtual @Override QModelIndex QDirModel.index(int row, int column, QModelIndex parent);
@Virtual @Override QMimeData QDirModel.mimeData(QModelIndexList indexes);
@Virtual @Override QModelIndex QDirModel.parent(QModelIndex child);
@Virtual @Override int QDirModel.rowCount(QModelIndex parent);
@Virtual @Override boolean QDirModel.setData(QModelIndex index, QVariant value, int role);
@Virtual @Override void QDirModel.sort(int column, int order);
@Virtual @Override QtDropActions QDirModel.supportedDropActions();
QDirModel QDirModel.new(QObject parent);
QIcon QDirModel.fileIcon(QModelIndex index);
String QDirModel.fileName(QModelIndex index);
String QDirModel.filePath(QModelIndex index);
int QDirModel.getFilter();
//QModelIndex QDirModel.index(String path, int column);
boolean QDirModel.isDir(QModelIndex index);
boolean QDirModel.isReadOnly();
boolean QDirModel.getLazyChildCount();
QModelIndex QDirModel.mkdir(QModelIndex parent, String name);
boolean QDirModel.remove(QModelIndex index);
boolean QDirModel.getResolveSymlinks();
boolean QDirModel.rmdir(QModelIndex index);
void QDirModel.setFilter(int filters);
void QDirModel.setLazyChildCount(boolean enable);
void QDirModel.setReadOnly(boolean enable);
void QDirModel.setResolveSymlinks(boolean enable);
void QDirModel.setSorting(int sort);
int QDirModel.getSorting();
void QDirModel.refresh(QModelIndex parent);
@Override @Virtual void QDirModel.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDirModel.signalConnect(String signal_name, dynamic callback_func);

void QGraphicsSceneDragDropEvent.acceptProposedAction();
QtMouseButtons QGraphicsSceneDragDropEvent.buttons();
int QGraphicsSceneDragDropEvent.getDropAction();
QMimeData QGraphicsSceneDragDropEvent.mimeData();
QtKeyboardModifiers QGraphicsSceneDragDropEvent.modifiers();
QPointF QGraphicsSceneDragDropEvent.pos();
QtDropActions QGraphicsSceneDragDropEvent.possibleActions();
int QGraphicsSceneDragDropEvent.proposedAction();
QPointF QGraphicsSceneDragDropEvent.scenePos();
QPoint QGraphicsSceneDragDropEvent.screenPos();
void QGraphicsSceneDragDropEvent.setDropAction(int action);
QWidget QGraphicsSceneDragDropEvent.source();
@Override @Virtual void QGraphicsSceneDragDropEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsSceneDragDropEvent.signalConnect(String signal_name, dynamic callback_func);

QSignalMapper QSignalMapper.new(QObject parent);
QObject QSignalMapper.getMapping(int id);
//QObject QSignalMapper.getMapping(String id);
//QObject QSignalMapper.getMapping(QWidget widget);
//QObject QSignalMapper.getMapping(QObject object);
void QSignalMapper.removeMappings(QObject sender);
void QSignalMapper.setMapping(QObject sender, int id);
//void QSignalMapper.setMapping(QObject sender, String text);
//void QSignalMapper.setMapping(QObject sender, QWidget widget);
//void QSignalMapper.setMapping(QObject sender, QObject object);
void QSignalMapper.map();
//void QSignalMapper.map(QObject sender);
@Override @Virtual void QSignalMapper.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSignalMapper.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QGtkStyle.addEvent(String event_name, dynamic callback_func);
@Virtual void QGtkStyle.signalConnect(String signal_name, dynamic callback_func);

QLatin1Char QLatin1Char.new(String c);
String QLatin1Char.toLatin1();
int QLatin1Char.unicode();
@Virtual void QLatin1Char.addEvent(String event_name, dynamic callback_func);
@Virtual void QLatin1Char.signalConnect(String signal_name, dynamic callback_func);
Array<String> QLatin1Char.parents();

@Virtual void QMutableLinkedListIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QMutableLinkedListIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMutableLinkedListIterator.parents();

@Virtual void QAnimationGroup.addEvent(String event_name, dynamic callback_func);
@Virtual void QAnimationGroup.signalConnect(String signal_name, dynamic callback_func);

QCompleter QCompleter.new(QObject parent);
//QCompleter QCompleter.new(QAbstractItemModel model, QObject parent);
int QCompleter.getCaseSensitivity();
int QCompleter.getCompletionColumn();
int QCompleter.completionCount();
int QCompleter.getCompletionMode();
QAbstractItemModel QCompleter.completionModel();
String QCompleter.getCompletionPrefix();
int QCompleter.getCompletionRole();
String QCompleter.currentCompletion();
QModelIndex QCompleter.currentIndex();
int QCompleter.getCurrentRow();
int QCompleter.getMaxVisibleItems();
QAbstractItemModel QCompleter.getModel();
int QCompleter.getModelSorting();
@Virtual String QCompleter.pathFromIndex(QModelIndex index);
QAbstractItemView QCompleter.getPopup();
void QCompleter.setCaseSensitivity(int caseSensitivity);
void QCompleter.setCompletionColumn(int column);
void QCompleter.setCompletionMode(int mode);
void QCompleter.setCompletionRole(int role);
boolean QCompleter.setCurrentRow(int row);
void QCompleter.setMaxVisibleItems(int maxItems);
void QCompleter.setModel(QAbstractItemModel model);
void QCompleter.setModelSorting(int sorting);
void QCompleter.setPopup(QAbstractItemView popup);
void QCompleter.setWidget(QWidget widget);
QWidget QCompleter.getWidget();
boolean QCompleter.getWrapAround();
void QCompleter.complete(QRect rect);
void QCompleter.setCompletionPrefix(String prefix);
void QCompleter.setWrapAround(boolean wrap);
@Override @Virtual void QCompleter.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QCompleter.signalConnect(String signal_name, dynamic callback_func);

QTouchEvent QTouchEvent.new(int eventType, int deviceType, QtKeyboardModifiers modifiers, QtTouchPointStates touchPointStates, Array<int> touchPoints);
int QTouchEvent.deviceType();
QtTouchPointStates QTouchEvent.touchPointStates();
Array<int> QTouchEvent.touchPoints();
QWidget QTouchEvent.widget();
@Override @Virtual void QTouchEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTouchEvent.signalConnect(String signal_name, dynamic callback_func);

QTextFrameFormat QTextFrameFormat.new();
float QTextFrameFormat.getBorder();
QBrush QTextFrameFormat.getBorderBrush();
int QTextFrameFormat.getBorderStyle();
float QTextFrameFormat.getBottomMargin();
QTextLength QTextFrameFormat.getHeight();
float QTextFrameFormat.getLeftMargin();
float QTextFrameFormat.getMargin();
float QTextFrameFormat.getPadding();
QTextFormatPageBreakFlags QTextFrameFormat.getPageBreakPolicy();
int QTextFrameFormat.getPosition();
float QTextFrameFormat.getRightMargin();
void QTextFrameFormat.setBorder(float width);
void QTextFrameFormat.setBorderBrush(QBrush brush);
void QTextFrameFormat.setBorderStyle(int style);
void QTextFrameFormat.setBottomMargin(float margin);
void QTextFrameFormat.setHeight(QTextLength height);
//void QTextFrameFormat.setHeight(float height);
void QTextFrameFormat.setLeftMargin(float margin);
void QTextFrameFormat.setMargin(float margin);
void QTextFrameFormat.setPadding(float width);
void QTextFrameFormat.setPageBreakPolicy(QTextFormatPageBreakFlags policy);
void QTextFrameFormat.setPosition(int policy);
void QTextFrameFormat.setRightMargin(float margin);
void QTextFrameFormat.setTopMargin(float margin);
void QTextFrameFormat.setWidth(QTextLength width);
//void QTextFrameFormat.setWidth(float width);
float QTextFrameFormat.getTopMargin();
QTextLength QTextFrameFormat.getWidth();
@Override @Virtual void QTextFrameFormat.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextFrameFormat.signalConnect(String signal_name, dynamic callback_func);

QGraphicsColorizeEffect QGraphicsColorizeEffect.new(QObject parent);
QColor QGraphicsColorizeEffect.getColor();
float QGraphicsColorizeEffect.getStrength();
void QGraphicsColorizeEffect.setColor(QColor c);
void QGraphicsColorizeEffect.setStrength(float strength);
@Override @Virtual void QGraphicsColorizeEffect.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsColorizeEffect.signalConnect(String signal_name, dynamic callback_func);

QAction QWhatsThis.createAction(QObject parent);
void QWhatsThis.enterWhatsThisMode();
void QWhatsThis.hideText();
boolean QWhatsThis.inWhatsThisMode();
void QWhatsThis.leaveWhatsThisMode();
void QWhatsThis.showText(QPoint pos, String text, QWidget w);
@Virtual void QWhatsThis.addEvent(String event_name, dynamic callback_func);
@Virtual void QWhatsThis.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWhatsThis.parents();

QStyleHintReturn QStyleHintReturn.new(int version, int type);
@Virtual void QStyleHintReturn.addEvent(String event_name, dynamic callback_func);
@Virtual void QStyleHintReturn.signalConnect(String signal_name, dynamic callback_func);
Array<String> QStyleHintReturn.parents();

QDate QLibraryInfo.buildDate();
String QLibraryInfo.buildKey();
String QLibraryInfo.licensedProducts();
String QLibraryInfo.licensee();
String QLibraryInfo.location(int loc);
@Virtual void QLibraryInfo.addEvent(String event_name, dynamic callback_func);
@Virtual void QLibraryInfo.signalConnect(String signal_name, dynamic callback_func);
Array<String> QLibraryInfo.parents();

@Virtual void QPair.addEvent(String event_name, dynamic callback_func);
@Virtual void QPair.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPair.parents();

@Virtual @Override QSize QPushButton.minimumSizeHint();
@Virtual @Override QSize QPushButton.sizeHint();
QPushButton QPushButton.new(QWidget parent);
//QPushButton QPushButton.new(String text, QWidget parent);
//QPushButton QPushButton.new(QIcon icon, String text, QWidget parent);
boolean QPushButton.getAutoDefault();
boolean QPushButton.isDefault();
boolean QPushButton.isFlat();
QMenu QPushButton.getMenu();
void QPushButton.setAutoDefault(boolean arg0);
void QPushButton.setDefault(boolean arg0);
void QPushButton.setFlat(boolean arg0);
void QPushButton.setMenu(QMenu menu);
void QPushButton.showMenu();
@Override @Virtual void QPushButton.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPushButton.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QIconEnginePlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QIconEnginePlugin.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QMenu.sizeHint();
QMenu QMenu.new(QWidget parent);
//QMenu QMenu.new(String title, QWidget parent);
QAction QMenu.actionAt(QPoint pt);
QRect QMenu.actionGeometry(QAction act);
QAction QMenu.getActiveAction();
QAction QMenu.addMenu(QMenu menu);
//QMenu QMenu.addMenu(String title);
//QMenu QMenu.addMenu(QIcon icon, String title);
QAction QMenu.addSeparator();
void QMenu.clear();
QAction QMenu.exec();
//QAction QMenu.exec(QPoint p, QAction action);
void QMenu.hideTearOffMenu();
QIcon QMenu.getIcon();
QAction QMenu.insertMenu(QAction before, QMenu menu);
QAction QMenu.insertSeparator(QAction before);
boolean QMenu.isEmpty();
boolean QMenu.isTearOffEnabled();
boolean QMenu.isTearOffMenuVisible();
QAction QMenu.menuAction();
void QMenu.popup(QPoint p, QAction atAction);
boolean QMenu.getSeparatorsCollapsible();
void QMenu.setActiveAction(QAction act);
void QMenu.setIcon(QIcon icon);
void QMenu.setSeparatorsCollapsible(boolean collapse);
void QMenu.setTearOffEnabled(boolean arg0);
void QMenu.setTitle(String title);
String QMenu.getTitle();
//QAction QMenu.exec(Array<QAction> actions, QPoint pos, QAction at, QWidget parent);
//QAction QMenu.exec(Array<QAction> actions, QPoint pos, QAction at);
@Override @Virtual void QMenu.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMenu.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QKbdDriverFactory.addEvent(String event_name, dynamic callback_func);
@Virtual void QKbdDriverFactory.signalConnect(String signal_name, dynamic callback_func);
Array<String> QKbdDriverFactory.parents();

@Virtual void QPictureFormatPlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QPictureFormatPlugin.signalConnect(String signal_name, dynamic callback_func);

QShowEvent QShowEvent.new();
@Override @Virtual void QShowEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QShowEvent.signalConnect(String signal_name, dynamic callback_func);

QSound QSound.new(String filename, QObject parent);
String QSound.fileName();
boolean QSound.isFinished();
int QSound.getLoops();
int QSound.loopsRemaining();
void QSound.setLoops(int number);
boolean QSound.isAvailable();
void QSound.play(String filename);
//void QSound.play();
void QSound.stop();
@Override @Virtual void QSound.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSound.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionFrameV3 QStyleOptionFrameV3.new();
//QStyleOptionFrameV3 QStyleOptionFrameV3.new(QStyleOptionFrameV3 other);
//QStyleOptionFrameV3 QStyleOptionFrameV3.new(QStyleOptionFrame other);
@Override @Virtual void QStyleOptionFrameV3.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionFrameV3.signalConnect(String signal_name, dynamic callback_func);

QTextFragment QTextFragment.new();
//QTextFragment QTextFragment.new(QTextFragment other);
QTextCharFormat QTextFragment.charFormat();
int QTextFragment.charFormatIndex();
boolean QTextFragment.contains(int position);
int QTextFragment.length();
int QTextFragment.position();
String QTextFragment.text();
@Virtual void QTextFragment.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextFragment.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextFragment.parents();

@Virtual void QPlastiqueStyle.addEvent(String event_name, dynamic callback_func);
@Virtual void QPlastiqueStyle.signalConnect(String signal_name, dynamic callback_func);

QTextEdit QTextEdit.new(QWidget parent);
//QTextEdit QTextEdit.new(String text, QWidget parent);
boolean QTextEdit.getAcceptRichText();
QtAlignment QTextEdit.getAlignment();
String QTextEdit.anchorAt(QPoint pos);
QTextEditAutoFormatting QTextEdit.getAutoFormatting();
boolean QTextEdit.canPaste();
QMenu QTextEdit.createStandardContextMenu();
//QMenu QTextEdit.createStandardContextMenu(QPoint position);
QTextCharFormat QTextEdit.getCurrentCharFormat();
QFont QTextEdit.getCurrentFont();
QTextCursor QTextEdit.cursorForPosition(QPoint pos);
QRect QTextEdit.cursorRect(QTextCursor cursor);
//QRect QTextEdit.cursorRect();
int QTextEdit.getCursorWidth();
QTextDocument QTextEdit.getDocument();
String QTextEdit.getDocumentTitle();
void QTextEdit.ensureCursorVisible();
boolean QTextEdit.find(String exp, int options);
String QTextEdit.getFontFamily();
boolean QTextEdit.getFontItalic();
float QTextEdit.getFontPointSize();
boolean QTextEdit.getFontUnderline();
int QTextEdit.getFontWeight();
boolean QTextEdit.isReadOnly();
boolean QTextEdit.isUndoRedoEnabled();
int QTextEdit.getLineWrapColumnOrWidth();
int QTextEdit.getLineWrapMode();
@Virtual QVariant QTextEdit.loadResource(int type, QUrl name);
void QTextEdit.mergeCurrentCharFormat(QTextCharFormat modifier);
void QTextEdit.moveCursor(int operation, int mode);
boolean QTextEdit.getOverwriteMode();
void QTextEdit.print(QPrinter printer);
void QTextEdit.setAcceptRichText(boolean accept);
void QTextEdit.setAutoFormatting(QTextEditAutoFormatting features);
void QTextEdit.setCurrentCharFormat(QTextCharFormat fmt);
void QTextEdit.setCursorWidth(int width);
void QTextEdit.setDocument(QTextDocument document);
void QTextEdit.setDocumentTitle(String title);
void QTextEdit.setLineWrapColumnOrWidth(int w);
void QTextEdit.setLineWrapMode(int mode);
void QTextEdit.setOverwriteMode(boolean overwrite);
void QTextEdit.setReadOnly(boolean ro);
void QTextEdit.setTabChangesFocus(boolean b);
void QTextEdit.setTabStopWidth(int width);
void QTextEdit.setTextCursor(QTextCursor cursor);
void QTextEdit.setTextInteractionFlags(QtTextInteractionFlags flags);
void QTextEdit.setUndoRedoEnabled(boolean enable);
void QTextEdit.setWordWrapMode(int policy);
boolean QTextEdit.getTabChangesFocus();
int QTextEdit.getTabStopWidth();
QColor QTextEdit.getTextBackgroundColor();
QColor QTextEdit.getTextColor();
QTextCursor QTextEdit.getTextCursor();
QtTextInteractionFlags QTextEdit.getTextInteractionFlags();
String QTextEdit.toHtml();
String QTextEdit.toPlainText();
int QTextEdit.getWordWrapMode();
void QTextEdit.append(String text);
void QTextEdit.clear();
void QTextEdit.copy();
void QTextEdit.cut();
void QTextEdit.insertHtml(String text);
void QTextEdit.insertPlainText(String text);
void QTextEdit.paste();
void QTextEdit.redo();
void QTextEdit.scrollToAnchor(String name);
void QTextEdit.selectAll();
void QTextEdit.setAlignment(QtAlignment a);
void QTextEdit.setCurrentFont(QFont f);
void QTextEdit.setFontFamily(String fontFamily);
void QTextEdit.setFontItalic(boolean italic);
void QTextEdit.setFontPointSize(float s);
void QTextEdit.setFontUnderline(boolean underline);
void QTextEdit.setFontWeight(int weight);
void QTextEdit.setHtml(String text);
void QTextEdit.setPlainText(String text);
void QTextEdit.setText(String text);
void QTextEdit.setTextBackgroundColor(QColor c);
void QTextEdit.setTextColor(QColor c);
void QTextEdit.undo();
void QTextEdit.zoomIn(int range);
void QTextEdit.zoomOut(int range);
@Override @Virtual void QTextEdit.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextEdit.signalConnect(String signal_name, dynamic callback_func);

QTextTableCell QTextTableCell.new();
//QTextTableCell QTextTableCell.new(QTextTableCell other);
int QTextTableCell.column();
int QTextTableCell.columnSpan();
QTextCursor QTextTableCell.firstCursorPosition();
QTextCharFormat QTextTableCell.getFormat();
QTextCursor QTextTableCell.lastCursorPosition();
int QTextTableCell.row();
int QTextTableCell.rowSpan();
void QTextTableCell.setFormat(QTextCharFormat fmt);
int QTextTableCell.tableCellFormatIndex();
@Virtual void QTextTableCell.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextTableCell.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextTableCell.parents();

QFont QFont.new();
//QFont QFont.new(String family, int pointSize, int weight, boolean italic);
//QFont QFont.new(QFont font, QPaintDevice pd);
//QFont QFont.new(QFont font);
boolean QFont.getBold();
int QFont.getCapitalization();
String QFont.defaultFamily();
boolean QFont.exactMatch();
String QFont.getFamily();
boolean QFont.getFixedPitch();
boolean QFont.fromString(String descrip);
boolean QFont.isCopyOf(QFont f);
boolean QFont.getItalic();
boolean QFont.getKerning();
String QFont.key();
String QFont.lastResortFamily();
String QFont.lastResortFont();
float QFont.getLetterSpacing();
int QFont.letterSpacingType();
boolean QFont.getOverline();
int QFont.getPixelSize();
int QFont.getPointSize();
float QFont.getPointSizeF();
boolean QFont.getRawMode();
String QFont.getRawName();
QFont QFont.resolve(QFont other);
void QFont.setBold(boolean enable);
void QFont.setCapitalization(int caps);
void QFont.setFamily(String family);
void QFont.setFixedPitch(boolean enable);
void QFont.setItalic(boolean enable);
void QFont.setKerning(boolean enable);
void QFont.setLetterSpacing(int type, float spacing);
void QFont.setOverline(boolean enable);
void QFont.setPixelSize(int pixelSize);
void QFont.setPointSize(int pointSize);
void QFont.setPointSizeF(float pointSize);
void QFont.setRawMode(boolean enable);
void QFont.setRawName(String name);
void QFont.setStretch(int factor);
void QFont.setStrikeOut(boolean enable);
void QFont.setStyle(int style);
void QFont.setStyleHint(int hint, int strategy);
void QFont.setStyleStrategy(int s);
void QFont.setUnderline(boolean enable);
void QFont.setWeight(int weight);
void QFont.setWordSpacing(float spacing);
int QFont.getStretch();
boolean QFont.getStrikeOut();
int QFont.getStyle();
int QFont.getStyleHint();
int QFont.getStyleStrategy();
String QFont.toString();
boolean QFont.getUnderline();
int QFont.getWeight();
float QFont.getWordSpacing();
void QFont.insertSubstitution(String familyName, String substituteName);
void QFont.removeSubstitution(String familyName);
String QFont.substitute(String familyName);
@Virtual void QFont.addEvent(String event_name, dynamic callback_func);
@Virtual void QFont.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFont.parents();

QPrinterInfo QPrinterInfo.new();
//QPrinterInfo QPrinterInfo.new(QPrinterInfo src);
//QPrinterInfo QPrinterInfo.new(QPrinter printer);
boolean QPrinterInfo.isDefault();
String QPrinterInfo.printerName();
Array<int> QPrinterInfo.supportedPaperSizes();
Array<QPrinterInfo> QPrinterInfo.availablePrinters();
QPrinterInfo QPrinterInfo.defaultPrinter();
@Virtual void QPrinterInfo.addEvent(String event_name, dynamic callback_func);
@Virtual void QPrinterInfo.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPrinterInfo.parents();

QObjectCleanupHandler QObjectCleanupHandler.new();
QObject QObjectCleanupHandler.add(QObject object);
void QObjectCleanupHandler.clear();
boolean QObjectCleanupHandler.isEmpty();
void QObjectCleanupHandler.remove(QObject object);
@Override @Virtual void QObjectCleanupHandler.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QObjectCleanupHandler.signalConnect(String signal_name, dynamic callback_func);

boolean QMetaEnum.isFlag();
String QMetaEnum.key(int index);
int QMetaEnum.keyCount();
int QMetaEnum.keyToValue(String key);
int QMetaEnum.keysToValue(String keys);
String QMetaEnum.name();
String QMetaEnum.scope();
int QMetaEnum.value(int index);
String QMetaEnum.valueToKey(int value);
QByteArray QMetaEnum.valueToKeys(int value);
@Virtual void QMetaEnum.addEvent(String event_name, dynamic callback_func);
@Virtual void QMetaEnum.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMetaEnum.parents();

@Virtual @Override QSize QFrame.sizeHint();
QFrame QFrame.new(QWidget parent, QtWindowFlags f);
QRect QFrame.getFrameRect();
int QFrame.getFrameShadow();
int QFrame.getFrameShape();
int QFrame.getFrameStyle();
int QFrame.frameWidth();
int QFrame.getLineWidth();
int QFrame.getMidLineWidth();
void QFrame.setFrameRect(QRect arg0);
void QFrame.setFrameShadow(int arg0);
void QFrame.setFrameShape(int arg0);
void QFrame.setFrameStyle(int style);
void QFrame.setLineWidth(int arg0);
void QFrame.setMidLineWidth(int arg0);
@Override @Virtual void QFrame.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QFrame.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionViewItemV4 QStyleOptionViewItemV4.new();
//QStyleOptionViewItemV4 QStyleOptionViewItemV4.new(QStyleOptionViewItemV4 other);
//QStyleOptionViewItemV4 QStyleOptionViewItemV4.new(QStyleOptionViewItem other);
@Override @Virtual void QStyleOptionViewItemV4.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionViewItemV4.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QTextCodecPlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextCodecPlugin.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QRectF QGraphicsPixmapItem.boundingRect();
@Virtual @Override boolean QGraphicsPixmapItem.contains(QPointF point);
@Virtual @Override boolean QGraphicsPixmapItem.isObscuredBy(QGraphicsItem item);
@Virtual @Override QPainterPath QGraphicsPixmapItem.opaqueArea();
@Virtual @Override void QGraphicsPixmapItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override QPainterPath QGraphicsPixmapItem.shape();
@Virtual @Override int QGraphicsPixmapItem.type();
QGraphicsPixmapItem QGraphicsPixmapItem.new(QGraphicsItem parent);
//QGraphicsPixmapItem QGraphicsPixmapItem.new(QPixmap pixmap, QGraphicsItem parent);
QPointF QGraphicsPixmapItem.offset();
QPixmap QGraphicsPixmapItem.getPixmap();
void QGraphicsPixmapItem.setOffset(QPointF offset);
//void QGraphicsPixmapItem.setOffset(float x, float y);
void QGraphicsPixmapItem.setPixmap(QPixmap pixmap);
void QGraphicsPixmapItem.setShapeMode(int mode);
void QGraphicsPixmapItem.setTransformationMode(int mode);
int QGraphicsPixmapItem.getShapeMode();
int QGraphicsPixmapItem.getTransformationMode();
@Override @Virtual void QGraphicsPixmapItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsPixmapItem.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionTabV3 QStyleOptionTabV3.new();
//QStyleOptionTabV3 QStyleOptionTabV3.new(QStyleOptionTabV3 other);
//QStyleOptionTabV3 QStyleOptionTabV3.new(QStyleOptionTabV2 other);
//QStyleOptionTabV3 QStyleOptionTabV3.new(QStyleOptionTab other);
@Override @Virtual void QStyleOptionTabV3.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionTabV3.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QXmlStreamNotationDeclaration.addEvent(String event_name, dynamic callback_func);
@Virtual void QXmlStreamNotationDeclaration.signalConnect(String signal_name, dynamic callback_func);
Array<String> QXmlStreamNotationDeclaration.parents();

QByteArrayMatcher QByteArrayMatcher.new();
//QByteArrayMatcher QByteArrayMatcher.new(QByteArray pattern);
//QByteArrayMatcher QByteArrayMatcher.new(String pattern, int length);
//QByteArrayMatcher QByteArrayMatcher.new(QByteArrayMatcher other);
int QByteArrayMatcher.indexIn(QByteArray ba, int from_);
//int QByteArrayMatcher.indexIn(String str, int len, int from_);
QByteArray QByteArrayMatcher.getPattern();
void QByteArrayMatcher.setPattern(QByteArray pattern);
@Virtual void QByteArrayMatcher.addEvent(String event_name, dynamic callback_func);
@Virtual void QByteArrayMatcher.signalConnect(String signal_name, dynamic callback_func);
Array<String> QByteArrayMatcher.parents();

@Virtual @Override boolean QScrollBar.event(QEvent event);
@Virtual @Override QSize QScrollBar.sizeHint();
QScrollBar QScrollBar.new(QWidget parent);
//QScrollBar QScrollBar.new(int orientation, QWidget parent);
@Override @Virtual void QScrollBar.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QScrollBar.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QVectorIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QVectorIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QVectorIterator.parents();

QFocusEvent QFocusEvent.new(int type, int reason);
boolean QFocusEvent.gotFocus();
boolean QFocusEvent.lostFocus();
int QFocusEvent.reason();
@Override @Virtual void QFocusEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QFocusEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QSharedPointer.addEvent(String event_name, dynamic callback_func);
@Virtual void QSharedPointer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSharedPointer.parents();

@Virtual @Override void QProxyStyle.drawComplexControl(int control, QStyleOptionComplex option, QPainter painter, QWidget widget);
@Virtual @Override void QProxyStyle.drawControl(int element, QStyleOption option, QPainter painter, QWidget widget);
@Virtual @Override void QProxyStyle.drawItemPixmap(QPainter painter, QRect rect, int alignment, QPixmap pixmap);
@Virtual @Override void QProxyStyle.drawItemText(QPainter painter, QRect rect, int flags, QPalette pal, boolean enabled, String text, int textRole);
@Virtual @Override void QProxyStyle.drawPrimitive(int element, QStyleOption option, QPainter painter, QWidget widget);
@Virtual @Override QPixmap QProxyStyle.generatedIconPixmap(int iconMode, QPixmap pixmap, QStyleOption opt);
@Virtual @Override int QProxyStyle.hitTestComplexControl(int control, QStyleOptionComplex option, QPoint pos, QWidget widget);
@Virtual @Override QRect QProxyStyle.itemPixmapRect(QRect r, int flags, QPixmap pixmap);
@Virtual @Override QRect QProxyStyle.itemTextRect(QFontMetrics fm, QRect r, int flags, boolean enabled, String text);
@Virtual @Override int QProxyStyle.pixelMetric(int metric, QStyleOption option, QWidget widget);
//@Virtual @Override void QProxyStyle.polish(QWidget widget);
//@Virtual @Override void QProxyStyle.polish(QPalette pal);
//@Virtual @Override void QProxyStyle.polish(QApplication app);
@Virtual @Override QSize QProxyStyle.sizeFromContents(int type, QStyleOption option, QSize size, QWidget widget);
@Virtual @Override QPalette QProxyStyle.standardPalette();
@Virtual @Override QPixmap QProxyStyle.standardPixmap(int standardPixmap, QStyleOption opt, QWidget widget);
@Virtual @Override int QProxyStyle.styleHint(int hint, QStyleOption option, QWidget widget, QStyleHintReturn returnData);
@Virtual @Override QRect QProxyStyle.subControlRect(int cc, QStyleOptionComplex option, int sc, QWidget widget);
@Virtual @Override QRect QProxyStyle.subElementRect(int element, QStyleOption option, QWidget widget);
//@Virtual @Override void QProxyStyle.unpolish(QWidget widget);
//@Virtual @Override void QProxyStyle.unpolish(QApplication app);
QProxyStyle QProxyStyle.new(QStyle style);
QStyle QProxyStyle.getBaseStyle();
void QProxyStyle.setBaseStyle(QStyle style);
@Override @Virtual void QProxyStyle.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QProxyStyle.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFile.addEvent(String event_name, dynamic callback_func);
@Virtual void QFile.signalConnect(String signal_name, dynamic callback_func);

QLocale QLocale.new();
//QLocale QLocale.new(String name);
//QLocale QLocale.new(int language, int country);
//QLocale QLocale.new(QLocale other);
String QLocale.amText();
int QLocale.country();
String QLocale.dateFormat(int fmt);
String QLocale.dateTimeFormat(int fmt);
String QLocale.dayName(int day, int type);
QChar QLocale.decimalPoint();
QChar QLocale.exponential();
QChar QLocale.groupSeparator();
int QLocale.language();
int QLocale.measurementSystem();
String QLocale.monthName(int month, int type);
String QLocale.name();
QChar QLocale.negativeSign();
QLocaleNumberOptions QLocale.getNumberOptions();
QChar QLocale.percent();
String QLocale.pmText();
QChar QLocale.positiveSign();
void QLocale.setNumberOptions(QLocaleNumberOptions options);
String QLocale.standaloneDayName(int day, int type);
String QLocale.standaloneMonthName(int month, int type);
int QLocale.textDirection();
String QLocale.timeFormat(int fmt);
QDate QLocale.toDate(String str, int fmt);
//QDate QLocale.toDate(String str, String fmt);
QDateTime QLocale.toDateTime(String str, int fmt);
//QDateTime QLocale.toDateTime(String str, String fmt);
double QLocale.toDouble(String s, boolean ok);
float QLocale.toFloat(String s, boolean ok);
int QLocale.toInt(String s, boolean ok, int base);
int QLocale.toLongLong(String s, boolean ok, int base);
short QLocale.toShort(String s, boolean ok, int base);
String QLocale.toString(int i);
//String QLocale.toString(QDate date, String fmt);
//String QLocale.toString(QDate date, int fmt);
//String QLocale.toString(QTime time, String fmt);
//String QLocale.toString(QTime time, int fmt);
//String QLocale.toString(QDateTime dateTime, int fmt);
//String QLocale.toString(QDateTime dateTime, String fmt);
//String QLocale.toString(int i);
//String QLocale.toString(double i, String f, int prec);
//String QLocale.toString(short i);
//String QLocale.toString(int i);
//String QLocale.toString(int i);
//String QLocale.toString(int i);
//String QLocale.toString(float i, String f, int prec);
QTime QLocale.toTime(String str, int fmt);
//QTime QLocale.toTime(String str, String fmt);
int QLocale.toUInt(String s, boolean ok, int base);
int QLocale.toULongLong(String s, boolean ok, int base);
int QLocale.toUShort(String s, boolean ok, int base);
QChar QLocale.zeroDigit();
QLocale QLocale.c();
Array<int> QLocale.countriesForLanguage(int language);
String QLocale.countryToString(int country);
String QLocale.languageToString(int language);
void QLocale.setDefault(QLocale locale);
QLocale QLocale.system();
@Virtual void QLocale.addEvent(String event_name, dynamic callback_func);
@Virtual void QLocale.signalConnect(String signal_name, dynamic callback_func);
Array<String> QLocale.parents();

QSignalTransition QSignalTransition.new(QState sourceState);
//QSignalTransition QSignalTransition.new(QObject sender, String signal, QState sourceState);
QObject QSignalTransition.getSenderObject();
void QSignalTransition.setSenderObject(QObject sender);
void QSignalTransition.setSignal(QByteArray signal);
QByteArray QSignalTransition.getSignal();
@Override @Virtual void QSignalTransition.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSignalTransition.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionProgressBar QStyleOptionProgressBar.new();
//QStyleOptionProgressBar QStyleOptionProgressBar.new(QStyleOptionProgressBar other);
@Override @Virtual void QStyleOptionProgressBar.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionProgressBar.signalConnect(String signal_name, dynamic callback_func);

QTileRules QTileRules.new(int horizontalRule, int verticalRule);
//QTileRules QTileRules.new(int rule);
@Virtual void QTileRules.addEvent(String event_name, dynamic callback_func);
@Virtual void QTileRules.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTileRules.parents();

@Virtual void QAccessibleBridgePlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QAccessibleBridgePlugin.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionTabBarBaseV2 QStyleOptionTabBarBaseV2.new();
//QStyleOptionTabBarBaseV2 QStyleOptionTabBarBaseV2.new(QStyleOptionTabBarBaseV2 other);
//QStyleOptionTabBarBaseV2 QStyleOptionTabBarBaseV2.new(QStyleOptionTabBarBase other);
@Override @Virtual void QStyleOptionTabBarBaseV2.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionTabBarBaseV2.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QWebView.event(QEvent e);
@Virtual @Override QVariant QWebView.inputMethodQuery(int property);
@Virtual @Override QSize QWebView.sizeHint();
QWebView QWebView.new(QWidget parent);
boolean QWebView.findText(String subString, int options);
QWebHistory QWebView.history();
QIcon QWebView.icon();
boolean QWebView.isModified();
void QWebView.load(QUrl url);
//void QWebView.load(QNetworkRequest request, int operation, QByteArray body);
QWebPage QWebView.getPage();
QAction QWebView.pageAction(int action);
int QWebView.getRenderHints();
String QWebView.selectedText();
void QWebView.setContent(QByteArray data, String mimeType, QUrl baseUrl);
void QWebView.setHtml(String html, QUrl baseUrl);
void QWebView.setPage(QWebPage page);
void QWebView.setRenderHint(int hint, boolean enabled);
void QWebView.setRenderHints(int hints);
void QWebView.setTextSizeMultiplier(float factor);
void QWebView.setUrl(QUrl url);
void QWebView.setZoomFactor(float factor);
QWebSettings QWebView.settings();
float QWebView.getTextSizeMultiplier();
String QWebView.title();
void QWebView.triggerPageAction(int action, boolean checked);
QUrl QWebView.getUrl();
float QWebView.getZoomFactor();
void QWebView.back();
void QWebView.forward();
void QWebView.print(QPrinter printer);
void QWebView.reload();
void QWebView.stop();
@Override @Virtual void QWebView.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWebView.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QSequentialAnimationGroup.addEvent(String event_name, dynamic callback_func);
@Virtual void QSequentialAnimationGroup.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QS60MainAppUi.addEvent(String event_name, dynamic callback_func);
@Virtual void QS60MainAppUi.signalConnect(String signal_name, dynamic callback_func);
Array<String> QS60MainAppUi.parents();

@Virtual void QSharedDataPointer.addEvent(String event_name, dynamic callback_func);
@Virtual void QSharedDataPointer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSharedDataPointer.parents();

QAtomicInt QAtomicInt.new(int value);
//QAtomicInt QAtomicInt.new(QAtomicInt other);
boolean QAtomicInt.deref();
int QAtomicInt.fetchAndAddAcquire(int valueToAdd);
int QAtomicInt.fetchAndAddOrdered(int valueToAdd);
int QAtomicInt.fetchAndAddRelaxed(int valueToAdd);
int QAtomicInt.fetchAndAddRelease(int valueToAdd);
int QAtomicInt.fetchAndStoreAcquire(int new_Value);
int QAtomicInt.fetchAndStoreOrdered(int new_Value);
int QAtomicInt.fetchAndStoreRelaxed(int new_Value);
int QAtomicInt.fetchAndStoreRelease(int new_Value);
boolean QAtomicInt.ref();
boolean QAtomicInt.testAndSetAcquire(int expectedValue, int new_Value);
boolean QAtomicInt.testAndSetOrdered(int expectedValue, int new_Value);
boolean QAtomicInt.testAndSetRelaxed(int expectedValue, int new_Value);
boolean QAtomicInt.testAndSetRelease(int expectedValue, int new_Value);
boolean QAtomicInt.isFetchAndAddNative();
boolean QAtomicInt.isFetchAndAddWaitFree();
boolean QAtomicInt.isFetchAndStoreNative();
boolean QAtomicInt.isFetchAndStoreWaitFree();
boolean QAtomicInt.isReferenceCountingNative();
boolean QAtomicInt.isReferenceCountingWaitFree();
boolean QAtomicInt.isTestAndSetNative();
boolean QAtomicInt.isTestAndSetWaitFree();
@Virtual void QAtomicInt.addEvent(String event_name, dynamic callback_func);
@Virtual void QAtomicInt.signalConnect(String signal_name, dynamic callback_func);
Array<String> QAtomicInt.parents();

QRubberBand QRubberBand.new(int s, QWidget p);
void QRubberBand.move(int x, int y);
//void QRubberBand.move(QPoint p);
void QRubberBand.resize(int width, int height);
//void QRubberBand.resize(QSize size);
void QRubberBand.setGeometry(QRect rect);
//void QRubberBand.setGeometry(int x, int y, int width, int height);
int QRubberBand.shape();
@Override @Virtual void QRubberBand.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QRubberBand.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QDecorationDefault.addEvent(String event_name, dynamic callback_func);
@Virtual void QDecorationDefault.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override String QAccessibleWidget.actionText(int action, int t, int child);
@Virtual @Override int QAccessibleWidget.childAt(int x, int y);
@Virtual @Override int QAccessibleWidget.childCount();
@Virtual @Override boolean QAccessibleWidget.doAction(int action, int child, QVariantList params);
@Virtual @Override int QAccessibleWidget.indexOfChild(QAccessibleInterface child);
@Virtual @Override int QAccessibleWidget.navigate(int relation, int entry, QAccessibleInterface target);
@Virtual @Override QRect QAccessibleWidget.rect(int child);
@Virtual @Override QAccessibleRelation QAccessibleWidget.relationTo(int child, QAccessibleInterface other, int otherChild);
@Virtual @Override int QAccessibleWidget.role(int child);
@Virtual @Override QAccessibleState QAccessibleWidget.state(int child);
@Virtual @Override String QAccessibleWidget.text(int t, int child);
@Virtual @Override int QAccessibleWidget.userActionCount(int child);
QAccessibleWidget QAccessibleWidget.new(QWidget w, int role, String name);
@Override @Virtual void QAccessibleWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAccessibleWidget.signalConnect(String signal_name, dynamic callback_func);

QActionEvent QActionEvent.new(int type, QAction action, QAction before);
QAction QActionEvent.action();
QAction QActionEvent.before();
@Override @Virtual void QActionEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QActionEvent.signalConnect(String signal_name, dynamic callback_func);

QEasingCurve QEasingCurve.new(int type);
//QEasingCurve QEasingCurve.new(QEasingCurve other);
float QEasingCurve.getAmplitude();
float QEasingCurve.getOvershoot();
float QEasingCurve.getPeriod();
void QEasingCurve.setAmplitude(float amplitude);
void QEasingCurve.setOvershoot(float overshoot);
void QEasingCurve.setPeriod(float period);
void QEasingCurve.setType(int type);
int QEasingCurve.getType();
float QEasingCurve.valueForProgress(float progress);
@Virtual void QEasingCurve.addEvent(String event_name, dynamic callback_func);
@Virtual void QEasingCurve.signalConnect(String signal_name, dynamic callback_func);
Array<String> QEasingCurve.parents();

@Virtual @Override QRectF QGraphicsRectItem.boundingRect();
@Virtual @Override boolean QGraphicsRectItem.contains(QPointF point);
@Virtual @Override boolean QGraphicsRectItem.isObscuredBy(QGraphicsItem item);
@Virtual @Override QPainterPath QGraphicsRectItem.opaqueArea();
@Virtual @Override void QGraphicsRectItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override QPainterPath QGraphicsRectItem.shape();
@Virtual @Override int QGraphicsRectItem.type();
QGraphicsRectItem QGraphicsRectItem.new(QGraphicsItem parent);
//QGraphicsRectItem QGraphicsRectItem.new(QRectF rect, QGraphicsItem parent);
//QGraphicsRectItem QGraphicsRectItem.new(float x, float y, float width, float height, QGraphicsItem parent);
QRectF QGraphicsRectItem.getRect();
void QGraphicsRectItem.setRect(QRectF rectangle);
//void QGraphicsRectItem.setRect(float x, float y, float width, float height);
@Override @Virtual void QGraphicsRectItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsRectItem.signalConnect(String signal_name, dynamic callback_func);

QState QState.new(QState parent);
//QState QState.new(int childMode, QState parent);
void QState.addTransition(QAbstractTransition transition);
//QSignalTransition QState.addTransition(QObject sender, String signal, QAbstractState target);
//QAbstractTransition QState.addTransition(QAbstractState target);
void QState.assignProperty(QObject object, String name, QVariant value);
int QState.getChildMode();
QAbstractState QState.getErrorState();
QAbstractState QState.getInitialState();
void QState.removeTransition(QAbstractTransition transition);
void QState.setChildMode(int mode);
void QState.setErrorState(QAbstractState state);
void QState.setInitialState(QAbstractState state);
Array<QAbstractTransition> QState.transitions();
@Override @Virtual void QState.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QState.signalConnect(String signal_name, dynamic callback_func);


@Virtual void QXmlStreamAttributes.addEvent(String event_name, dynamic callback_func);
@Virtual void QXmlStreamAttributes.signalConnect(String signal_name, dynamic callback_func);

QMainWindow QMainWindow.new(QWidget parent, QtWindowFlags flags);
void QMainWindow.addDockWidget(int area, QDockWidget dockwidget);
//void QMainWindow.addDockWidget(int area, QDockWidget dockwidget, int orientation);
void QMainWindow.addToolBar(int area, QToolBar toolbar);
//void QMainWindow.addToolBar(QToolBar toolbar);
//QToolBar QMainWindow.addToolBar(String title);
void QMainWindow.addToolBarBreak(int area);
QWidget QMainWindow.getCentralWidget();
int QMainWindow.getCorner(int corner);
@Virtual QMenu QMainWindow.createPopupMenu();
QMainWindowDockOptions QMainWindow.getDockOptions();
int QMainWindow.dockWidgetArea(QDockWidget dockwidget);
boolean QMainWindow.getDocumentMode();
QSize QMainWindow.getIconSize();
void QMainWindow.insertToolBar(QToolBar before, QToolBar toolbar);
void QMainWindow.insertToolBarBreak(QToolBar before);
boolean QMainWindow.isAnimated();
boolean QMainWindow.isDockNestingEnabled();
QMenuBar QMainWindow.getMenuBar();
QWidget QMainWindow.getMenuWidget();
void QMainWindow.removeDockWidget(QDockWidget dockwidget);
void QMainWindow.removeToolBar(QToolBar toolbar);
void QMainWindow.removeToolBarBreak(QToolBar before);
boolean QMainWindow.restoreDockWidget(QDockWidget dockwidget);
boolean QMainWindow.restoreState(QByteArray state, int version);
QByteArray QMainWindow.saveState(int version);
void QMainWindow.setCentralWidget(QWidget widget);
void QMainWindow.setCorner(int corner, int area);
void QMainWindow.setDockOptions(QMainWindowDockOptions options);
void QMainWindow.setDocumentMode(boolean enabled);
void QMainWindow.setIconSize(QSize iconSize);
void QMainWindow.setMenuBar(QMenuBar menuBar);
void QMainWindow.setMenuWidget(QWidget menuBar);
void QMainWindow.setStatusBar(QStatusBar statusbar);
void QMainWindow.setTabPosition(QtDockWidgetAreas areas, int tabPosition);
void QMainWindow.setTabShape(int tabShape);
void QMainWindow.setToolButtonStyle(int toolButtonStyle);
void QMainWindow.setUnifiedTitleAndToolBarOnMac(boolean set);
void QMainWindow.splitDockWidget(QDockWidget first, QDockWidget second, int orientation);
QStatusBar QMainWindow.getStatusBar();
int QMainWindow.getTabPosition(int area);
int QMainWindow.getTabShape();
Array<QDockWidget> QMainWindow.tabifiedDockWidgets(QDockWidget dockwidget);
void QMainWindow.tabifyDockWidget(QDockWidget first, QDockWidget second);
int QMainWindow.toolBarArea(QToolBar toolbar);
boolean QMainWindow.toolBarBreak(QToolBar toolbar);
int QMainWindow.getToolButtonStyle();
boolean QMainWindow.getUnifiedTitleAndToolBarOnMac();
void QMainWindow.setAnimated(boolean enabled);
void QMainWindow.setDockNestingEnabled(boolean enabled);
@Override @Virtual void QMainWindow.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMainWindow.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QDecorationFactory.addEvent(String event_name, dynamic callback_func);
@Virtual void QDecorationFactory.signalConnect(String signal_name, dynamic callback_func);
Array<String> QDecorationFactory.parents();

@Virtual @Override boolean QAbstractListModel.dropMimeData(QMimeData data, int action, int row, int column, QModelIndex parent);
@Virtual @Override QModelIndex QAbstractListModel.index(int row, int column, QModelIndex parent);
@Override @Virtual void QAbstractListModel.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractListModel.signalConnect(String signal_name, dynamic callback_func);

QTextTableCellFormat QTextTableCellFormat.new();
float QTextTableCellFormat.getBottomPadding();
float QTextTableCellFormat.getLeftPadding();
float QTextTableCellFormat.getRightPadding();
void QTextTableCellFormat.setBottomPadding(float padding);
void QTextTableCellFormat.setLeftPadding(float padding);
void QTextTableCellFormat.setPadding(float padding);
void QTextTableCellFormat.setRightPadding(float padding);
void QTextTableCellFormat.setTopPadding(float padding);
float QTextTableCellFormat.getTopPadding();
@Override @Virtual void QTextTableCellFormat.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextTableCellFormat.signalConnect(String signal_name, dynamic callback_func);

void QTextTable.appendColumns(int count);
void QTextTable.appendRows(int count);
QTextTableCell QTextTable.cellAt(int row, int column);
//QTextTableCell QTextTable.cellAt(int position);
//QTextTableCell QTextTable.cellAt(QTextCursor cursor);
int QTextTable.columns();
QTextTableFormat QTextTable.getFormat();
void QTextTable.insertColumns(int index, int columns);
void QTextTable.insertRows(int index, int rows);
void QTextTable.mergeCells(int row, int column, int numRows, int numCols);
//void QTextTable.mergeCells(QTextCursor cursor);
void QTextTable.removeColumns(int index, int columns);
void QTextTable.removeRows(int index, int rows);
void QTextTable.resize(int rows, int columns);
QTextCursor QTextTable.rowEnd(QTextCursor cursor);
QTextCursor QTextTable.rowStart(QTextCursor cursor);
int QTextTable.rows();
void QTextTable.setFormat(QTextTableFormat fmt);
void QTextTable.splitCell(int row, int column, int numRows, int numCols);
@Override @Virtual void QTextTable.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextTable.signalConnect(String signal_name, dynamic callback_func);

QGraphicsOpacityEffect QGraphicsOpacityEffect.new(QObject parent);
float QGraphicsOpacityEffect.getOpacity();
QBrush QGraphicsOpacityEffect.getOpacityMask();
void QGraphicsOpacityEffect.setOpacity(float opacity);
void QGraphicsOpacityEffect.setOpacityMask(QBrush mask);
@Override @Virtual void QGraphicsOpacityEffect.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsOpacityEffect.signalConnect(String signal_name, dynamic callback_func);

void QTextList.add(QTextBlock block);
int QTextList.count();
QTextListFormat QTextList.getFormat();
QTextBlock QTextList.item(int i);
int QTextList.itemNumber(QTextBlock block);
String QTextList.itemText(QTextBlock block);
void QTextList.remove(QTextBlock block);
void QTextList.removeItem(int i);
void QTextList.setFormat(QTextListFormat fmt);
@Override @Virtual void QTextList.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextList.signalConnect(String signal_name, dynamic callback_func);

QColormap QColormap.new(QColormap colormap);
QColor QColormap.colorAt(int pixel);
int QColormap.depth();
int QColormap.mode();
int QColormap.pixel(QColor color);
int QColormap.size();
QColormap QColormap.instance(int screen);
@Virtual void QColormap.addEvent(String event_name, dynamic callback_func);
@Virtual void QColormap.signalConnect(String signal_name, dynamic callback_func);
Array<String> QColormap.parents();

QTextFrame QTextFrame.new(QTextDocument document);
Array<QTextFrame> QTextFrame.childFrames();
QTextCursor QTextFrame.firstCursorPosition();
int QTextFrame.firstPosition();
QTextFrameFormat QTextFrame.getFrameFormat();
QTextCursor QTextFrame.lastCursorPosition();
int QTextFrame.lastPosition();
QTextFrame QTextFrame.parentFrame();
void QTextFrame.setFrameFormat(QTextFrameFormat fmt);
@Override @Virtual void QTextFrame.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextFrame.signalConnect(String signal_name, dynamic callback_func);

QGraphicsSceneMoveEvent QGraphicsSceneMoveEvent.new();
QPointF QGraphicsSceneMoveEvent.newPos();
QPointF QGraphicsSceneMoveEvent.oldPos();
@Override @Virtual void QGraphicsSceneMoveEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsSceneMoveEvent.signalConnect(String signal_name, dynamic callback_func);

QAccessibleEvent QAccessibleEvent.new(int type, int child);
int QAccessibleEvent.child();
void QAccessibleEvent.setValue(String text);
String QAccessibleEvent.getValue();
@Override @Virtual void QAccessibleEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAccessibleEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QItemSelectionRange.addEvent(String event_name, dynamic callback_func);
@Virtual void QItemSelectionRange.signalConnect(String signal_name, dynamic callback_func);
Array<String> QItemSelectionRange.parents();

QTextBoundaryFinder QTextBoundaryFinder.new();
//QTextBoundaryFinder QTextBoundaryFinder.new(QTextBoundaryFinder other);
//QTextBoundaryFinder QTextBoundaryFinder.new(int type, String str);
//QTextBoundaryFinder QTextBoundaryFinder.new(int type, QChar chars, int length, String buffer, int bufferSize);
QTextBoundaryFinderBoundaryReasons QTextBoundaryFinder.boundaryReasons();
boolean QTextBoundaryFinder.isAtBoundary();
int QTextBoundaryFinder.getPosition();
void QTextBoundaryFinder.setPosition(int position);
String QTextBoundaryFinder.string();
void QTextBoundaryFinder.toEnd();
int QTextBoundaryFinder.toNextBoundary();
int QTextBoundaryFinder.toPreviousBoundary();
void QTextBoundaryFinder.toStart();
int QTextBoundaryFinder.type();
@Virtual void QTextBoundaryFinder.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextBoundaryFinder.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextBoundaryFinder.parents();

@Virtual @Override QRectF QGraphicsDropShadowEffect.boundingRectFor(QRectF rect);
QGraphicsDropShadowEffect QGraphicsDropShadowEffect.new(QObject parent);
float QGraphicsDropShadowEffect.getBlurRadius();
QColor QGraphicsDropShadowEffect.getColor();
QPointF QGraphicsDropShadowEffect.offset();
float QGraphicsDropShadowEffect.xOffset();
float QGraphicsDropShadowEffect.yOffset();
void QGraphicsDropShadowEffect.setBlurRadius(float blurRadius);
void QGraphicsDropShadowEffect.setColor(QColor color);
void QGraphicsDropShadowEffect.setOffset(QPointF ofs);
//void QGraphicsDropShadowEffect.setOffset(float dx, float dy);
//void QGraphicsDropShadowEffect.setOffset(float d);
void QGraphicsDropShadowEffect.setXOffset(float dx);
void QGraphicsDropShadowEffect.setYOffset(float dy);
@Override @Virtual void QGraphicsDropShadowEffect.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsDropShadowEffect.signalConnect(String signal_name, dynamic callback_func);

QMutexLocker QMutexLocker.new(QMutex mutex);
QMutex QMutexLocker.mutex();
void QMutexLocker.relock();
void QMutexLocker.unlock();
@Virtual void QMutexLocker.addEvent(String event_name, dynamic callback_func);
@Virtual void QMutexLocker.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMutexLocker.parents();

QContextMenuEvent QContextMenuEvent.new(int reason, QPoint pos, QPoint globalPos, QtKeyboardModifiers modifiers);
//QContextMenuEvent QContextMenuEvent.new(int reason, QPoint pos, QPoint globalPos);
//QContextMenuEvent QContextMenuEvent.new(int reason, QPoint pos);
QPoint QContextMenuEvent.globalPos();
int QContextMenuEvent.globalX();
int QContextMenuEvent.globalY();
QPoint QContextMenuEvent.pos();
int QContextMenuEvent.reason();
int QContextMenuEvent.x();
int QContextMenuEvent.y();
@Override @Virtual void QContextMenuEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QContextMenuEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFileIconProvider.addEvent(String event_name, dynamic callback_func);
@Virtual void QFileIconProvider.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFileIconProvider.parents();

QRegion QRegion.new();
//QRegion QRegion.new(int x, int y, int w, int h, int t);
//QRegion QRegion.new(QPolygon a, int fillRule);
//QRegion QRegion.new(QRegion r);
//QRegion QRegion.new(QBitmap bm);
//QRegion QRegion.new(QRect r, int t);
QRect QRegion.boundingRect();
boolean QRegion.contains(QPoint p);
//boolean QRegion.contains(QRect r);
QRegion QRegion.intersected(QRegion r);
//QRegion QRegion.intersected(QRect rect);
boolean QRegion.intersects(QRegion region);
//boolean QRegion.intersects(QRect rect);
boolean QRegion.isEmpty();
int QRegion.rectCount();
void QRegion.setRects(QRect rects, int number);
QRegion QRegion.subtracted(QRegion r);
void QRegion.translate(int dx, int dy);
//void QRegion.translate(QPoint point);
QRegion QRegion.translated(int dx, int dy);
//QRegion QRegion.translated(QPoint p);
QRegion QRegion.united(QRegion r);
//QRegion QRegion.united(QRect rect);
QRegion QRegion.xored(QRegion r);
@Virtual void QRegion.addEvent(String event_name, dynamic callback_func);
@Virtual void QRegion.signalConnect(String signal_name, dynamic callback_func);
Array<String> QRegion.parents();

@Virtual void QVector2D.addEvent(String event_name, dynamic callback_func);
@Virtual void QVector2D.signalConnect(String signal_name, dynamic callback_func);
Array<String> QVector2D.parents();


@Virtual @Override int QLabel.heightForWidth(int w);
@Virtual @Override QSize QLabel.minimumSizeHint();
@Virtual @Override QSize QLabel.sizeHint();
QLabel QLabel.new(QWidget parent, QtWindowFlags f);
//QLabel QLabel.new(String text, QWidget parent, QtWindowFlags f);
QtAlignment QLabel.getAlignment();
QWidget QLabel.getBuddy();
boolean QLabel.hasScaledContents();
boolean QLabel.hasSelectedText();
int QLabel.getIndent();
int QLabel.getMargin();
QMovie QLabel.getMovie();
boolean QLabel.getOpenExternalLinks();
QPicture QLabel.getPicture();
QPixmap QLabel.getPixmap();
String QLabel.selectedText();
int QLabel.selectionStart();
void QLabel.setAlignment(QtAlignment arg0);
void QLabel.setBuddy(QWidget buddy);
void QLabel.setIndent(int arg0);
void QLabel.setMargin(int arg0);
void QLabel.setOpenExternalLinks(boolean open);
void QLabel.setScaledContents(boolean arg0);
void QLabel.setSelection(int start, int length);
void QLabel.setTextFormat(int arg0);
void QLabel.setTextInteractionFlags(QtTextInteractionFlags flags);
void QLabel.setWordWrap(boolean on);
String QLabel.getText();
int QLabel.getTextFormat();
QtTextInteractionFlags QLabel.getTextInteractionFlags();
boolean QLabel.getWordWrap();
void QLabel.clear();
void QLabel.setMovie(QMovie movie);
void QLabel.setNum(int num);
//void QLabel.setNum(double num);
void QLabel.setPicture(QPicture picture);
void QLabel.setPixmap(QPixmap arg0);
void QLabel.setText(String arg0);
@Override @Virtual void QLabel.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QLabel.signalConnect(String signal_name, dynamic callback_func);

QEvent QEvent.new(int type);
boolean QEvent.spontaneous();
int QEvent.type();
int QEvent.registerEventType(int hint);
@Virtual void QEvent.addEvent(String event_name, dynamic callback_func);
@Virtual void QEvent.signalConnect(String signal_name, dynamic callback_func);
Array<String> QEvent.parents();

QPoint QPoint.new();
//QPoint QPoint.new(int x, int y);
int QPoint.manhattanLength();
int QPoint.rx();
int QPoint.ry();
void QPoint.setX(int x);
void QPoint.setY(int y);
int QPoint.getX();
int QPoint.getY();
@Virtual void QPoint.addEvent(String event_name, dynamic callback_func);
@Virtual void QPoint.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPoint.parents();

QDataWidgetMapper QDataWidgetMapper.new(QObject parent);
void QDataWidgetMapper.addMapping(QWidget widget, int section);
//void QDataWidgetMapper.addMapping(QWidget widget, int section, QByteArray propertyName);
void QDataWidgetMapper.clearMapping();
int QDataWidgetMapper.getCurrentIndex();
QAbstractItemDelegate QDataWidgetMapper.getItemDelegate();
QByteArray QDataWidgetMapper.mappedPropertyName(QWidget widget);
int QDataWidgetMapper.mappedSection(QWidget widget);
QWidget QDataWidgetMapper.mappedWidgetAt(int section);
QAbstractItemModel QDataWidgetMapper.getModel();
int QDataWidgetMapper.getOrientation();
void QDataWidgetMapper.removeMapping(QWidget widget);
QModelIndex QDataWidgetMapper.getRootIndex();
void QDataWidgetMapper.setItemDelegate(QAbstractItemDelegate delegate);
void QDataWidgetMapper.setModel(QAbstractItemModel model);
void QDataWidgetMapper.setOrientation(int aOrientation);
void QDataWidgetMapper.setRootIndex(QModelIndex index);
void QDataWidgetMapper.setSubmitPolicy(int policy);
int QDataWidgetMapper.getSubmitPolicy();
void QDataWidgetMapper.revert();
@Virtual void QDataWidgetMapper.setCurrentIndex(int index);
void QDataWidgetMapper.setCurrentModelIndex(QModelIndex index);
boolean QDataWidgetMapper.submit();
void QDataWidgetMapper.toFirst();
void QDataWidgetMapper.toLast();
void QDataWidgetMapper.toNext();
void QDataWidgetMapper.toPrevious();
@Override @Virtual void QDataWidgetMapper.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDataWidgetMapper.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QScreenCursor.addEvent(String event_name, dynamic callback_func);
@Virtual void QScreenCursor.signalConnect(String signal_name, dynamic callback_func);
Array<String> QScreenCursor.parents();

@Virtual @Override QPaintEngine QPrinter.paintEngine();
QPrinter QPrinter.new(int mode);
//QPrinter QPrinter.new(QPrinterInfo printer, int mode);
boolean QPrinter.abort();
boolean QPrinter.getCollateCopies();
int QPrinter.getColorMode();
int QPrinter.getCopyCount();
String QPrinter.getCreator();
String QPrinter.getDocName();
boolean QPrinter.getDoubleSidedPrinting();
int QPrinter.getDuplex();
boolean QPrinter.getFontEmbeddingEnabled();
int QPrinter.fromPage();
boolean QPrinter.getFullPage();
void QPrinter.getPageMargins(float left, float top, float right, float bottom, int unit);
boolean QPrinter.newPage();
int QPrinter.getOrientation();
String QPrinter.getOutputFileName();
int QPrinter.getOutputFormat();
int QPrinter.getPageOrder();
QRect QPrinter.pageRect();
//QRectF QPrinter.pageRect(int unit);
QRect QPrinter.paperRect();
//QRectF QPrinter.paperRect(int unit);
int QPrinter.getPaperSize();
//QSizeF QPrinter.getPaperSize(int unit);
int QPrinter.getPaperSource();
QPrintEngine QPrinter.printEngine();
String QPrinter.getPrintProgram();
int QPrinter.getPrintRange();
String QPrinter.getPrinterName();
String QPrinter.getPrinterSelectionOption();
int QPrinter.printerState();
int QPrinter.getResolution();
void QPrinter.setCollateCopies(boolean collate);
void QPrinter.setColorMode(int new_ColorMode);
void QPrinter.setCopyCount(int count);
void QPrinter.setCreator(String creator);
void QPrinter.setDocName(String name);
void QPrinter.setDoubleSidedPrinting(boolean doubleSided);
void QPrinter.setDuplex(int duplex);
void QPrinter.setFontEmbeddingEnabled(boolean enable);
void QPrinter.setFromTo(int from_, int to_);
void QPrinter.setFullPage(boolean fp);
void QPrinter.setOrientation(int orientation);
void QPrinter.setOutputFileName(String fileName);
void QPrinter.setOutputFormat(int fmt);
void QPrinter.setPageMargins(float left, float top, float right, float bottom, int unit);
void QPrinter.setPageOrder(int pageOrder);
void QPrinter.setPaperSize(int new_PaperSize);
//void QPrinter.setPaperSize(QSizeF paperSize, int unit);
void QPrinter.setPaperSource(int source);
void QPrinter.setPrintProgram(String printProg);
void QPrinter.setPrintRange(int range);
void QPrinter.setPrinterName(String name);
void QPrinter.setPrinterSelectionOption(String option);
void QPrinter.setResolution(int dpi);
Array<int> QPrinter.supportedResolutions();
boolean QPrinter.supportsMultipleCopies();
int QPrinter.toPage();
@Override @Virtual void QPrinter.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPrinter.signalConnect(String signal_name, dynamic callback_func);

QMetaClassInfo QMetaObject.classInfo(int index);
int QMetaObject.classInfoCount();
int QMetaObject.classInfoOffset();
String QMetaObject.className();
QMetaMethod QMetaObject.constructor(int index);
int QMetaObject.constructorCount();
QMetaEnum QMetaObject.enumerator(int index);
int QMetaObject.enumeratorCount();
int QMetaObject.enumeratorOffset();
int QMetaObject.indexOfClassInfo(String name);
int QMetaObject.indexOfConstructor(String constructor);
int QMetaObject.indexOfEnumerator(String name);
int QMetaObject.indexOfMethod(String method);
int QMetaObject.indexOfProperty(String name);
int QMetaObject.indexOfSignal(String signal);
int QMetaObject.indexOfSlot(String slot);
QMetaMethod QMetaObject.method(int index);
int QMetaObject.methodCount();
int QMetaObject.methodOffset();
QObject QMetaObject.newInstance(QGenericArgument val0);
QMetaProperty QMetaObject.property(int index);
int QMetaObject.propertyCount();
int QMetaObject.propertyOffset();
QMetaObject QMetaObject.superClass();
QMetaProperty QMetaObject.userProperty();
boolean QMetaObject.checkConnectArgs(String signal, String method);
void QMetaObject.connectSlotsByName(QObject object);
boolean QMetaObject.invokeMethod(QObject obj, String member, int type, QGenericReturnArgument ret, QGenericArgument val0);
//boolean QMetaObject.invokeMethod(QObject obj, String member, QGenericReturnArgument ret, QGenericArgument val0);
//boolean QMetaObject.invokeMethod(QObject obj, String member, int type, QGenericArgument val0);
//boolean QMetaObject.invokeMethod(QObject obj, String member, QGenericArgument val0);
QByteArray QMetaObject.normalizedSignature(String method);
QByteArray QMetaObject.normalizedType(String type);
@Virtual void QMetaObject.addEvent(String event_name, dynamic callback_func);
@Virtual void QMetaObject.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMetaObject.parents();

@Virtual @Override QVariant QTextBrowser.loadResource(int type, QUrl name);
QTextBrowser QTextBrowser.new(QWidget parent);
int QTextBrowser.backwardHistoryCount();
void QTextBrowser.clearHistory();
int QTextBrowser.forwardHistoryCount();
String QTextBrowser.historyTitle(int i);
QUrl QTextBrowser.historyUrl(int i);
boolean QTextBrowser.isBackwardAvailable();
boolean QTextBrowser.isForwardAvailable();
boolean QTextBrowser.getOpenExternalLinks();
boolean QTextBrowser.getOpenLinks();
void QTextBrowser.setOpenExternalLinks(boolean open);
void QTextBrowser.setOpenLinks(boolean open);
QUrl QTextBrowser.getSource();
@Virtual void QTextBrowser.backward();
@Virtual void QTextBrowser.forward();
@Virtual void QTextBrowser.home();
@Virtual void QTextBrowser.reload();
@Virtual void QTextBrowser.setSource(QUrl name);
@Override @Virtual void QTextBrowser.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextBrowser.signalConnect(String signal_name, dynamic callback_func);

QToolBox QToolBox.new(QWidget parent, QtWindowFlags f);
int QToolBox.addItem(QWidget widget, QIcon iconSet, String text);
//int QToolBox.addItem(QWidget w, String text);
int QToolBox.count();
int QToolBox.getCurrentIndex();
QWidget QToolBox.getCurrentWidget();
int QToolBox.indexOf(QWidget widget);
int QToolBox.insertItem(int index, QWidget widget, QIcon icon, String text);
//int QToolBox.insertItem(int index, QWidget widget, String text);
boolean QToolBox.isItemEnabled(int index);
QIcon QToolBox.getItemIcon(int index);
String QToolBox.getItemText(int index);
String QToolBox.getItemToolTip(int index);
void QToolBox.removeItem(int index);
void QToolBox.setItemEnabled(int index, boolean enabled);
void QToolBox.setItemIcon(int index, QIcon icon);
void QToolBox.setItemText(int index, String text);
void QToolBox.setItemToolTip(int index, String toolTip);
QWidget QToolBox.widget(int index);
void QToolBox.setCurrentIndex(int index);
void QToolBox.setCurrentWidget(QWidget widget);
@Override @Virtual void QToolBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QToolBox.signalConnect(String signal_name, dynamic callback_func);


QStatusTipEvent QStatusTipEvent.new(String tip);
String QStatusTipEvent.tip();
@Override @Virtual void QStatusTipEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStatusTipEvent.signalConnect(String signal_name, dynamic callback_func);

QTextCursor QTextCursor.new();
//QTextCursor QTextCursor.new(QTextDocument document);
//QTextCursor QTextCursor.new(QTextFrame frame);
//QTextCursor QTextCursor.new(QTextBlock block);
//QTextCursor QTextCursor.new(QTextCursor cursor);
int QTextCursor.anchor();
boolean QTextCursor.atBlockEnd();
boolean QTextCursor.atBlockStart();
boolean QTextCursor.atEnd();
boolean QTextCursor.atStart();
void QTextCursor.beginEditBlock();
QTextBlock QTextCursor.block();
QTextCharFormat QTextCursor.getBlockCharFormat();
QTextBlockFormat QTextCursor.getBlockFormat();
int QTextCursor.blockNumber();
QTextCharFormat QTextCursor.getCharFormat();
void QTextCursor.clearSelection();
int QTextCursor.columnNumber();
QTextList QTextCursor.createList(QTextListFormat fmt);
//QTextList QTextCursor.createList(int style);
QTextFrame QTextCursor.currentFrame();
QTextList QTextCursor.currentList();
QTextTable QTextCursor.currentTable();
void QTextCursor.deleteChar();
void QTextCursor.deletePreviousChar();
QTextDocument QTextCursor.document();
void QTextCursor.endEditBlock();
boolean QTextCursor.hasComplexSelection();
boolean QTextCursor.hasSelection();
void QTextCursor.insertBlock();
//void QTextCursor.insertBlock(QTextBlockFormat fmt);
//void QTextCursor.insertBlock(QTextBlockFormat fmt, QTextCharFormat charFormat);
void QTextCursor.insertFragment(QTextDocumentFragment fragment);
QTextFrame QTextCursor.insertFrame(QTextFrameFormat fmt);
void QTextCursor.insertHtml(String html);
void QTextCursor.insertImage(QTextImageFormat fmt);
//void QTextCursor.insertImage(QTextImageFormat fmt, int alignment);
//void QTextCursor.insertImage(String name);
//void QTextCursor.insertImage(QImage image, String name);
QTextList QTextCursor.insertList(QTextListFormat fmt);
//QTextList QTextCursor.insertList(int style);
QTextTable QTextCursor.insertTable(int rows, int columns, QTextTableFormat fmt);
//QTextTable QTextCursor.insertTable(int rows, int columns);
void QTextCursor.insertText(String text);
//void QTextCursor.insertText(String text, QTextCharFormat fmt);
boolean QTextCursor.isCopyOf(QTextCursor other);
void QTextCursor.joinPreviousEditBlock();
boolean QTextCursor.getKeepPositionOnInsert();
void QTextCursor.mergeBlockCharFormat(QTextCharFormat modifier);
void QTextCursor.mergeBlockFormat(QTextBlockFormat modifier);
void QTextCursor.mergeCharFormat(QTextCharFormat modifier);
boolean QTextCursor.movePosition(int operation, int mode, int n);
int QTextCursor.getPosition();
int QTextCursor.positionInBlock();
void QTextCursor.removeSelectedText();
void QTextCursor.select(int selection);
void QTextCursor.selectedTableCells(int firstRow, int numRows, int firstColumn, int numColumns);
String QTextCursor.selectedText();
QTextDocumentFragment QTextCursor.selection();
int QTextCursor.selectionEnd();
int QTextCursor.selectionStart();
void QTextCursor.setBlockCharFormat(QTextCharFormat fmt);
void QTextCursor.setBlockFormat(QTextBlockFormat fmt);
void QTextCursor.setCharFormat(QTextCharFormat fmt);
void QTextCursor.setKeepPositionOnInsert(boolean b);
void QTextCursor.setPosition(int pos, int m);
void QTextCursor.setVerticalMovementX(int x);
void QTextCursor.setVisualNavigation(boolean b);
int QTextCursor.getVerticalMovementX();
boolean QTextCursor.getVisualNavigation();
@Virtual void QTextCursor.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextCursor.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextCursor.parents();

@Virtual @Override void QMotifStyle.drawComplexControl(int cc, QStyleOptionComplex opt, QPainter p, QWidget widget);
@Virtual @Override void QMotifStyle.drawControl(int element, QStyleOption opt, QPainter p, QWidget widget);
@Virtual @Override void QMotifStyle.drawPrimitive(int pe, QStyleOption opt, QPainter p, QWidget w);
@Virtual @Override boolean QMotifStyle.event(QEvent e);
@Virtual @Override int QMotifStyle.pixelMetric(int pm, QStyleOption opt, QWidget widget);
@Virtual @Override void QMotifStyle.polish(QPalette pal);
@Virtual @Override QSize QMotifStyle.sizeFromContents(int ct, QStyleOption opt, QSize contentsSize, QWidget widget);
@Virtual @Override QPalette QMotifStyle.standardPalette();
@Virtual @Override QPixmap QMotifStyle.standardPixmap(int standardPixmap, QStyleOption opt, QWidget widget);
@Virtual @Override int QMotifStyle.styleHint(int hint, QStyleOption opt, QWidget widget, QStyleHintReturn returnData);
@Virtual @Override QRect QMotifStyle.subControlRect(int cc, QStyleOptionComplex opt, int sc, QWidget widget);
@Virtual @Override QRect QMotifStyle.subElementRect(int sr, QStyleOption opt, QWidget widget);
QMotifStyle QMotifStyle.new(boolean useHighlightCols);
void QMotifStyle.setUseHighlightColors(boolean arg);
boolean QMotifStyle.getUseHighlightColors();
@Override @Virtual void QMotifStyle.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMotifStyle.signalConnect(String signal_name, dynamic callback_func);

QFinalState QFinalState.new(QState parent);
@Override @Virtual void QFinalState.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QFinalState.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QSetIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QSetIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSetIterator.parents();

@Virtual void QSysInfo.addEvent(String event_name, dynamic callback_func);
@Virtual void QSysInfo.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSysInfo.parents();

QTimerEvent QTimerEvent.new(int timerId);
int QTimerEvent.timerId();
@Override @Virtual void QTimerEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTimerEvent.signalConnect(String signal_name, dynamic callback_func);

QDialogButtonBox QDialogButtonBox.new(QWidget parent);
//QDialogButtonBox QDialogButtonBox.new(int orientation, QWidget parent);
//QDialogButtonBox QDialogButtonBox.new(QDialogButtonBoxStandardButtons buttons, int orientation, QWidget parent);
void QDialogButtonBox.addButton(QAbstractButton button, int role);
//QPushButton QDialogButtonBox.addButton(String text, int role);
//QPushButton QDialogButtonBox.addButton(int button);
QPushButton QDialogButtonBox.button(int which);
int QDialogButtonBox.buttonRole(QAbstractButton button);
Array<QAbstractButton> QDialogButtonBox.buttons();
boolean QDialogButtonBox.getCenterButtons();
void QDialogButtonBox.clear();
int QDialogButtonBox.getOrientation();
void QDialogButtonBox.removeButton(QAbstractButton button);
void QDialogButtonBox.setCenterButtons(boolean center);
void QDialogButtonBox.setOrientation(int orientation);
void QDialogButtonBox.setStandardButtons(QDialogButtonBoxStandardButtons buttons);
int QDialogButtonBox.standardButton(QAbstractButton button);
QDialogButtonBoxStandardButtons QDialogButtonBox.getStandardButtons();
@Override @Virtual void QDialogButtonBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDialogButtonBox.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QVector3D.addEvent(String event_name, dynamic callback_func);
@Virtual void QVector3D.signalConnect(String signal_name, dynamic callback_func);
Array<String> QVector3D.parents();

@Virtual void QWSWindow.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSWindow.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWSWindow.parents();

QGenericReturnArgument QGenericReturnArgument.new(String name, void data);
@Override @Virtual void QGenericReturnArgument.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGenericReturnArgument.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QListIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QListIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QListIterator.parents();

QWebHitTestResult QWebHitTestResult.new();
//QWebHitTestResult QWebHitTestResult.new(QWebHitTestResult other);
String QWebHitTestResult.alternateText();
QRect QWebHitTestResult.boundingRect();
QWebElement QWebHitTestResult.element();
QWebElement QWebHitTestResult.enclosingBlockElement();
QWebFrame QWebHitTestResult.frame();
QUrl QWebHitTestResult.imageUrl();
boolean QWebHitTestResult.isContentEditable();
boolean QWebHitTestResult.isContentSelected();
QWebElement QWebHitTestResult.linkElement();
QWebFrame QWebHitTestResult.linkTargetFrame();
String QWebHitTestResult.linkText();
QUrl QWebHitTestResult.linkTitle();
QUrl QWebHitTestResult.linkUrl();
QPixmap QWebHitTestResult.pixmap();
QPoint QWebHitTestResult.pos();
String QWebHitTestResult.title();
@Virtual void QWebHitTestResult.addEvent(String event_name, dynamic callback_func);
@Virtual void QWebHitTestResult.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWebHitTestResult.parents();

@Virtual void QWSInputMethod.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSInputMethod.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMutableHashIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QMutableHashIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMutableHashIterator.parents();

@Virtual @Override QWidget QStyledItemDelegate.createEditor(QWidget parent, QStyleOptionViewItem option, QModelIndex index);
@Virtual @Override void QStyledItemDelegate.paint(QPainter painter, QStyleOptionViewItem option, QModelIndex index);
@Virtual @Override void QStyledItemDelegate.setEditorData(QWidget editor, QModelIndex index);
@Virtual @Override void QStyledItemDelegate.setModelData(QWidget editor, QAbstractItemModel model, QModelIndex index);
@Virtual @Override QSize QStyledItemDelegate.sizeHint(QStyleOptionViewItem option, QModelIndex index);
@Virtual @Override void QStyledItemDelegate.updateEditorGeometry(QWidget editor, QStyleOptionViewItem option, QModelIndex index);
QStyledItemDelegate QStyledItemDelegate.new(QObject parent);
@Virtual String QStyledItemDelegate.displayText(QVariant value, QLocale locale);
QItemEditorFactory QStyledItemDelegate.getItemEditorFactory();
void QStyledItemDelegate.setItemEditorFactory(QItemEditorFactory factory);
@Override @Virtual void QStyledItemDelegate.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyledItemDelegate.signalConnect(String signal_name, dynamic callback_func);

QImage QImage.new();
//QImage QImage.new(QSize size, int fmt);
//QImage QImage.new(int width, int height, int fmt);
//QImage QImage.new(String data, int width, int height, int fmt);
//QImage QImage.new(String data, int width, int height, int fmt);
//QImage QImage.new(String data, int width, int height, int bytesPerLine, int fmt);
//QImage QImage.new(String data, int width, int height, int bytesPerLine, int fmt);
//QImage QImage.new(String fileName, String fmt);
//QImage QImage.new(String fileName, String fmt);
//QImage QImage.new(QImage image);
boolean QImage.allGray();
int QImage.bitPlaneCount();
String QImage.bits();
//String QImage.bits();
int QImage.byteCount();
int QImage.bytesPerLine();
int QImage.cacheKey();
QRgb QImage.getColor(int i);
int QImage.getColorCount();
String QImage.constBits();
String QImage.constScanLine(int i);
QImage QImage.convertToFormat(int fmt, QtImageConversionFlags flags);
QImage QImage.copy(QRect rectangle);
//QImage QImage.copy(int x, int y, int width, int height);
QImage QImage.createAlphaMask(QtImageConversionFlags flags);
QImage QImage.createHeuristicMask(boolean clipTight);
QImage QImage.createMaskFromColor(QRgb color, int mode);
int QImage.depth();
int QImage.getDotsPerMeterX();
int QImage.getDotsPerMeterY();
void QImage.fill(int pixelValue);
int QImage.format();
boolean QImage.hasAlphaChannel();
int QImage.height();
void QImage.invertPixels(int mode);
boolean QImage.isGrayscale();
boolean QImage.load(String fileName, String fmt);
//boolean QImage.load(QIODevice device, String fmt);
boolean QImage.loadFromData(String data, int len, String fmt);
//boolean QImage.loadFromData(QByteArray data, String fmt);
QImage QImage.mirrored(boolean horizontal, boolean vertical);
QPoint QImage.offset();
QRgb QImage.getPixel(QPoint position);
//QRgb QImage.getPixel(int x, int y);
int QImage.pixelIndex(QPoint position);
//int QImage.pixelIndex(int x, int y);
QRect QImage.rect();
QImage QImage.rgbSwapped();
boolean QImage.save(String fileName, String fmt, int quality);
//boolean QImage.save(QIODevice device, String fmt, int quality);
QImage QImage.scaled(QSize size, int aspectRatioMode, int transformMode);
//QImage QImage.scaled(int width, int height, int aspectRatioMode, int transformMode);
QImage QImage.scaledToHeight(int height, int mode);
QImage QImage.scaledToWidth(int width, int mode);
String QImage.scanLine(int i);
//String QImage.scanLine(int i);
void QImage.setColor(int index, QRgb colorValue);
void QImage.setColorCount(int colorCount);
void QImage.setDotsPerMeterX(int x);
void QImage.setDotsPerMeterY(int y);
void QImage.setOffset(QPoint offset);
void QImage.setPixel(QPoint position, int index_or_rgb);
//void QImage.setPixel(int x, int y, int index_or_rgb);
void QImage.setText(String key, String text);
QSize QImage.size();
String QImage.getText(String key);
boolean QImage.valid(QPoint pos);
//boolean QImage.valid(int x, int y);
int QImage.width();
QImage QImage.fromData(String data, int size, String fmt);
//QImage QImage.fromData(QByteArray data, String fmt);
QMatrix QImage.trueMatrix(QMatrix matrix, int width, int height);
//QTransform QImage.trueMatrix(QTransform matrix, int width, int height);
@Override @Virtual void QImage.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QImage.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QList.addEvent(String event_name, dynamic callback_func);
@Virtual void QList.signalConnect(String signal_name, dynamic callback_func);
Array<String> QList.parents();

@Virtual void QWindowsStyle.addEvent(String event_name, dynamic callback_func);
@Virtual void QWindowsStyle.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QRadioButton.sizeHint();
QRadioButton QRadioButton.new(QWidget parent);
//QRadioButton QRadioButton.new(String text, QWidget parent);
@Override @Virtual void QRadioButton.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QRadioButton.signalConnect(String signal_name, dynamic callback_func);

QStateMachine QAbstractState.machine();
QState QAbstractState.parentState();
@Override @Virtual void QAbstractState.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractState.signalConnect(String signal_name, dynamic callback_func);

QSemaphore QSemaphore.new(int n);
void QSemaphore.acquire(int n);
int QSemaphore.available();
void QSemaphore.release(int n);
boolean QSemaphore.tryAcquire(int n);
//boolean QSemaphore.tryAcquire(int n, int timeout);
@Virtual void QSemaphore.addEvent(String event_name, dynamic callback_func);
@Virtual void QSemaphore.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSemaphore.parents();

QHostInfo QHostInfo.new(int id);
//QHostInfo QHostInfo.new(QHostInfo other);
Array<QHostAddress> QHostInfo.getAddresses();
int QHostInfo.getError();
String QHostInfo.getErrorString();
String QHostInfo.getHostName();
int QHostInfo.getLookupId();
void QHostInfo.setAddresses(Array<QHostAddress> addresses);
void QHostInfo.setError(int error);
void QHostInfo.setErrorString(String str);
void QHostInfo.setHostName(String hostName);
void QHostInfo.setLookupId(int id);
void QHostInfo.abortHostLookup(int id);
QHostInfo QHostInfo.fromName(String name);
String QHostInfo.localDomainName();
String QHostInfo.localHostName();
int QHostInfo.lookupHost(String name, QObject receiver, String member);
@Virtual void QHostInfo.addEvent(String event_name, dynamic callback_func);
@Virtual void QHostInfo.signalConnect(String signal_name, dynamic callback_func);
Array<String> QHostInfo.parents();

@Virtual void QVariant.addEvent(String event_name, dynamic callback_func);
@Virtual void QVariant.signalConnect(String signal_name, dynamic callback_func);
Array<String> QVariant.parents();

@Virtual void QUndoView.addEvent(String event_name, dynamic callback_func);
@Virtual void QUndoView.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override int QGridLayout.count();
@Virtual @Override QtOrientations QGridLayout.expandingDirections();
@Virtual @Override boolean QGridLayout.hasHeightForWidth();
@Virtual @Override int QGridLayout.heightForWidth(int w);
@Virtual @Override void QGridLayout.invalidate();
@Virtual @Override QLayoutItem QGridLayout.itemAt(int index);
@Virtual @Override QSize QGridLayout.maximumSize();
@Virtual @Override int QGridLayout.minimumHeightForWidth(int w);
@Virtual @Override QSize QGridLayout.minimumSize();
@Virtual @Override void QGridLayout.setGeometry(QRect rect);
@Virtual @Override QSize QGridLayout.sizeHint();
@Virtual @Override QLayoutItem QGridLayout.takeAt(int index);
QGridLayout QGridLayout.new(QWidget parent);
//QGridLayout QGridLayout.new();
void QGridLayout.addItem(QLayoutItem item, int row, int column, int rowSpan, int columnSpan, QtAlignment alignment);
void QGridLayout.addLayout(QLayout layout, int row, int column, QtAlignment alignment);
//void QGridLayout.addLayout(QLayout layout, int row, int column, int rowSpan, int columnSpan, QtAlignment alignment);
void QGridLayout.addWidget(QWidget widget, int row, int column, QtAlignment alignment);
//void QGridLayout.addWidget(QWidget widget, int fromRow, int fromColumn, int rowSpan, int columnSpan, QtAlignment alignment);
QRect QGridLayout.cellRect(int row, int column);
int QGridLayout.columnCount();
int QGridLayout.getColumnMinimumWidth(int column);
int QGridLayout.getColumnStretch(int column);
void QGridLayout.getItemPosition(int index, int row, int column, int rowSpan, int columnSpan);
int QGridLayout.getHorizontalSpacing();
QLayoutItem QGridLayout.itemAtPosition(int row, int column);
int QGridLayout.getOriginCorner();
int QGridLayout.rowCount();
int QGridLayout.getRowMinimumHeight(int row);
int QGridLayout.getRowStretch(int row);
void QGridLayout.setColumnMinimumWidth(int column, int minSize);
void QGridLayout.setColumnStretch(int column, int stretch);
void QGridLayout.setHorizontalSpacing(int spacing);
void QGridLayout.setOriginCorner(int corner);
void QGridLayout.setRowMinimumHeight(int row, int minSize);
void QGridLayout.setRowStretch(int row, int stretch);
void QGridLayout.setSpacing(int spacing);
void QGridLayout.setVerticalSpacing(int spacing);
int QGridLayout.getSpacing();
int QGridLayout.getVerticalSpacing();
@Override @Virtual void QGridLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGridLayout.signalConnect(String signal_name, dynamic callback_func);

QNetworkSession QNetworkSession.new(QNetworkConfiguration connectionConfig, QObject parent);
int QNetworkSession.activeTime();
int QNetworkSession.bytesReceived();
int QNetworkSession.bytesWritten();
QNetworkConfiguration QNetworkSession.configuration();
int QNetworkSession.error();
String QNetworkSession.errorString();
QNetworkInterface QNetworkSession.interface();
boolean QNetworkSession.isOpen();
QVariant QNetworkSession.getSessionProperty(String key);
void QNetworkSession.setSessionProperty(String key, QVariant value);
int QNetworkSession.state();
boolean QNetworkSession.waitForOpened(int msecs);
void QNetworkSession.close();
void QNetworkSession.migrate();
void QNetworkSession.open();
void QNetworkSession.reject();
void QNetworkSession.stop();
@Override @Virtual void QNetworkSession.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QNetworkSession.signalConnect(String signal_name, dynamic callback_func);

QActionGroup QActionGroup.new(QObject parent);
Array<QAction> QActionGroup.actions();
QAction QActionGroup.checkedAction();
boolean QActionGroup.isEnabled();
boolean QActionGroup.isExclusive();
boolean QActionGroup.isVisible();
void QActionGroup.removeAction(QAction action);
void QActionGroup.setDisabled(boolean b);
void QActionGroup.setEnabled(boolean arg0);
void QActionGroup.setExclusive(boolean arg0);
void QActionGroup.setVisible(boolean arg0);
@Override @Virtual void QActionGroup.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QActionGroup.signalConnect(String signal_name, dynamic callback_func);

QNetworkCacheMetaData QNetworkCacheMetaData.new();
//QNetworkCacheMetaData QNetworkCacheMetaData.new(QNetworkCacheMetaData other);
QDateTime QNetworkCacheMetaData.getExpirationDate();
QDateTime QNetworkCacheMetaData.getLastModified();
boolean QNetworkCacheMetaData.getSaveToDisk();
void QNetworkCacheMetaData.setExpirationDate(QDateTime dateTime);
void QNetworkCacheMetaData.setLastModified(QDateTime dateTime);
void QNetworkCacheMetaData.setSaveToDisk(boolean allow);
void QNetworkCacheMetaData.setUrl(QUrl url);
QUrl QNetworkCacheMetaData.getUrl();
@Virtual void QNetworkCacheMetaData.addEvent(String event_name, dynamic callback_func);
@Virtual void QNetworkCacheMetaData.signalConnect(String signal_name, dynamic callback_func);
Array<String> QNetworkCacheMetaData.parents();

@Virtual void QFuture.addEvent(String event_name, dynamic callback_func);
@Virtual void QFuture.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFuture.parents();

@Virtual void QFSFileEngine.addEvent(String event_name, dynamic callback_func);
@Virtual void QFSFileEngine.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QAbstractGraphicsShapeItem.isObscuredBy(QGraphicsItem item);
@Virtual @Override QPainterPath QAbstractGraphicsShapeItem.opaqueArea();
QBrush QAbstractGraphicsShapeItem.getBrush();
QPen QAbstractGraphicsShapeItem.getPen();
void QAbstractGraphicsShapeItem.setBrush(QBrush brush);
void QAbstractGraphicsShapeItem.setPen(QPen pen);
@Override @Virtual void QAbstractGraphicsShapeItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractGraphicsShapeItem.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QTextOStream.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextOStream.signalConnect(String signal_name, dynamic callback_func);

QStandardItem QStandardItem.new();
//QStandardItem QStandardItem.new(String text);
//QStandardItem QStandardItem.new(QIcon icon, String text);
//QStandardItem QStandardItem.new(int rows, int columns);
String QStandardItem.getAccessibleDescription();
String QStandardItem.getAccessibleText();
void QStandardItem.appendColumn(Array<QStandardItem> items);
void QStandardItem.appendRow(Array<QStandardItem> items);
//void QStandardItem.appendRow(QStandardItem item);
void QStandardItem.appendRows(Array<QStandardItem> items);
QBrush QStandardItem.getBackground();
int QStandardItem.getCheckState();
QStandardItem QStandardItem.getChild(int row, int column);
@Virtual QStandardItem QStandardItem.clone();
int QStandardItem.column();
int QStandardItem.getColumnCount();
@Virtual QVariant QStandardItem.getData(int role);
QtItemFlags QStandardItem.getFlags();
QFont QStandardItem.getFont();
QBrush QStandardItem.getForeground();
boolean QStandardItem.hasChildren();
QIcon QStandardItem.getIcon();
QModelIndex QStandardItem.index();
void QStandardItem.insertColumns(int column, int count);
void QStandardItem.insertRows(int row, Array<QStandardItem> items);
//void QStandardItem.insertRows(int row, int count);
boolean QStandardItem.isCheckable();
boolean QStandardItem.isDragEnabled();
boolean QStandardItem.isDropEnabled();
boolean QStandardItem.isEditable();
boolean QStandardItem.isEnabled();
boolean QStandardItem.isSelectable();
boolean QStandardItem.isTristate();
QStandardItemModel QStandardItem.model();
QStandardItem QStandardItem.parent();
void QStandardItem.removeColumn(int column);
void QStandardItem.removeColumns(int column, int count);
void QStandardItem.removeRow(int row);
void QStandardItem.removeRows(int row, int count);
int QStandardItem.row();
int QStandardItem.getRowCount();
void QStandardItem.setAccessibleDescription(String accessibleDescription);
void QStandardItem.setAccessibleText(String accessibleText);
void QStandardItem.setBackground(QBrush brush);
void QStandardItem.setCheckState(int state);
void QStandardItem.setCheckable(boolean checkable);
void QStandardItem.setChild(int row, int column, QStandardItem item);
//void QStandardItem.setChild(int row, QStandardItem item);
void QStandardItem.setColumnCount(int columns);
@Virtual void QStandardItem.setData(QVariant value, int role);
void QStandardItem.setDragEnabled(boolean dragEnabled);
void QStandardItem.setDropEnabled(boolean dropEnabled);
void QStandardItem.setEditable(boolean editable);
void QStandardItem.setEnabled(boolean enabled);
void QStandardItem.setFlags(QtItemFlags flags);
void QStandardItem.setFont(QFont font);
void QStandardItem.setForeground(QBrush brush);
void QStandardItem.setIcon(QIcon icon);
void QStandardItem.setRowCount(int rows);
void QStandardItem.setSelectable(boolean selectable);
void QStandardItem.setSizeHint(QSize size);
void QStandardItem.setStatusTip(String statusTip);
void QStandardItem.setText(String text);
void QStandardItem.setTextAlignment(QtAlignment alignment);
void QStandardItem.setToolTip(String toolTip);
void QStandardItem.setTristate(boolean tristate);
void QStandardItem.setWhatsThis(String whatsThis);
QSize QStandardItem.getSizeHint();
void QStandardItem.sortChildren(int column, int order);
String QStandardItem.getStatusTip();
QStandardItem QStandardItem.takeChild(int row, int column);
Array<QStandardItem> QStandardItem.takeColumn(int column);
Array<QStandardItem> QStandardItem.takeRow(int row);
String QStandardItem.getText();
QtAlignment QStandardItem.getTextAlignment();
String QStandardItem.getToolTip();
@Virtual int QStandardItem.type();
String QStandardItem.getWhatsThis();
@Virtual void QStandardItem.addEvent(String event_name, dynamic callback_func);
@Virtual void QStandardItem.signalConnect(String signal_name, dynamic callback_func);
Array<String> QStandardItem.parents();

@Virtual void QStringList.addEvent(String event_name, dynamic callback_func);
@Virtual void QStringList.signalConnect(String signal_name, dynamic callback_func);


@Virtual void QPluginLoader.addEvent(String event_name, dynamic callback_func);
@Virtual void QPluginLoader.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionProgressBarV2 QStyleOptionProgressBarV2.new();
//QStyleOptionProgressBarV2 QStyleOptionProgressBarV2.new(QStyleOptionProgressBar other);
//QStyleOptionProgressBarV2 QStyleOptionProgressBarV2.new(QStyleOptionProgressBarV2 other);
@Override @Virtual void QStyleOptionProgressBarV2.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionProgressBarV2.signalConnect(String signal_name, dynamic callback_func);

String QDesktopServices.displayName(int type);
boolean QDesktopServices.openUrl(QUrl url);
void QDesktopServices.setUrlHandler(String scheme, QObject receiver, String method);
String QDesktopServices.storageLocation(int type);
void QDesktopServices.unsetUrlHandler(String scheme);
@Virtual void QDesktopServices.addEvent(String event_name, dynamic callback_func);
@Virtual void QDesktopServices.signalConnect(String signal_name, dynamic callback_func);
Array<String> QDesktopServices.parents();

@Virtual @Override int QLocalSocket.bytesAvailable();
@Virtual @Override int QLocalSocket.bytesToWrite();
@Virtual @Override boolean QLocalSocket.canReadLine();
@Virtual @Override void QLocalSocket.close();
@Virtual @Override boolean QLocalSocket.isSequential();
@Virtual @Override boolean QLocalSocket.waitForBytesWritten(int msecs);
@Virtual @Override boolean QLocalSocket.waitForReadyRead(int msecs);
QLocalSocket QLocalSocket.new(QObject parent);
void QLocalSocket.abort();
void QLocalSocket.connectToServer(String name, QIODeviceOpenMode openMode);
void QLocalSocket.disconnectFromServer();
int QLocalSocket.error();
boolean QLocalSocket.flush();
String QLocalSocket.fullServerName();
int QLocalSocket.getReadBufferSize();
String QLocalSocket.serverName();
void QLocalSocket.setReadBufferSize(int size);
boolean QLocalSocket.setSocketDescriptor(int socketDescriptor, int socketState, QIODeviceOpenMode openMode);
int QLocalSocket.getSocketDescriptor();
int QLocalSocket.state();
boolean QLocalSocket.waitForConnected(int msecs);
boolean QLocalSocket.waitForDisconnected(int msecs);
@Override @Virtual void QLocalSocket.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QLocalSocket.signalConnect(String signal_name, dynamic callback_func);

QPainter QPainter.new();
//QPainter QPainter.new(QPaintDevice device);
QBrush QPainter.getBackground();
int QPainter.getBackgroundMode();
boolean QPainter.begin(QPaintDevice device);
void QPainter.beginNativePainting();
QRectF QPainter.boundingRect(QRectF rectangle, int flags, String text);
//QRect QPainter.boundingRect(QRect rectangle, int flags, String text);
//QRect QPainter.boundingRect(int x, int y, int w, int h, int flags, String text);
//QRectF QPainter.boundingRect(QRectF rectangle, String text, QTextOption option);
QBrush QPainter.getBrush();
QPoint QPainter.getBrushOrigin();
QPainterPath QPainter.getClipPath();
QRegion QPainter.getClipRegion();
QTransform QPainter.combinedTransform();
int QPainter.getCompositionMode();
QPaintDevice QPainter.device();
QTransform QPainter.deviceTransform();
void QPainter.drawArc(QRectF rectangle, int startAngle, int spanAngle);
//void QPainter.drawArc(QRect rectangle, int startAngle, int spanAngle);
//void QPainter.drawArc(int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter.drawChord(QRectF rectangle, int startAngle, int spanAngle);
//void QPainter.drawChord(QRect rectangle, int startAngle, int spanAngle);
//void QPainter.drawChord(int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter.drawConvexPolygon(QPointF points, int pointCount);
//void QPainter.drawConvexPolygon(QPoint points, int pointCount);
//void QPainter.drawConvexPolygon(QPolygonF polygon);
//void QPainter.drawConvexPolygon(QPolygon polygon);
void QPainter.drawEllipse(QRectF rectangle);
//void QPainter.drawEllipse(QRect rectangle);
//void QPainter.drawEllipse(int x, int y, int width, int height);
//void QPainter.drawEllipse(QPointF center, float rx, float ry);
//void QPainter.drawEllipse(QPoint center, int rx, int ry);
void QPainter.drawImage(QRectF target, QImage image, QRectF source, QtImageConversionFlags flags);
//void QPainter.drawImage(QRect target, QImage image, QRect source, QtImageConversionFlags flags);
//void QPainter.drawImage(QPointF point, QImage image);
//void QPainter.drawImage(QPoint point, QImage image);
//void QPainter.drawImage(QPointF point, QImage image, QRectF source, QtImageConversionFlags flags);
//void QPainter.drawImage(QPoint point, QImage image, QRect source, QtImageConversionFlags flags);
//void QPainter.drawImage(QRectF rectangle, QImage image);
//void QPainter.drawImage(QRect rectangle, QImage image);
//void QPainter.drawImage(int x, int y, QImage image, int sx, int sy, int sw, int sh, QtImageConversionFlags flags);
void QPainter.drawLine(QLineF line);
//void QPainter.drawLine(QLine line);
//void QPainter.drawLine(QPoint p1, QPoint p2);
//void QPainter.drawLine(QPointF p1, QPointF p2);
//void QPainter.drawLine(int x1, int y1, int x2, int y2);
void QPainter.drawLines(QLineF lines, int lineCount);
//void QPainter.drawLines(QLine lines, int lineCount);
//void QPainter.drawLines(QPointF pointPairs, int lineCount);
//void QPainter.drawLines(QPoint pointPairs, int lineCount);
void QPainter.drawPath(QPainterPath path);
void QPainter.drawPicture(QPointF point, QPicture picture);
//void QPainter.drawPicture(QPoint point, QPicture picture);
//void QPainter.drawPicture(int x, int y, QPicture picture);
void QPainter.drawPie(QRectF rectangle, int startAngle, int spanAngle);
//void QPainter.drawPie(QRect rectangle, int startAngle, int spanAngle);
//void QPainter.drawPie(int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter.drawPixmap(QRectF target, QPixmap pixmap, QRectF source);
//void QPainter.drawPixmap(QRect target, QPixmap pixmap, QRect source);
//void QPainter.drawPixmap(QPointF point, QPixmap pixmap, QRectF source);
//void QPainter.drawPixmap(QPoint point, QPixmap pixmap, QRect source);
//void QPainter.drawPixmap(QPointF point, QPixmap pixmap);
//void QPainter.drawPixmap(QPoint point, QPixmap pixmap);
//void QPainter.drawPixmap(int x, int y, QPixmap pixmap);
//void QPainter.drawPixmap(QRect rectangle, QPixmap pixmap);
//void QPainter.drawPixmap(int x, int y, int width, int height, QPixmap pixmap);
//void QPainter.drawPixmap(int x, int y, int w, int h, QPixmap pixmap, int sx, int sy, int sw, int sh);
//void QPainter.drawPixmap(int x, int y, QPixmap pixmap, int sx, int sy, int sw, int sh);
void QPainter.drawPoint(QPointF position);
//void QPainter.drawPoint(QPoint position);
//void QPainter.drawPoint(int x, int y);
void QPainter.drawPoints(QPointF points, int pointCount);
//void QPainter.drawPoints(QPoint points, int pointCount);
//void QPainter.drawPoints(QPolygonF points);
//void QPainter.drawPoints(QPolygon points);
void QPainter.drawPolygon(QPointF points, int pointCount, int fillRule);
//void QPainter.drawPolygon(QPoint points, int pointCount, int fillRule);
//void QPainter.drawPolygon(QPolygonF points, int fillRule);
//void QPainter.drawPolygon(QPolygon points, int fillRule);
void QPainter.drawPolyline(QPointF points, int pointCount);
//void QPainter.drawPolyline(QPoint points, int pointCount);
//void QPainter.drawPolyline(QPolygonF points);
//void QPainter.drawPolyline(QPolygon points);
void QPainter.drawRect(QRectF rectangle);
//void QPainter.drawRect(QRect rectangle);
//void QPainter.drawRect(int x, int y, int width, int height);
void QPainter.drawRects(QRectF rectangles, int rectCount);
//void QPainter.drawRects(QRect rectangles, int rectCount);
void QPainter.drawRoundedRect(QRectF rect, float xRadius, float yRadius, int mode);
//void QPainter.drawRoundedRect(QRect rect, float xRadius, float yRadius, int mode);
//void QPainter.drawRoundedRect(int x, int y, int w, int h, float xRadius, float yRadius, int mode);
void QPainter.drawStaticText(QPointF topLeftPosition, QStaticText staticText);
//void QPainter.drawStaticText(QPoint topLeftPosition, QStaticText staticText);
//void QPainter.drawStaticText(int left, int top, QStaticText staticText);
void QPainter.drawText(QPointF position, String text);
//void QPainter.drawText(QPoint position, String text);
//void QPainter.drawText(QRectF rectangle, int flags, String text, QRectF boundingRect);
//void QPainter.drawText(QRect rectangle, int flags, String text, QRect boundingRect);
//void QPainter.drawText(int x, int y, String text);
//void QPainter.drawText(int x, int y, int width, int height, int flags, String text, QRect boundingRect);
//void QPainter.drawText(QRectF rectangle, String text, QTextOption option);
void QPainter.drawTiledPixmap(QRectF rectangle, QPixmap pixmap, QPointF position);
//void QPainter.drawTiledPixmap(QRect rectangle, QPixmap pixmap, QPoint position);
//void QPainter.drawTiledPixmap(int x, int y, int width, int height, QPixmap pixmap, int sx, int sy);
boolean QPainter.end();
void QPainter.endNativePainting();
void QPainter.eraseRect(QRectF rectangle);
//void QPainter.eraseRect(QRect rectangle);
//void QPainter.eraseRect(int x, int y, int width, int height);
void QPainter.fillPath(QPainterPath path, QBrush brush);
void QPainter.fillRect(QRectF rectangle, QBrush brush);
//void QPainter.fillRect(int x, int y, int width, int height, int style);
//void QPainter.fillRect(QRect rectangle, int style);
//void QPainter.fillRect(QRectF rectangle, int style);
//void QPainter.fillRect(QRect rectangle, QBrush brush);
//void QPainter.fillRect(QRect rectangle, QColor color);
//void QPainter.fillRect(QRectF rectangle, QColor color);
//void QPainter.fillRect(int x, int y, int width, int height, QBrush brush);
//void QPainter.fillRect(int x, int y, int width, int height, QColor color);
//void QPainter.fillRect(int x, int y, int width, int height, int color);
//void QPainter.fillRect(QRect rectangle, int color);
//void QPainter.fillRect(QRectF rectangle, int color);
QFont QPainter.getFont();
QFontInfo QPainter.fontInfo();
QFontMetrics QPainter.fontMetrics();
boolean QPainter.hasClipping();
void QPainter.initFrom(QWidget widget);
boolean QPainter.isActive();
int QPainter.getLayoutDirection();
float QPainter.getOpacity();
QPaintEngine QPainter.paintEngine();
QPen QPainter.getPen();
QPainterRenderHints QPainter.getRenderHints();
void QPainter.resetTransform();
void QPainter.restore();
void QPainter.rotate(float angle);
void QPainter.save();
void QPainter.scale(float sx, float sy);
void QPainter.setBackground(QBrush brush);
void QPainter.setBackgroundMode(int mode);
void QPainter.setBrush(QBrush brush);
//void QPainter.setBrush(int style);
void QPainter.setBrushOrigin(QPointF position);
//void QPainter.setBrushOrigin(QPoint position);
//void QPainter.setBrushOrigin(int x, int y);
void QPainter.setClipPath(QPainterPath path, int operation);
void QPainter.setClipRect(QRectF rectangle, int operation);
//void QPainter.setClipRect(int x, int y, int width, int height, int operation);
//void QPainter.setClipRect(QRect rectangle, int operation);
void QPainter.setClipRegion(QRegion region, int operation);
void QPainter.setClipping(boolean enable);
void QPainter.setCompositionMode(int mode);
void QPainter.setFont(QFont font);
void QPainter.setLayoutDirection(int direction);
void QPainter.setOpacity(float opacity);
void QPainter.setPen(QPen pen);
//void QPainter.setPen(QColor color);
//void QPainter.setPen(int style);
void QPainter.setRenderHint(int hint, boolean on);
void QPainter.setRenderHints(QPainterRenderHints hints, boolean on);
void QPainter.setTransform(QTransform transform, boolean combine);
void QPainter.setViewTransformEnabled(boolean enable);
void QPainter.setViewport(QRect rectangle);
//void QPainter.setViewport(int x, int y, int width, int height);
void QPainter.setWindow(QRect rectangle);
//void QPainter.setWindow(int x, int y, int width, int height);
void QPainter.setWorldMatrixEnabled(boolean enable);
void QPainter.setWorldTransform(QTransform matrix, boolean combine);
void QPainter.shear(float sh, float sv);
void QPainter.strokePath(QPainterPath path, QPen pen);
boolean QPainter.testRenderHint(int hint);
QTransform QPainter.getTransform();
void QPainter.translate(QPointF offset);
//void QPainter.translate(QPoint offset);
//void QPainter.translate(float dx, float dy);
boolean QPainter.getViewTransformEnabled();
QRect QPainter.getViewport();
QRect QPainter.getWindow();
boolean QPainter.getWorldMatrixEnabled();
QTransform QPainter.getWorldTransform();
@Virtual void QPainter.addEvent(String event_name, dynamic callback_func);
@Virtual void QPainter.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPainter.parents();

QImageWriter QImageWriter.new();
//QImageWriter QImageWriter.new(QIODevice device, QByteArray fmt);
//QImageWriter QImageWriter.new(String fileName, QByteArray fmt);
boolean QImageWriter.canWrite();
int QImageWriter.getCompression();
QIODevice QImageWriter.getDevice();
int QImageWriter.error();
String QImageWriter.errorString();
String QImageWriter.getFileName();
QByteArray QImageWriter.getFormat();
float QImageWriter.getGamma();
int QImageWriter.getQuality();
void QImageWriter.setCompression(int compression);
void QImageWriter.setDevice(QIODevice device);
void QImageWriter.setFileName(String fileName);
void QImageWriter.setFormat(QByteArray fmt);
void QImageWriter.setGamma(float gamma);
void QImageWriter.setQuality(int quality);
void QImageWriter.setText(String key, String text);
boolean QImageWriter.supportsOption(int option);
boolean QImageWriter.write(QImage image);
Array<QByteArray> QImageWriter.supportedImageFormats();
@Virtual void QImageWriter.addEvent(String event_name, dynamic callback_func);
@Virtual void QImageWriter.signalConnect(String signal_name, dynamic callback_func);
Array<String> QImageWriter.parents();

@Virtual void QParallelAnimationGroup.addEvent(String event_name, dynamic callback_func);
@Virtual void QParallelAnimationGroup.signalConnect(String signal_name, dynamic callback_func);

Array<QSize> QIconEngineV2.availableSizes(int mode, int state);
@Virtual QIconEngineV2 QIconEngineV2.clone();
String QIconEngineV2.iconName();
@Virtual String QIconEngineV2.key();
@Virtual void QIconEngineV2.virtual_hook(int id, void data);
@Override @Virtual void QIconEngineV2.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QIconEngineV2.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMutableListIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QMutableListIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMutableListIterator.parents();

@Virtual void QMouseDriverPlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QMouseDriverPlugin.signalConnect(String signal_name, dynamic callback_func);

QDragEnterEvent QDragEnterEvent.new(QPoint point, QtDropActions actions, QMimeData data, QtMouseButtons buttons, QtKeyboardModifiers modifiers);
@Override @Virtual void QDragEnterEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDragEnterEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QCustomEvent.addEvent(String event_name, dynamic callback_func);
@Virtual void QCustomEvent.signalConnect(String signal_name, dynamic callback_func);

QHideEvent QHideEvent.new();
@Override @Virtual void QHideEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QHideEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QGraphicsScale.applyTo(QMatrix4x4 matrix);
QGraphicsScale QGraphicsScale.new(QObject parent);
void QGraphicsScale.setXScale(float arg0);
void QGraphicsScale.setYScale(float arg0);
void QGraphicsScale.setZScale(float arg0);
float QGraphicsScale.getXScale();
float QGraphicsScale.getYScale();
float QGraphicsScale.getZScale();
@Override @Virtual void QGraphicsScale.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsScale.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QLCDNumber.sizeHint();
QLCDNumber QLCDNumber.new(QWidget parent);
//QLCDNumber QLCDNumber.new(int numDigits, QWidget parent);
boolean QLCDNumber.checkOverflow(double num);
//boolean QLCDNumber.checkOverflow(int num);
int QLCDNumber.getDigitCount();
int QLCDNumber.intValue();
int QLCDNumber.getMode();
int QLCDNumber.getSegmentStyle();
void QLCDNumber.setDigitCount(int numDigits);
void QLCDNumber.setMode(int arg0);
void QLCDNumber.setSegmentStyle(int arg0);
boolean QLCDNumber.getSmallDecimalPoint();
double QLCDNumber.value();
void QLCDNumber.display(String s);
//void QLCDNumber.display(double num);
//void QLCDNumber.display(int num);
void QLCDNumber.setBinMode();
void QLCDNumber.setDecMode();
void QLCDNumber.setHexMode();
void QLCDNumber.setOctMode();
void QLCDNumber.setSmallDecimalPoint(boolean arg0);
@Override @Virtual void QLCDNumber.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QLCDNumber.signalConnect(String signal_name, dynamic callback_func);

QCommandLinkButton QCommandLinkButton.new(QWidget parent);
//QCommandLinkButton QCommandLinkButton.new(String text, QWidget parent);
//QCommandLinkButton QCommandLinkButton.new(String text, String description, QWidget parent);
String QCommandLinkButton.getDescription();
void QCommandLinkButton.setDescription(String description);
@Override @Virtual void QCommandLinkButton.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QCommandLinkButton.signalConnect(String signal_name, dynamic callback_func);

QResizeEvent QResizeEvent.new(QSize size, QSize oldSize);
QSize QResizeEvent.oldSize();
QSize QResizeEvent.size();
@Override @Virtual void QResizeEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QResizeEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QGenericMatrix.addEvent(String event_name, dynamic callback_func);
@Virtual void QGenericMatrix.signalConnect(String signal_name, dynamic callback_func);
Array<String> QGenericMatrix.parents();

QBitArray QBitArray.new();
//QBitArray QBitArray.new(int size, boolean value);
//QBitArray QBitArray.new(QBitArray other);
boolean QBitArray.at(int i);
void QBitArray.clear();
void QBitArray.clearBit(int i);
int QBitArray.count();
//int QBitArray.count(boolean on);
boolean QBitArray.fill(boolean value, int size);
//void QBitArray.fill(boolean value, int begin, int end);
boolean QBitArray.isEmpty();
void QBitArray.resize(int size);
void QBitArray.setBit(int i);
//void QBitArray.setBit(int i, boolean value);
int QBitArray.size();
boolean QBitArray.testBit(int i);
boolean QBitArray.toggleBit(int i);
void QBitArray.truncate(int pos);
@Virtual void QBitArray.addEvent(String event_name, dynamic callback_func);
@Virtual void QBitArray.signalConnect(String signal_name, dynamic callback_func);
Array<String> QBitArray.parents();

@Virtual QAbstractFileEngine QAbstractFileEngineHandler.create(String fileName);
@Virtual void QAbstractFileEngineHandler.addEvent(String event_name, dynamic callback_func);
@Virtual void QAbstractFileEngineHandler.signalConnect(String signal_name, dynamic callback_func);
Array<String> QAbstractFileEngineHandler.parents();

@Virtual void QIconEnginePluginV2.addEvent(String event_name, dynamic callback_func);
@Virtual void QIconEnginePluginV2.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QSymbianEvent.addEvent(String event_name, dynamic callback_func);
@Virtual void QSymbianEvent.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSymbianEvent.parents();

@Virtual void QDecoration.addEvent(String event_name, dynamic callback_func);
@Virtual void QDecoration.signalConnect(String signal_name, dynamic callback_func);
Array<String> QDecoration.parents();

QNetworkAccessManager QNetworkAccessManager.new(QObject parent);
QNetworkConfiguration QNetworkAccessManager.activeConfiguration();
QAbstractNetworkCache QNetworkAccessManager.getCache();
QNetworkConfiguration QNetworkAccessManager.getConfiguration();
QNetworkCookieJar QNetworkAccessManager.getCookieJar();
QNetworkReply QNetworkAccessManager.deleteResource(QNetworkRequest request);
QNetworkReply QNetworkAccessManager.get(QNetworkRequest request);
QNetworkReply QNetworkAccessManager.head(QNetworkRequest request);
int QNetworkAccessManager.getNetworkAccessible();
QNetworkReply QNetworkAccessManager.post(QNetworkRequest request, QIODevice data);
//QNetworkReply QNetworkAccessManager.post(QNetworkRequest request, QByteArray data);
QNetworkProxy QNetworkAccessManager.getProxy();
QNetworkProxyFactory QNetworkAccessManager.getProxyFactory();
QNetworkReply QNetworkAccessManager.put(QNetworkRequest request, QIODevice data);
//QNetworkReply QNetworkAccessManager.put(QNetworkRequest request, QByteArray data);
QNetworkReply QNetworkAccessManager.sendCustomRequest(QNetworkRequest request, QByteArray verb, QIODevice data);
void QNetworkAccessManager.setCache(QAbstractNetworkCache cache);
void QNetworkAccessManager.setConfiguration(QNetworkConfiguration config);
void QNetworkAccessManager.setCookieJar(QNetworkCookieJar cookieJar);
void QNetworkAccessManager.setNetworkAccessible(int accessible);
void QNetworkAccessManager.setProxy(QNetworkProxy proxy);
void QNetworkAccessManager.setProxyFactory(QNetworkProxyFactory factory);
@Override @Virtual void QNetworkAccessManager.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QNetworkAccessManager.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QConstString.addEvent(String event_name, dynamic callback_func);
@Virtual void QConstString.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override int QGraphicsLinearLayout.count();
@Virtual @Override void QGraphicsLinearLayout.invalidate();
@Virtual @Override QGraphicsLayoutItem QGraphicsLinearLayout.itemAt(int index);
@Virtual @Override void QGraphicsLinearLayout.removeAt(int index);
@Virtual @Override void QGraphicsLinearLayout.setGeometry(QRectF rect);
@Virtual @Override QSizeF QGraphicsLinearLayout.sizeHint(int which, QSizeF constraint);
QGraphicsLinearLayout QGraphicsLinearLayout.new(QGraphicsLayoutItem parent);
//QGraphicsLinearLayout QGraphicsLinearLayout.new(int orientation, QGraphicsLayoutItem parent);
void QGraphicsLinearLayout.addItem(QGraphicsLayoutItem item);
void QGraphicsLinearLayout.addStretch(int stretch);
QtAlignment QGraphicsLinearLayout.getAlignment(QGraphicsLayoutItem item);
void QGraphicsLinearLayout.insertItem(int index, QGraphicsLayoutItem item);
void QGraphicsLinearLayout.insertStretch(int index, int stretch);
float QGraphicsLinearLayout.getItemSpacing(int index);
int QGraphicsLinearLayout.getOrientation();
void QGraphicsLinearLayout.removeItem(QGraphicsLayoutItem item);
void QGraphicsLinearLayout.setAlignment(QGraphicsLayoutItem item, QtAlignment alignment);
void QGraphicsLinearLayout.setItemSpacing(int index, float spacing);
void QGraphicsLinearLayout.setOrientation(int orientation);
void QGraphicsLinearLayout.setSpacing(float spacing);
void QGraphicsLinearLayout.setStretchFactor(QGraphicsLayoutItem item, int stretch);
float QGraphicsLinearLayout.getSpacing();
int QGraphicsLinearLayout.getStretchFactor(QGraphicsLayoutItem item);
@Override @Virtual void QGraphicsLinearLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsLinearLayout.signalConnect(String signal_name, dynamic callback_func);

QTextDocumentFragment QTextDocumentFragment.new();
//QTextDocumentFragment QTextDocumentFragment.new(QTextDocument document);
//QTextDocumentFragment QTextDocumentFragment.new(QTextCursor cursor);
//QTextDocumentFragment QTextDocumentFragment.new(QTextDocumentFragment other);
boolean QTextDocumentFragment.isEmpty();
String QTextDocumentFragment.toHtml(QByteArray encoding);
//String QTextDocumentFragment.toHtml();
String QTextDocumentFragment.toPlainText();
QTextDocumentFragment QTextDocumentFragment.fromHtml(String text);
//QTextDocumentFragment QTextDocumentFragment.fromHtml(String text, QTextDocument resourceProvider);
QTextDocumentFragment QTextDocumentFragment.fromPlainText(String plainText);
@Virtual void QTextDocumentFragment.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextDocumentFragment.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextDocumentFragment.parents();

@Virtual QWidget QAbstractItemDelegate.createEditor(QWidget parent, QStyleOptionViewItem option, QModelIndex index);
@Virtual boolean QAbstractItemDelegate.editorEvent(QEvent event, QAbstractItemModel model, QStyleOptionViewItem option, QModelIndex index);
@Virtual void QAbstractItemDelegate.paint(QPainter painter, QStyleOptionViewItem option, QModelIndex index);
@Virtual void QAbstractItemDelegate.setEditorData(QWidget editor, QModelIndex index);
@Virtual void QAbstractItemDelegate.setModelData(QWidget editor, QAbstractItemModel model, QModelIndex index);
@Virtual QSize QAbstractItemDelegate.sizeHint(QStyleOptionViewItem option, QModelIndex index);
@Virtual void QAbstractItemDelegate.updateEditorGeometry(QWidget editor, QStyleOptionViewItem option, QModelIndex index);
boolean QAbstractItemDelegate.helpEvent(QHelpEvent event, QAbstractItemView view, QStyleOptionViewItem option, QModelIndex index);
@Override @Virtual void QAbstractItemDelegate.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractItemDelegate.signalConnect(String signal_name, dynamic callback_func);

QMoveEvent QMoveEvent.new(QPoint pos, QPoint oldPos);
QPoint QMoveEvent.oldPos();
QPoint QMoveEvent.pos();
@Override @Virtual void QMoveEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMoveEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QXmlStreamNamespaceDeclaration.addEvent(String event_name, dynamic callback_func);
@Virtual void QXmlStreamNamespaceDeclaration.signalConnect(String signal_name, dynamic callback_func);
Array<String> QXmlStreamNamespaceDeclaration.parents();

@Virtual void QItemSelection.addEvent(String event_name, dynamic callback_func);
@Virtual void QItemSelection.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QVariant QGraphicsView.inputMethodQuery(int query);
@Virtual @Override QSize QGraphicsView.sizeHint();
QGraphicsView QGraphicsView.new(QWidget parent);
//QGraphicsView QGraphicsView.new(QGraphicsScene scene, QWidget parent);
QtAlignment QGraphicsView.getAlignment();
QBrush QGraphicsView.getBackgroundBrush();
QGraphicsViewCacheMode QGraphicsView.getCacheMode();
void QGraphicsView.centerOn(QPointF pos);
//void QGraphicsView.centerOn(float x, float y);
//void QGraphicsView.centerOn(QGraphicsItem item);
int QGraphicsView.getDragMode();
void QGraphicsView.ensureVisible(QRectF rect, int xmargin, int ymargin);
//void QGraphicsView.ensureVisible(float x, float y, float w, float h, int xmargin, int ymargin);
//void QGraphicsView.ensureVisible(QGraphicsItem item, int xmargin, int ymargin);
void QGraphicsView.fitInView(QRectF rect, int aspectRatioMode);
//void QGraphicsView.fitInView(float x, float y, float w, float h, int aspectRatioMode);
//void QGraphicsView.fitInView(QGraphicsItem item, int aspectRatioMode);
QBrush QGraphicsView.getForegroundBrush();
boolean QGraphicsView.isInteractive();
boolean QGraphicsView.isTransformed();
QGraphicsItem QGraphicsView.itemAt(QPoint pos);
//QGraphicsItem QGraphicsView.itemAt(int x, int y);
Array<QGraphicsItem> QGraphicsView.items();
//Array<QGraphicsItem> QGraphicsView.items(QPoint pos);
//Array<QGraphicsItem> QGraphicsView.items(int x, int y);
//Array<QGraphicsItem> QGraphicsView.items(int x, int y, int w, int h, int mode);
//Array<QGraphicsItem> QGraphicsView.items(QRect rect, int mode);
//Array<QGraphicsItem> QGraphicsView.items(QPolygon polygon, int mode);
//Array<QGraphicsItem> QGraphicsView.items(QPainterPath path, int mode);
QPoint QGraphicsView.mapFromScene(QPointF point);
//QPolygon QGraphicsView.mapFromScene(QRectF rect);
//QPolygon QGraphicsView.mapFromScene(QPolygonF polygon);
//QPainterPath QGraphicsView.mapFromScene(QPainterPath path);
//QPoint QGraphicsView.mapFromScene(float x, float y);
//QPolygon QGraphicsView.mapFromScene(float x, float y, float w, float h);
QPointF QGraphicsView.mapToScene(QPoint point);
//QPolygonF QGraphicsView.mapToScene(QRect rect);
//QPolygonF QGraphicsView.mapToScene(QPolygon polygon);
//QPainterPath QGraphicsView.mapToScene(QPainterPath path);
//QPointF QGraphicsView.mapToScene(int x, int y);
//QPolygonF QGraphicsView.mapToScene(int x, int y, int w, int h);
QMatrix QGraphicsView.getMatrix();
QGraphicsViewOptimizationFlags QGraphicsView.getOptimizationFlags();
void QGraphicsView.render(QPainter painter, QRectF target, QRect source, int aspectRatioMode);
int QGraphicsView.getRenderHints();
void QGraphicsView.resetCachedContent();
void QGraphicsView.resetMatrix();
void QGraphicsView.resetTransform();
int QGraphicsView.getResizeAnchor();
void QGraphicsView.rotate(float angle);
int QGraphicsView.getRubberBandSelectionMode();
void QGraphicsView.scale(float sx, float sy);
QGraphicsScene QGraphicsView.getScene();
QRectF QGraphicsView.getSceneRect();
void QGraphicsView.setAlignment(QtAlignment alignment);
void QGraphicsView.setBackgroundBrush(QBrush brush);
void QGraphicsView.setCacheMode(QGraphicsViewCacheMode mode);
void QGraphicsView.setDragMode(int mode);
void QGraphicsView.setForegroundBrush(QBrush brush);
void QGraphicsView.setInteractive(boolean allowed);
void QGraphicsView.setMatrix(QMatrix matrix, boolean combine);
void QGraphicsView.setOptimizationFlag(int flag, boolean enabled);
void QGraphicsView.setOptimizationFlags(QGraphicsViewOptimizationFlags flags);
void QGraphicsView.setRenderHint(int hint, boolean enabled);
void QGraphicsView.setRenderHints(int hints);
void QGraphicsView.setResizeAnchor(int anchor);
void QGraphicsView.setRubberBandSelectionMode(int mode);
void QGraphicsView.setScene(QGraphicsScene scene);
void QGraphicsView.setSceneRect(QRectF rect);
//void QGraphicsView.setSceneRect(float x, float y, float w, float h);
void QGraphicsView.setTransform(QTransform matrix, boolean combine);
void QGraphicsView.setTransformationAnchor(int anchor);
void QGraphicsView.setViewportUpdateMode(int mode);
void QGraphicsView.shear(float sh, float sv);
QTransform QGraphicsView.getTransform();
int QGraphicsView.getTransformationAnchor();
void QGraphicsView.translate(float dx, float dy);
QTransform QGraphicsView.viewportTransform();
int QGraphicsView.getViewportUpdateMode();
void QGraphicsView.invalidateScene(QRectF rect, int layers);
void QGraphicsView.updateScene(Array<QRectF> rects);
void QGraphicsView.updateSceneRect(QRectF rect);
@Override @Virtual void QGraphicsView.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsView.signalConnect(String signal_name, dynamic callback_func);

QPainterPath QPainterPath.new();
//QPainterPath QPainterPath.new(QPointF startPoint);
//QPainterPath QPainterPath.new(QPainterPath path);
void QPainterPath.addEllipse(QRectF boundingRectangle);
//void QPainterPath.addEllipse(float x, float y, float width, float height);
//void QPainterPath.addEllipse(QPointF center, float rx, float ry);
void QPainterPath.addPath(QPainterPath path);
void QPainterPath.addPolygon(QPolygonF polygon);
void QPainterPath.addRect(QRectF rectangle);
//void QPainterPath.addRect(float x, float y, float width, float height);
void QPainterPath.addRegion(QRegion region);
void QPainterPath.addRoundedRect(QRectF rect, float xRadius, float yRadius, int mode);
//void QPainterPath.addRoundedRect(float x, float y, float w, float h, float xRadius, float yRadius, int mode);
void QPainterPath.addText(QPointF point, QFont font, String text);
//void QPainterPath.addText(float x, float y, QFont font, String text);
float QPainterPath.angleAtPercent(float t);
void QPainterPath.arcMoveTo(QRectF rectangle, float angle);
//void QPainterPath.arcMoveTo(float x, float y, float width, float height, float angle);
void QPainterPath.arcTo(QRectF rectangle, float startAngle, float sweepLength);
//void QPainterPath.arcTo(float x, float y, float width, float height, float startAngle, float sweepLength);
QRectF QPainterPath.boundingRect();
void QPainterPath.closeSubpath();
void QPainterPath.connectPath(QPainterPath path);
boolean QPainterPath.contains(QPointF point);
//boolean QPainterPath.contains(QRectF rectangle);
//boolean QPainterPath.contains(QPainterPath p);
QRectF QPainterPath.controlPointRect();
void QPainterPath.cubicTo(QPointF c1, QPointF c2, QPointF endPoint);
//void QPainterPath.cubicTo(float c1X, float c1Y, float c2X, float c2Y, float endPointX, float endPointY);
QPointF QPainterPath.currentPosition();
int QPainterPath.elementCount();
int QPainterPath.getFillRule();
QPainterPath QPainterPath.intersected(QPainterPath p);
boolean QPainterPath.intersects(QRectF rectangle);
//boolean QPainterPath.intersects(QPainterPath p);
boolean QPainterPath.isEmpty();
float QPainterPath.length();
void QPainterPath.lineTo(QPointF endPoint);
//void QPainterPath.lineTo(float x, float y);
void QPainterPath.moveTo(QPointF point);
//void QPainterPath.moveTo(float x, float y);
float QPainterPath.percentAtLength(float len);
QPointF QPainterPath.pointAtPercent(float t);
void QPainterPath.quadTo(QPointF c, QPointF endPoint);
//void QPainterPath.quadTo(float cx, float cy, float endPointX, float endPointY);
void QPainterPath.setElementPositionAt(int index, float x, float y);
void QPainterPath.setFillRule(int fillRule);
QPainterPath QPainterPath.simplified();
float QPainterPath.slopeAtPercent(float t);
QPainterPath QPainterPath.subtracted(QPainterPath p);
QPolygonF QPainterPath.toFillPolygon(QTransform matrix);
//QPolygonF QPainterPath.toFillPolygon(QMatrix matrix);
Array<QPolygonF> QPainterPath.toFillPolygons(QTransform matrix);
//Array<QPolygonF> QPainterPath.toFillPolygons(QMatrix matrix);
QPainterPath QPainterPath.toReversed();
Array<QPolygonF> QPainterPath.toSubpathPolygons(QTransform matrix);
//Array<QPolygonF> QPainterPath.toSubpathPolygons(QMatrix matrix);
void QPainterPath.translate(float dx, float dy);
//void QPainterPath.translate(QPointF offset);
QPainterPath QPainterPath.translated(float dx, float dy);
//QPainterPath QPainterPath.translated(QPointF offset);
QPainterPath QPainterPath.united(QPainterPath p);
@Virtual void QPainterPath.addEvent(String event_name, dynamic callback_func);
@Virtual void QPainterPath.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPainterPath.parents();

QGraphicsScene QGraphicsScene.new(QObject parent);
//QGraphicsScene QGraphicsScene.new(QRectF sceneRect, QObject parent);
//QGraphicsScene QGraphicsScene.new(float x, float y, float width, float height, QObject parent);
QGraphicsItem QGraphicsScene.getActivePanel();
QGraphicsWidget QGraphicsScene.getActiveWindow();
QGraphicsEllipseItem QGraphicsScene.addEllipse(QRectF rect, QPen pen, QBrush brush);
//QGraphicsEllipseItem QGraphicsScene.addEllipse(float x, float y, float w, float h, QPen pen, QBrush brush);
void QGraphicsScene.addItem(QGraphicsItem item);
QGraphicsLineItem QGraphicsScene.addLine(QLineF line, QPen pen);
//QGraphicsLineItem QGraphicsScene.addLine(float x1, float y1, float x2, float y2, QPen pen);
QGraphicsPathItem QGraphicsScene.addPath(QPainterPath path, QPen pen, QBrush brush);
QGraphicsPixmapItem QGraphicsScene.addPixmap(QPixmap pixmap);
QGraphicsPolygonItem QGraphicsScene.addPolygon(QPolygonF polygon, QPen pen, QBrush brush);
QGraphicsRectItem QGraphicsScene.addRect(QRectF rect, QPen pen, QBrush brush);
//QGraphicsRectItem QGraphicsScene.addRect(float x, float y, float w, float h, QPen pen, QBrush brush);
QGraphicsSimpleTextItem QGraphicsScene.addSimpleText(String text, QFont font);
QGraphicsTextItem QGraphicsScene.addText(String text, QFont font);
QGraphicsProxyWidget QGraphicsScene.addWidget(QWidget widget, QtWindowFlags wFlags);
QBrush QGraphicsScene.getBackgroundBrush();
int QGraphicsScene.getBspTreeDepth();
void QGraphicsScene.clearFocus();
Array<QGraphicsItem> QGraphicsScene.collidingItems(QGraphicsItem item, int mode);
QGraphicsItemGroup QGraphicsScene.createItemGroup(Array<QGraphicsItem> items);
void QGraphicsScene.destroyItemGroup(QGraphicsItemGroup group);
QGraphicsItem QGraphicsScene.getFocusItem();
QFont QGraphicsScene.getFont();
QBrush QGraphicsScene.getForegroundBrush();
boolean QGraphicsScene.hasFocus();
float QGraphicsScene.height();
@Virtual QVariant QGraphicsScene.inputMethodQuery(int query);
void QGraphicsScene.invalidate(float x, float y, float w, float h, QGraphicsSceneSceneLayers layers);
boolean QGraphicsScene.isActive();
boolean QGraphicsScene.isSortCacheEnabled();
QGraphicsItem QGraphicsScene.itemAt(QPointF position, QTransform deviceTransform);
//QGraphicsItem QGraphicsScene.itemAt(float x, float y, QTransform deviceTransform);
int QGraphicsScene.getItemIndexMethod();
Array<QGraphicsItem> QGraphicsScene.items();
//Array<QGraphicsItem> QGraphicsScene.items(int order);
//Array<QGraphicsItem> QGraphicsScene.items(QPointF pos, int mode, int order, QTransform deviceTransform);
//Array<QGraphicsItem> QGraphicsScene.items(float x, float y, float w, float h, int mode, int order, QTransform deviceTransform);
//Array<QGraphicsItem> QGraphicsScene.items(QRectF rect, int mode, int order, QTransform deviceTransform);
//Array<QGraphicsItem> QGraphicsScene.items(QPolygonF polygon, int mode, int order, QTransform deviceTransform);
//Array<QGraphicsItem> QGraphicsScene.items(QPainterPath path, int mode, int order, QTransform deviceTransform);
QRectF QGraphicsScene.itemsBoundingRect();
QGraphicsItem QGraphicsScene.mouseGrabberItem();
QPalette QGraphicsScene.getPalette();
void QGraphicsScene.removeItem(QGraphicsItem item);
void QGraphicsScene.render(QPainter painter, QRectF target, QRectF source, int aspectRatioMode);
QRectF QGraphicsScene.getSceneRect();
Array<QGraphicsItem> QGraphicsScene.selectedItems();
QPainterPath QGraphicsScene.getSelectionArea();
boolean QGraphicsScene.sendEvent(QGraphicsItem item, QEvent event);
void QGraphicsScene.setActivePanel(QGraphicsItem item);
void QGraphicsScene.setActiveWindow(QGraphicsWidget widget);
void QGraphicsScene.setBackgroundBrush(QBrush brush);
void QGraphicsScene.setBackgroundGradientBrush(QGradient grad);
void QGraphicsScene.setBspTreeDepth(int depth);
void QGraphicsScene.setFocus(int focusReason);
void QGraphicsScene.setFocusItem(QGraphicsItem item, int focusReason);
void QGraphicsScene.setFont(QFont font);
void QGraphicsScene.setForegroundBrush(QBrush brush);
void QGraphicsScene.setItemIndexMethod(int method);
void QGraphicsScene.setPalette(QPalette palette);
void QGraphicsScene.setSceneRect(QRectF rect);
//void QGraphicsScene.setSceneRect(float x, float y, float w, float h);
void QGraphicsScene.setSelectionArea(QPainterPath path, QTransform deviceTransform);
//void QGraphicsScene.setSelectionArea(QPainterPath path, int mode, QTransform deviceTransform);
void QGraphicsScene.setSortCacheEnabled(boolean enabled);
void QGraphicsScene.setStickyFocus(boolean enabled);
void QGraphicsScene.setStyle(QStyle style);
boolean QGraphicsScene.getStickyFocus();
QStyle QGraphicsScene.getStyle();
void QGraphicsScene.update(float x, float y, float w, float h);
Array<QGraphicsView> QGraphicsScene.views();
float QGraphicsScene.width();
void QGraphicsScene.advance();
void QGraphicsScene.clear();
void QGraphicsScene.clearSelection();
//void QGraphicsScene.invalidate(QRectF rect, QGraphicsSceneSceneLayers layers);
//void QGraphicsScene.update(QRectF rect);
@Override @Virtual void QGraphicsScene.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsScene.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QStylePlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QStylePlugin.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMutableSetIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QMutableSetIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMutableSetIterator.parents();

QUuid QUuid.new();
//QUuid QUuid.new(int l, int w1, int w2, String b1, String b2, String b3, String b4, String b5, String b6, String b7, String b8);
//QUuid QUuid.new(String text);
//QUuid QUuid.new(GUID guid);
String QUuid.toString();
int QUuid.variant();
int QUuid.version();
QUuid QUuid.createUuid();
@Virtual void QUuid.addEvent(String event_name, dynamic callback_func);
@Virtual void QUuid.signalConnect(String signal_name, dynamic callback_func);
Array<String> QUuid.parents();

QWidget QGraphicsSceneEvent.widget();
@Override @Virtual void QGraphicsSceneEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsSceneEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMenuItem.addEvent(String event_name, dynamic callback_func);
@Virtual void QMenuItem.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QVariant QAbstractProxyModel.getData(QModelIndex proxyIndex, int role);
@Virtual @Override QtItemFlags QAbstractProxyModel.flags(QModelIndex index);
@Virtual @Override QVariant QAbstractProxyModel.getHeaderData(int section, int orientation, int role);
@Virtual @Override void QAbstractProxyModel.revert();
@Virtual @Override boolean QAbstractProxyModel.setData(QModelIndex index, QVariant value, int role);
@Virtual @Override boolean QAbstractProxyModel.setHeaderData(int section, int orientation, QVariant value, int role);
@Virtual @Override boolean QAbstractProxyModel.submit();
@Virtual QModelIndex QAbstractProxyModel.mapFromSource(QModelIndex sourceIndex);
@Virtual QItemSelection QAbstractProxyModel.mapSelectionFromSource(QItemSelection sourceSelection);
@Virtual QItemSelection QAbstractProxyModel.mapSelectionToSource(QItemSelection proxySelection);
@Virtual QModelIndex QAbstractProxyModel.mapToSource(QModelIndex proxyIndex);
@Virtual void QAbstractProxyModel.setSourceModel(QAbstractItemModel sourceModel);
QAbstractItemModel QAbstractProxyModel.getSourceModel();
@Override @Virtual void QAbstractProxyModel.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractProxyModel.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QModelIndex QTableView.indexAt(QPoint pos);
@Virtual @Override void QTableView.setModel(QAbstractItemModel model);
@Virtual @Override void QTableView.setRootIndex(QModelIndex index);
@Virtual @Override void QTableView.setSelectionModel(QItemSelectionModel selectionModel);
QTableView QTableView.new(QWidget parent);
void QTableView.clearSpans();
int QTableView.columnAt(int x);
int QTableView.columnSpan(int row, int column);
int QTableView.columnViewportPosition(int column);
int QTableView.getColumnWidth(int column);
int QTableView.getGridStyle();
QHeaderView QTableView.getHorizontalHeader();
boolean QTableView.isColumnHidden(int column);
boolean QTableView.isCornerButtonEnabled();
boolean QTableView.isRowHidden(int row);
boolean QTableView.isSortingEnabled();
int QTableView.rowAt(int y);
int QTableView.getRowHeight(int row);
int QTableView.rowSpan(int row, int column);
int QTableView.rowViewportPosition(int row);
void QTableView.setColumnHidden(int column, boolean hide);
void QTableView.setColumnWidth(int column, int width);
void QTableView.setCornerButtonEnabled(boolean enable);
void QTableView.setGridStyle(int style);
void QTableView.setHorizontalHeader(QHeaderView header);
void QTableView.setRowHeight(int row, int height);
void QTableView.setRowHidden(int row, boolean hide);
void QTableView.setSortingEnabled(boolean enable);
void QTableView.setSpan(int row, int column, int rowSpanCount, int columnSpanCount);
void QTableView.setVerticalHeader(QHeaderView header);
void QTableView.setWordWrap(boolean on);
boolean QTableView.getShowGrid();
void QTableView.sortByColumn(int column, int order);
QHeaderView QTableView.getVerticalHeader();
boolean QTableView.getWordWrap();
void QTableView.hideColumn(int column);
void QTableView.hideRow(int row);
void QTableView.resizeColumnToContents(int column);
void QTableView.resizeColumnsToContents();
void QTableView.resizeRowToContents(int row);
void QTableView.resizeRowsToContents();
void QTableView.selectColumn(int column);
void QTableView.selectRow(int row);
void QTableView.setShowGrid(boolean show);
void QTableView.showColumn(int column);
void QTableView.showRow(int row);
@Override @Virtual void QTableView.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTableView.signalConnect(String signal_name, dynamic callback_func);

QKeyEventTransition QKeyEventTransition.new(QState sourceState);
//QKeyEventTransition QKeyEventTransition.new(QObject object, int type, int key, QState sourceState);
int QKeyEventTransition.getKey();
QtKeyboardModifiers QKeyEventTransition.getModifierMask();
void QKeyEventTransition.setKey(int key);
void QKeyEventTransition.setModifierMask(QtKeyboardModifiers modifierMask);
@Override @Virtual void QKeyEventTransition.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QKeyEventTransition.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFileInfo.addEvent(String event_name, dynamic callback_func);
@Virtual void QFileInfo.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFileInfo.parents();

@Virtual void QItemSelectionModel.addEvent(String event_name, dynamic callback_func);
@Virtual void QItemSelectionModel.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFontEngineInfo.addEvent(String event_name, dynamic callback_func);
@Virtual void QFontEngineInfo.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFontEngineInfo.parents();

QStyleOptionToolBox QStyleOptionToolBox.new();
//QStyleOptionToolBox QStyleOptionToolBox.new(QStyleOptionToolBox other);
@Override @Virtual void QStyleOptionToolBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionToolBox.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFutureWatcher.addEvent(String event_name, dynamic callback_func);
@Virtual void QFutureWatcher.signalConnect(String signal_name, dynamic callback_func);

QDrag QDrag.new(QWidget dragSource);
int QDrag.exec(QtDropActions supportedActions);
//int QDrag.exec(QtDropActions supportedActions, int defaultDropAction);
QPoint QDrag.getHotSpot();
QMimeData QDrag.getMimeData();
QPixmap QDrag.getPixmap();
void QDrag.setDragCursor(QPixmap cursor, int action);
void QDrag.setHotSpot(QPoint hotspot);
void QDrag.setMimeData(QMimeData data);
void QDrag.setPixmap(QPixmap pixmap);
QWidget QDrag.source();
QWidget QDrag.target();
@Override @Virtual void QDrag.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDrag.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QCalendarWidget.minimumSizeHint();
@Virtual @Override QSize QCalendarWidget.sizeHint();
QCalendarWidget QCalendarWidget.new(QWidget parent);
int QCalendarWidget.getDateEditAcceptDelay();
QTextCharFormat QCalendarWidget.getDateTextFormat(QDate date);
int QCalendarWidget.getFirstDayOfWeek();
QTextCharFormat QCalendarWidget.getHeaderTextFormat();
int QCalendarWidget.getHorizontalHeaderFormat();
boolean QCalendarWidget.isDateEditEnabled();
boolean QCalendarWidget.isGridVisible();
boolean QCalendarWidget.isNavigationBarVisible();
QDate QCalendarWidget.getMaximumDate();
QDate QCalendarWidget.getMinimumDate();
int QCalendarWidget.monthShown();
QDate QCalendarWidget.getSelectedDate();
int QCalendarWidget.getSelectionMode();
void QCalendarWidget.setDateEditAcceptDelay(int delay);
void QCalendarWidget.setDateEditEnabled(boolean enable);
void QCalendarWidget.setDateTextFormat(QDate date, QTextCharFormat fmt);
void QCalendarWidget.setFirstDayOfWeek(int dayOfWeek);
void QCalendarWidget.setHeaderTextFormat(QTextCharFormat fmt);
void QCalendarWidget.setHorizontalHeaderFormat(int fmt);
void QCalendarWidget.setMaximumDate(QDate date);
void QCalendarWidget.setMinimumDate(QDate date);
void QCalendarWidget.setSelectionMode(int mode);
void QCalendarWidget.setVerticalHeaderFormat(int fmt);
void QCalendarWidget.setWeekdayTextFormat(int dayOfWeek, QTextCharFormat fmt);
int QCalendarWidget.getVerticalHeaderFormat();
QTextCharFormat QCalendarWidget.getWeekdayTextFormat(int dayOfWeek);
int QCalendarWidget.yearShown();
void QCalendarWidget.setCurrentPage(int year, int month);
void QCalendarWidget.setDateRange(QDate min, QDate max);
void QCalendarWidget.setGridVisible(boolean show);
void QCalendarWidget.setNavigationBarVisible(boolean visible);
void QCalendarWidget.setSelectedDate(QDate date);
void QCalendarWidget.showNextMonth();
void QCalendarWidget.showNextYear();
void QCalendarWidget.showPreviousMonth();
void QCalendarWidget.showPreviousYear();
void QCalendarWidget.showSelectedDate();
void QCalendarWidget.showToday();
@Override @Virtual void QCalendarWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QCalendarWidget.signalConnect(String signal_name, dynamic callback_func);

QPolygonF QPolygonF.new();
//QPolygonF QPolygonF.new(int size);
//QPolygonF QPolygonF.new(QPolygonF polygon);
//QPolygonF QPolygonF.new(QRectF rectangle);
//QPolygonF QPolygonF.new(QPolygon polygon);
QRectF QPolygonF.boundingRect();
boolean QPolygonF.containsPoint(QPointF point, int fillRule);
QPolygonF QPolygonF.intersected(QPolygonF r);
boolean QPolygonF.isClosed();
QPolygonF QPolygonF.subtracted(QPolygonF r);
QPolygon QPolygonF.toPolygon();
void QPolygonF.translate(QPointF offset);
//void QPolygonF.translate(float dx, float dy);
QPolygonF QPolygonF.translated(QPointF offset);
//QPolygonF QPolygonF.translated(float dx, float dy);
QPolygonF QPolygonF.united(QPolygonF r);
@Override @Virtual void QPolygonF.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPolygonF.signalConnect(String signal_name, dynamic callback_func);

void QPolygonF.append(QPointF value);
QRectF QGraphicsEffect.boundingRect();
@Virtual QRectF QGraphicsEffect.boundingRectFor(QRectF rect);
boolean QGraphicsEffect.isEnabled();
void QGraphicsEffect.setEnabled(boolean enable);
void QGraphicsEffect.update();
@Override @Virtual void QGraphicsEffect.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsEffect.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWSServer.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSServer.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWSScreenSaver.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSScreenSaver.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWSScreenSaver.parents();

QCursor QCursor.new();
//QCursor QCursor.new(int shape);
//QCursor QCursor.new(QBitmap bitmap, QBitmap mask, int hotX, int hotY);
//QCursor QCursor.new(QPixmap pixmap, int hotX, int hotY);
//QCursor QCursor.new(QCursor c);
//QCursor QCursor.new(HCURSOR cursor);
QBitmap QCursor.bitmap();
QPoint QCursor.hotSpot();
QBitmap QCursor.mask();
QPixmap QCursor.pixmap();
void QCursor.setShape(int shape);
int QCursor.getShape();
QPoint QCursor.getPos();
void QCursor.setPos(int x, int y);
//void QCursor.setPos(QPoint p);
@Virtual void QCursor.addEvent(String event_name, dynamic callback_func);
@Virtual void QCursor.signalConnect(String signal_name, dynamic callback_func);
Array<String> QCursor.parents();

boolean QAbstractSlider.hasTracking();
boolean QAbstractSlider.getInvertedAppearance();
boolean QAbstractSlider.getInvertedControls();
boolean QAbstractSlider.isSliderDown();
int QAbstractSlider.getMaximum();
int QAbstractSlider.getMinimum();
int QAbstractSlider.getOrientation();
int QAbstractSlider.getPageStep();
void QAbstractSlider.setInvertedAppearance(boolean arg0);
void QAbstractSlider.setInvertedControls(boolean arg0);
void QAbstractSlider.setMaximum(int arg0);
void QAbstractSlider.setMinimum(int arg0);
void QAbstractSlider.setPageStep(int arg0);
void QAbstractSlider.setRange(int min, int max);
void QAbstractSlider.setSingleStep(int arg0);
void QAbstractSlider.setSliderDown(boolean arg0);
void QAbstractSlider.setSliderPosition(int arg0);
void QAbstractSlider.setTracking(boolean enable);
int QAbstractSlider.getSingleStep();
int QAbstractSlider.getSliderPosition();
void QAbstractSlider.triggerAction(int action);
int QAbstractSlider.getValue();
void QAbstractSlider.setOrientation(int arg0);
void QAbstractSlider.setValue(int arg0);
@Override @Virtual void QAbstractSlider.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractSlider.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMouseDriverFactory.addEvent(String event_name, dynamic callback_func);
@Virtual void QMouseDriverFactory.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMouseDriverFactory.parents();

@Virtual @Override int QRegExpValidator.validate(String input, int pos);
QRegExpValidator QRegExpValidator.new(QObject parent);
//QRegExpValidator QRegExpValidator.new(QRegExp rx, QObject parent);
QRegExp QRegExpValidator.getRegExp();
void QRegExpValidator.setRegExp(QRegExp rx);
@Override @Virtual void QRegExpValidator.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QRegExpValidator.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QAbstractTableModel.dropMimeData(QMimeData data, int action, int row, int column, QModelIndex parent);
@Virtual @Override QModelIndex QAbstractTableModel.index(int row, int column, QModelIndex parent);
@Override @Virtual void QAbstractTableModel.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractTableModel.signalConnect(String signal_name, dynamic callback_func);

QNetworkProxy QNetworkProxy.new();
//QNetworkProxy QNetworkProxy.new(int type, String hostName, int port, String user, String password);
//QNetworkProxy QNetworkProxy.new(QNetworkProxy other);
QNetworkProxyCapabilities QNetworkProxy.getCapabilities();
String QNetworkProxy.getHostName();
boolean QNetworkProxy.isCachingProxy();
boolean QNetworkProxy.isTransparentProxy();
String QNetworkProxy.getPassword();
int QNetworkProxy.getPort();
void QNetworkProxy.setCapabilities(QNetworkProxyCapabilities capabilities);
void QNetworkProxy.setHostName(String hostName);
void QNetworkProxy.setPassword(String password);
void QNetworkProxy.setPort(int port);
void QNetworkProxy.setType(int type);
void QNetworkProxy.setUser(String user);
int QNetworkProxy.getType();
String QNetworkProxy.getUser();
QNetworkProxy QNetworkProxy.getApplicationProxy();
void QNetworkProxy.setApplicationProxy(QNetworkProxy networkProxy);
@Virtual void QNetworkProxy.addEvent(String event_name, dynamic callback_func);
@Virtual void QNetworkProxy.signalConnect(String signal_name, dynamic callback_func);
Array<String> QNetworkProxy.parents();

@Virtual void QExplicitlySharedDataPointer.addEvent(String event_name, dynamic callback_func);
@Virtual void QExplicitlySharedDataPointer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QExplicitlySharedDataPointer.parents();

QLibrary QLibrary.new(QObject parent);
//QLibrary QLibrary.new(String fileName, QObject parent);
//QLibrary QLibrary.new(String fileName, int verNum, QObject parent);
//QLibrary QLibrary.new(String fileName, String version, QObject parent);
String QLibrary.errorString();
String QLibrary.getFileName();
boolean QLibrary.isLoaded();
boolean QLibrary.load();
QLibraryLoadHints QLibrary.getLoadHints();
void QLibrary.resolve(String symbol);
void QLibrary.setFileName(String fileName);
void QLibrary.setFileNameAndVersion(String fileName, int versionNumber);
//void QLibrary.setFileNameAndVersion(String fileName, String version);
void QLibrary.setLoadHints(QLibraryLoadHints hints);
boolean QLibrary.unload();
boolean QLibrary.isLibrary(String fileName);
//void QLibrary.resolve(String fileName, String symbol);
//void QLibrary.resolve(String fileName, int verNum, String symbol);
//void QLibrary.resolve(String fileName, String version, String symbol);
@Override @Virtual void QLibrary.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QLibrary.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QStringMatcher.addEvent(String event_name, dynamic callback_func);
@Virtual void QStringMatcher.signalConnect(String signal_name, dynamic callback_func);
Array<String> QStringMatcher.parents();

QStatusBar QStatusBar.new(QWidget parent);
void QStatusBar.addPermanentWidget(QWidget widget, int stretch);
void QStatusBar.addWidget(QWidget widget, int stretch);
String QStatusBar.currentMessage();
int QStatusBar.insertPermanentWidget(int index, QWidget widget, int stretch);
int QStatusBar.insertWidget(int index, QWidget widget, int stretch);
boolean QStatusBar.isSizeGripEnabled();
void QStatusBar.removeWidget(QWidget widget);
void QStatusBar.setSizeGripEnabled(boolean arg0);
void QStatusBar.clearMessage();
void QStatusBar.showMessage(String message, int timeout);
@Override @Virtual void QStatusBar.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStatusBar.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QScreen.addEvent(String event_name, dynamic callback_func);
@Virtual void QScreen.signalConnect(String signal_name, dynamic callback_func);
Array<String> QScreen.parents();

@Virtual @Override QSize QToolButton.minimumSizeHint();
@Virtual @Override QSize QToolButton.sizeHint();
QToolButton QToolButton.new(QWidget parent);
int QToolButton.getArrowType();
boolean QToolButton.getAutoRaise();
QMenu QToolButton.getMenu();
int QToolButton.getPopupMode();
void QToolButton.setArrowType(int type);
void QToolButton.setAutoRaise(boolean enable);
void QToolButton.setMenu(QMenu menu);
void QToolButton.setPopupMode(int mode);
int QToolButton.getToolButtonStyle();
void QToolButton.setToolButtonStyle(int style);
void QToolButton.showMenu();
@Override @Virtual void QToolButton.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QToolButton.signalConnect(String signal_name, dynamic callback_func);

QKeyEvent QKeyEvent.new(int type, int key, QtKeyboardModifiers modifiers, String text, boolean autorep, int count);
int QKeyEvent.count();
boolean QKeyEvent.isAutoRepeat();
int QKeyEvent.key();
boolean QKeyEvent.matches(int key);
QtKeyboardModifiers QKeyEvent.modifiers();
int QKeyEvent.nativeModifiers();
int QKeyEvent.nativeScanCode();
int QKeyEvent.nativeVirtualKey();
String QKeyEvent.text();
@Override @Virtual void QKeyEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QKeyEvent.signalConnect(String signal_name, dynamic callback_func);

boolean QAbstractButton.getAutoExclusive();
boolean QAbstractButton.getAutoRepeat();
int QAbstractButton.getAutoRepeatDelay();
int QAbstractButton.getAutoRepeatInterval();
QButtonGroup QAbstractButton.group();
QIcon QAbstractButton.getIcon();
QSize QAbstractButton.getIconSize();
boolean QAbstractButton.isCheckable();
boolean QAbstractButton.isChecked();
boolean QAbstractButton.isDown();
void QAbstractButton.setAutoExclusive(boolean arg0);
void QAbstractButton.setAutoRepeat(boolean arg0);
void QAbstractButton.setAutoRepeatDelay(int arg0);
void QAbstractButton.setAutoRepeatInterval(int arg0);
void QAbstractButton.setCheckable(boolean arg0);
void QAbstractButton.setDown(boolean arg0);
void QAbstractButton.setIcon(QIcon icon);
void QAbstractButton.setShortcut(QKeySequence key);
void QAbstractButton.setText(String text);
QKeySequence QAbstractButton.getShortcut();
String QAbstractButton.getText();
void QAbstractButton.animateClick(int msec);
void QAbstractButton.click();
void QAbstractButton.setChecked(boolean arg0);
void QAbstractButton.setIconSize(QSize size);
void QAbstractButton.toggle();
@Override @Virtual void QAbstractButton.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractButton.signalConnect(String signal_name, dynamic callback_func);

QErrorMessage QErrorMessage.new(QWidget parent);
QErrorMessage QErrorMessage.qtHandler();
void QErrorMessage.showMessage(String message);
//void QErrorMessage.showMessage(String message, String type);
@Override @Virtual void QErrorMessage.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QErrorMessage.signalConnect(String signal_name, dynamic callback_func);

QNetworkCookieJar QNetworkCookieJar.new(QObject parent);
@Virtual Array<QNetworkCookie> QNetworkCookieJar.cookiesForUrl(QUrl url);
@Virtual boolean QNetworkCookieJar.setCookiesFromUrl(Array<QNetworkCookie> cookieList, QUrl url);
@Override @Virtual void QNetworkCookieJar.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QNetworkCookieJar.signalConnect(String signal_name, dynamic callback_func);

@Virtual boolean QPaintEngine.begin(QPaintDevice pdev);
@Virtual void QPaintEngine.drawEllipse(QRectF rect);
//@Virtual void QPaintEngine.drawEllipse(QRect rect);
@Virtual void QPaintEngine.drawImage(QRectF rectangle, QImage image, QRectF sr, QtImageConversionFlags flags);
@Virtual void QPaintEngine.drawLines(QLineF lines, int lineCount);
//@Virtual void QPaintEngine.drawLines(QLine lines, int lineCount);
@Virtual void QPaintEngine.drawPath(QPainterPath path);
@Virtual void QPaintEngine.drawPixmap(QRectF r, QPixmap pm, QRectF sr);
@Virtual void QPaintEngine.drawPoints(QPointF points, int pointCount);
//@Virtual void QPaintEngine.drawPoints(QPoint points, int pointCount);
@Virtual void QPaintEngine.drawPolygon(QPointF points, int pointCount, int mode);
//@Virtual void QPaintEngine.drawPolygon(QPoint points, int pointCount, int mode);
@Virtual void QPaintEngine.drawRects(QRectF rects, int rectCount);
//@Virtual void QPaintEngine.drawRects(QRect rects, int rectCount);
@Virtual void QPaintEngine.drawTextItem(QPointF p, QTextItem textItem);
@Virtual void QPaintEngine.drawTiledPixmap(QRectF rect, QPixmap pixmap, QPointF p);
@Virtual boolean QPaintEngine.end();
boolean QPaintEngine.hasFeature(QPaintEnginePaintEngineFeatures feature);
boolean QPaintEngine.isActive();
QPaintDevice QPaintEngine.paintDevice();
QPainter QPaintEngine.painter();
void QPaintEngine.setActive(boolean state);
@Virtual int QPaintEngine.type();
@Virtual void QPaintEngine.updateState(QPaintEngineState state);
@Virtual void QPaintEngine.addEvent(String event_name, dynamic callback_func);
@Virtual void QPaintEngine.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPaintEngine.parents();

QRectF QGraphicsLayoutItem.contentsRect();
QSizeF QGraphicsLayoutItem.effectiveSizeHint(int which, QSizeF constraint);
QRectF QGraphicsLayoutItem.getGeometry();
@Virtual void QGraphicsLayoutItem.getContentsMargins(float left, float top, float right, float bottom);
QGraphicsItem QGraphicsLayoutItem.graphicsItem();
boolean QGraphicsLayoutItem.isLayout();
float QGraphicsLayoutItem.getMaximumHeight();
QSizeF QGraphicsLayoutItem.getMaximumSize();
float QGraphicsLayoutItem.getMaximumWidth();
float QGraphicsLayoutItem.getMinimumHeight();
QSizeF QGraphicsLayoutItem.getMinimumSize();
float QGraphicsLayoutItem.getMinimumWidth();
boolean QGraphicsLayoutItem.ownedByLayout();
QGraphicsLayoutItem QGraphicsLayoutItem.getParentLayoutItem();
float QGraphicsLayoutItem.getPreferredHeight();
QSizeF QGraphicsLayoutItem.getPreferredSize();
float QGraphicsLayoutItem.getPreferredWidth();
@Virtual void QGraphicsLayoutItem.setGeometry(QRectF rect);
void QGraphicsLayoutItem.setMaximumHeight(float height);
void QGraphicsLayoutItem.setMaximumSize(QSizeF size);
//void QGraphicsLayoutItem.setMaximumSize(float w, float h);
void QGraphicsLayoutItem.setMaximumWidth(float width);
void QGraphicsLayoutItem.setMinimumHeight(float height);
void QGraphicsLayoutItem.setMinimumSize(QSizeF size);
//void QGraphicsLayoutItem.setMinimumSize(float w, float h);
void QGraphicsLayoutItem.setMinimumWidth(float width);
void QGraphicsLayoutItem.setParentLayoutItem(QGraphicsLayoutItem parent);
void QGraphicsLayoutItem.setPreferredHeight(float height);
void QGraphicsLayoutItem.setPreferredSize(QSizeF size);
//void QGraphicsLayoutItem.setPreferredSize(float w, float h);
void QGraphicsLayoutItem.setPreferredWidth(float width);
void QGraphicsLayoutItem.setSizePolicy(QSizePolicy policy);
//void QGraphicsLayoutItem.setSizePolicy(int hPolicy, int vPolicy, int controlType);
QSizePolicy QGraphicsLayoutItem.getSizePolicy();
@Virtual void QGraphicsLayoutItem.updateGeometry();
@Virtual void QGraphicsLayoutItem.addEvent(String event_name, dynamic callback_func);
@Virtual void QGraphicsLayoutItem.signalConnect(String signal_name, dynamic callback_func);
Array<String> QGraphicsLayoutItem.parents();

String QAbstractTextDocumentLayout.anchorAt(QPointF position);
@Virtual QRectF QAbstractTextDocumentLayout.blockBoundingRect(QTextBlock block);
QTextDocument QAbstractTextDocumentLayout.document();
@Virtual QSizeF QAbstractTextDocumentLayout.documentSize();
@Virtual QRectF QAbstractTextDocumentLayout.frameBoundingRect(QTextFrame frame);
QTextObjectInterface QAbstractTextDocumentLayout.handlerForObject(int objectType);
@Virtual int QAbstractTextDocumentLayout.hitTest(QPointF point, int accuracy);
@Virtual int QAbstractTextDocumentLayout.pageCount();
QPaintDevice QAbstractTextDocumentLayout.getPaintDevice();
void QAbstractTextDocumentLayout.registerHandler(int objectType, QObject component);
void QAbstractTextDocumentLayout.setPaintDevice(QPaintDevice device);
@Override @Virtual void QAbstractTextDocumentLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractTextDocumentLayout.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QThreadStorage.addEvent(String event_name, dynamic callback_func);
@Virtual void QThreadStorage.signalConnect(String signal_name, dynamic callback_func);
Array<String> QThreadStorage.parents();

//@Virtual boolean QIODevice.atEnd();
@Virtual int QIODevice.bytesAvailable();
@Virtual int QIODevice.bytesToWrite();
@Virtual boolean QIODevice.canReadLine();
@Virtual void QIODevice.close();
String QIODevice.errorString();
boolean QIODevice.getChar(String c);
boolean QIODevice.isOpen();
boolean QIODevice.isReadable();
@Virtual boolean QIODevice.isSequential();
boolean QIODevice.isTextModeEnabled();
boolean QIODevice.isWritable();
@Virtual boolean QIODevice.open(QIODeviceOpenMode mode);
QIODeviceOpenMode QIODevice.openMode();
int QIODevice.peek(String data, int maxSize);
//QByteArray QIODevice.peek(int maxSize);
@Virtual int QIODevice.pos();
boolean QIODevice.putChar(String c);
int QIODevice.read(String data, int maxSize);
//QByteArray QIODevice.read(int maxSize);
QByteArray QIODevice.readAll();
int QIODevice.readLine(String data, int maxSize);
//QByteArray QIODevice.readLine(int maxSize);
@Virtual boolean QIODevice.reset();
@Virtual boolean QIODevice.seek(int pos);
void QIODevice.setTextModeEnabled(boolean enabled);
@Virtual int QIODevice.size();
void QIODevice.ungetChar(String c);
@Virtual boolean QIODevice.waitForBytesWritten(int msecs);
@Virtual boolean QIODevice.waitForReadyRead(int msecs);
int QIODevice.write(String data, int maxSize);
//int QIODevice.write(String data);
//int QIODevice.write(QByteArray byteArray);
@Override @Virtual void QIODevice.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QIODevice.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QTextBlockUserData.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextBlockUserData.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextBlockUserData.parents();

QStyleOptionTitleBar QStyleOptionTitleBar.new();
//QStyleOptionTitleBar QStyleOptionTitleBar.new(QStyleOptionTitleBar other);
@Override @Virtual void QStyleOptionTitleBar.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionTitleBar.signalConnect(String signal_name, dynamic callback_func);

QObject QObject.new(QObject parent);
boolean QObject.blockSignals(boolean block);
QObjectList QObject.children();
boolean QObject.connect(QObject sender, String signal, String method, int type);
boolean QObject.disconnect(String signal, QObject receiver, String method);
//boolean QObject.disconnect(QObject receiver, String method);
void QObject.dumpObjectInfo();
void QObject.dumpObjectTree();
Array<QByteArray> QObject.dynamicPropertyNames();
@Virtual boolean QObject.event(QEvent e);
@Virtual boolean QObject.eventFilter(QObject watched, QEvent event);
boolean QObject.inherits(String className);
boolean QObject.isWidgetType();
void QObject.killTimer(int id);
@Virtual QMetaObject QObject.metaObject();
void QObject.moveToThread(QThread targetThread);
String QObject.getObjectName();
QObject QObject.getParent();
QVariant QObject.getProperty(String name);
void QObject.setObjectName(String name);
void QObject.setParent(QObject parent);
boolean QObject.setProperty(String name, QVariant value);
boolean QObject.signalsBlocked();
int QObject.startTimer(int interval);
QThread QObject.thread();
//boolean QObject.connect(QObject sender, String signal, QObject receiver, String method, int type);
//boolean QObject.disconnect(QObject sender, String signal, QObject receiver, String method);
String QObject.tr(String sourceText, String disambiguation, int n);
String QObject.trUtf8(String sourceText, String disambiguation, int n);
void QObject.deleteLater();
@Virtual void QObject.addEvent(String event_name, dynamic callback_func);
@Virtual void QObject.signalConnect(String signal_name, dynamic callback_func);
Array<String> QObject.parents();

int QGradient.getCoordinateMode();
void QGradient.setColorAt(float position, QColor color);
void QGradient.setCoordinateMode(int mode);
void QGradient.setSpread(int method);
void QGradient.setStops(QGradientStops stopPoints);
int QGradient.getSpread();
QGradientStops QGradient.getStops();
int QGradient.type();
@Virtual void QGradient.addEvent(String event_name, dynamic callback_func);
@Virtual void QGradient.signalConnect(String signal_name, dynamic callback_func);
Array<String> QGradient.parents();

QWriteLocker QWriteLocker.new(QReadWriteLock lock);
QReadWriteLock QWriteLocker.readWriteLock();
void QWriteLocker.relock();
void QWriteLocker.unlock();
@Virtual void QWriteLocker.addEvent(String event_name, dynamic callback_func);
@Virtual void QWriteLocker.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWriteLocker.parents();

@Virtual void QFileDialog.addEvent(String event_name, dynamic callback_func);
@Virtual void QFileDialog.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QHash.addEvent(String event_name, dynamic callback_func);
@Virtual void QHash.signalConnect(String signal_name, dynamic callback_func);
Array<String> QHash.parents();

QWaitCondition QWaitCondition.new();
boolean QWaitCondition.wait(QMutex mutex, long time);
//boolean QWaitCondition.wait(QReadWriteLock readWriteLock, long time);
void QWaitCondition.wakeAll();
void QWaitCondition.wakeOne();
@Virtual void QWaitCondition.addEvent(String event_name, dynamic callback_func);
@Virtual void QWaitCondition.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWaitCondition.parents();

QDragMoveEvent QDragMoveEvent.new(QPoint pos, QtDropActions actions, QMimeData data, QtMouseButtons buttons, QtKeyboardModifiers modifiers, int type);
QRect QDragMoveEvent.answerRect();
@Override @Virtual void QDragMoveEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDragMoveEvent.signalConnect(String signal_name, dynamic callback_func);

QWebSecurityOrigin QWebSecurityOrigin.new(QWebSecurityOrigin other);
int QWebSecurityOrigin.getDatabaseQuota();
int QWebSecurityOrigin.databaseUsage();
Array<QWebDatabase> QWebSecurityOrigin.databases();
String QWebSecurityOrigin.host();
int QWebSecurityOrigin.port();
String QWebSecurityOrigin.scheme();
void QWebSecurityOrigin.setDatabaseQuota(int quota);
void QWebSecurityOrigin.addLocalScheme(String scheme);
Array<QWebSecurityOrigin> QWebSecurityOrigin.allOrigins();
void QWebSecurityOrigin.removeLocalScheme(String scheme);
@Virtual void QWebSecurityOrigin.addEvent(String event_name, dynamic callback_func);
@Virtual void QWebSecurityOrigin.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWebSecurityOrigin.parents();

QThreadPool QThreadPool.new(QObject parent);
int QThreadPool.activeThreadCount();
int QThreadPool.getExpiryTimeout();
int QThreadPool.getMaxThreadCount();
void QThreadPool.releaseThread();
void QThreadPool.reserveThread();
void QThreadPool.setExpiryTimeout(int expiryTimeout);
void QThreadPool.setMaxThreadCount(int maxThreadCount);
void QThreadPool.start(QRunnable runnable, int priority);
boolean QThreadPool.tryStart(QRunnable runnable);
void QThreadPool.waitForDone();
QThreadPool QThreadPool.globalInstance();
@Override @Virtual void QThreadPool.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QThreadPool.signalConnect(String signal_name, dynamic callback_func);

QSharedData QSharedData.new();
//QSharedData QSharedData.new(QSharedData other);
@Virtual void QSharedData.addEvent(String event_name, dynamic callback_func);
@Virtual void QSharedData.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSharedData.parents();

@Virtual void QVarLengthArray.addEvent(String event_name, dynamic callback_func);
@Virtual void QVarLengthArray.signalConnect(String signal_name, dynamic callback_func);
Array<String> QVarLengthArray.parents();

QDate QDate.new();
//QDate QDate.new(int y, int m, int d);
QDate QDate.addDays(int ndays);
QDate QDate.addMonths(int nmonths);
QDate QDate.addYears(int nyears);
int QDate.day();
int QDate.dayOfWeek();
int QDate.dayOfYear();
int QDate.daysInMonth();
int QDate.daysInYear();
int QDate.daysTo(QDate d);
void QDate.getDate(int year, int month, int day);
int QDate.month();
boolean QDate.setDate(int year, int month, int day);
int QDate.toJulianDay();
String QDate.toString(String fmt);
//String QDate.toString(int fmt);
int QDate.weekNumber(int yearNumber);
int QDate.year();
QDate QDate.currentDate();
QDate QDate.fromJulianDay(int jd);
QDate QDate.fromString(String str, int fmt);
//QDate QDate.fromString(String str, String fmt);
boolean QDate.isLeapYear(int year);
String QDate.longDayName(int weekday);
//String QDate.longDayName(int weekday, int type);
String QDate.longMonthName(int month);
//String QDate.longMonthName(int month, int type);
String QDate.shortDayName(int weekday);
//String QDate.shortDayName(int weekday, int type);
String QDate.shortMonthName(int month);
//String QDate.shortMonthName(int month, int type);
@Virtual void QDate.addEvent(String event_name, dynamic callback_func);
@Virtual void QDate.signalConnect(String signal_name, dynamic callback_func);
Array<String> QDate.parents();

@Virtual @Override QRectF QGraphicsPolygonItem.boundingRect();
@Virtual @Override boolean QGraphicsPolygonItem.contains(QPointF point);
@Virtual @Override boolean QGraphicsPolygonItem.isObscuredBy(QGraphicsItem item);
@Virtual @Override QPainterPath QGraphicsPolygonItem.opaqueArea();
@Virtual @Override void QGraphicsPolygonItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override QPainterPath QGraphicsPolygonItem.shape();
@Virtual @Override int QGraphicsPolygonItem.type();
QGraphicsPolygonItem QGraphicsPolygonItem.new(QGraphicsItem parent);
//QGraphicsPolygonItem QGraphicsPolygonItem.new(QPolygonF polygon, QGraphicsItem parent);
int QGraphicsPolygonItem.getFillRule();
QPolygonF QGraphicsPolygonItem.getPolygon();
void QGraphicsPolygonItem.setFillRule(int rule);
void QGraphicsPolygonItem.setPolygon(QPolygonF polygon);
@Override @Virtual void QGraphicsPolygonItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsPolygonItem.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QComboBox.event(QEvent event);
@Virtual @Override QSize QComboBox.minimumSizeHint();
@Virtual @Override QSize QComboBox.sizeHint();
QComboBox QComboBox.new(QWidget parent);
void QComboBox.addItem(String text, QVariant userData);
//void QComboBox.addItem(QIcon icon, String text, QVariant userData);
QCompleter QComboBox.getCompleter();
int QComboBox.count();
int QComboBox.getCurrentIndex();
String QComboBox.currentText();
boolean QComboBox.getDuplicatesEnabled();
int QComboBox.findData(QVariant data, int role, QtMatchFlags flags);
int QComboBox.findText(String text, QtMatchFlags flags);
boolean QComboBox.hasFrame();
@Virtual void QComboBox.hidePopup();
QSize QComboBox.getIconSize();
void QComboBox.insertItem(int index, String text, QVariant userData);
//void QComboBox.insertItem(int index, QIcon icon, String text, QVariant userData);
int QComboBox.getInsertPolicy();
void QComboBox.insertSeparator(int index);
boolean QComboBox.isEditable();
QVariant QComboBox.getItemData(int index, int role);
QAbstractItemDelegate QComboBox.getItemDelegate();
QIcon QComboBox.getItemIcon(int index);
String QComboBox.getItemText(int index);
QLineEdit QComboBox.getLineEdit();
int QComboBox.getMaxCount();
int QComboBox.getMaxVisibleItems();
int QComboBox.getMinimumContentsLength();
QAbstractItemModel QComboBox.getModel();
int QComboBox.getModelColumn();
void QComboBox.removeItem(int index);
QModelIndex QComboBox.getRootModelIndex();
void QComboBox.setCompleter(QCompleter completer);
void QComboBox.setDuplicatesEnabled(boolean enable);
void QComboBox.setEditable(boolean editable);
void QComboBox.setFrame(boolean arg0);
void QComboBox.setIconSize(QSize size);
void QComboBox.setInsertPolicy(int policy);
void QComboBox.setItemData(int index, QVariant value, int role);
void QComboBox.setItemDelegate(QAbstractItemDelegate delegate);
void QComboBox.setItemIcon(int index, QIcon icon);
void QComboBox.setItemText(int index, String text);
void QComboBox.setLineEdit(QLineEdit edit);
void QComboBox.setMaxCount(int max);
void QComboBox.setMaxVisibleItems(int maxItems);
void QComboBox.setMinimumContentsLength(int characters);
void QComboBox.setModel(QAbstractItemModel model);
void QComboBox.setModelColumn(int visibleColumn);
void QComboBox.setRootModelIndex(QModelIndex index);
void QComboBox.setSizeAdjustPolicy(int policy);
void QComboBox.setValidator(QValidator validator);
void QComboBox.setView(QAbstractItemView itemView);
@Virtual void QComboBox.showPopup();
int QComboBox.getSizeAdjustPolicy();
QValidator QComboBox.getValidator();
QAbstractItemView QComboBox.getView();
void QComboBox.clear();
void QComboBox.clearEditText();
void QComboBox.setCurrentIndex(int index);
void QComboBox.setEditText(String text);
@Override @Virtual void QComboBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QComboBox.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFontEnginePlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QFontEnginePlugin.signalConnect(String signal_name, dynamic callback_func);

QNetworkRequest QNetworkRequest.new(QUrl url);
//QNetworkRequest QNetworkRequest.new(QNetworkRequest other);
QVariant QNetworkRequest.getAttribute(int code, QVariant defaultValue);
boolean QNetworkRequest.hasRawHeader(QByteArray headerName);
QVariant QNetworkRequest.getHeader(int header);
QObject QNetworkRequest.getOriginatingObject();
int QNetworkRequest.getPriority();
QByteArray QNetworkRequest.getRawHeader(QByteArray headerName);
Array<QByteArray> QNetworkRequest.rawHeaderList();
void QNetworkRequest.setAttribute(int code, QVariant value);
void QNetworkRequest.setHeader(int header, QVariant value);
void QNetworkRequest.setOriginatingObject(QObject object);
void QNetworkRequest.setPriority(int priority);
void QNetworkRequest.setRawHeader(QByteArray headerName, QByteArray headerValue);
void QNetworkRequest.setSslConfiguration(QSslConfiguration config);
void QNetworkRequest.setUrl(QUrl url);
QSslConfiguration QNetworkRequest.getSslConfiguration();
QUrl QNetworkRequest.getUrl();
@Virtual void QNetworkRequest.addEvent(String event_name, dynamic callback_func);
@Virtual void QNetworkRequest.signalConnect(String signal_name, dynamic callback_func);
Array<String> QNetworkRequest.parents();

@Virtual @Override QSize QCheckBox.sizeHint();
QCheckBox QCheckBox.new(QWidget parent);
//QCheckBox QCheckBox.new(String text, QWidget parent);
int QCheckBox.getCheckState();
boolean QCheckBox.isTristate();
void QCheckBox.setCheckState(int state);
void QCheckBox.setTristate(boolean y);
@Override @Virtual void QCheckBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QCheckBox.signalConnect(String signal_name, dynamic callback_func);

QFontMetrics QFontMetrics.new(QFont font);
//QFontMetrics QFontMetrics.new(QFont font, QPaintDevice paintdevice);
//QFontMetrics QFontMetrics.new(QFontMetrics fm);
int QFontMetrics.ascent();
int QFontMetrics.averageCharWidth();
QRect QFontMetrics.boundingRect(QChar ch);
//QRect QFontMetrics.boundingRect(String text);
//QRect QFontMetrics.boundingRect(int x, int y, int width, int height, int flags, String text, int tabStops, int tabArray);
//QRect QFontMetrics.boundingRect(QRect rect, int flags, String text, int tabStops, int tabArray);
int QFontMetrics.descent();
String QFontMetrics.elidedText(String text, int mode, int width, int flags);
int QFontMetrics.height();
boolean QFontMetrics.inFont(QChar ch);
int QFontMetrics.leading();
int QFontMetrics.leftBearing(QChar ch);
int QFontMetrics.lineSpacing();
int QFontMetrics.lineWidth();
int QFontMetrics.maxWidth();
int QFontMetrics.minLeftBearing();
int QFontMetrics.minRightBearing();
int QFontMetrics.overlinePos();
int QFontMetrics.rightBearing(QChar ch);
QSize QFontMetrics.size(int flags, String text, int tabStops, int tabArray);
int QFontMetrics.strikeOutPos();
QRect QFontMetrics.tightBoundingRect(String text);
int QFontMetrics.underlinePos();
int QFontMetrics.width(String text, int len);
//int QFontMetrics.width(QChar ch);
int QFontMetrics.xHeight();
@Virtual void QFontMetrics.addEvent(String event_name, dynamic callback_func);
@Virtual void QFontMetrics.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFontMetrics.parents();

@Virtual @Override QSize QAbstractScrollArea.minimumSizeHint();
@Virtual @Override QSize QAbstractScrollArea.sizeHint();
void QAbstractScrollArea.addScrollBarWidget(QWidget widget, QtAlignment alignment);
QWidget QAbstractScrollArea.getCornerWidget();
QScrollBar QAbstractScrollArea.getHorizontalScrollBar();
int QAbstractScrollArea.getHorizontalScrollBarPolicy();
QSize QAbstractScrollArea.maximumViewportSize();
QWidgetList QAbstractScrollArea.scrollBarWidgets(QtAlignment alignment);
void QAbstractScrollArea.setCornerWidget(QWidget widget);
void QAbstractScrollArea.setHorizontalScrollBar(QScrollBar scrollBar);
void QAbstractScrollArea.setHorizontalScrollBarPolicy(int arg0);
void QAbstractScrollArea.setVerticalScrollBar(QScrollBar scrollBar);
void QAbstractScrollArea.setVerticalScrollBarPolicy(int arg0);
void QAbstractScrollArea.setViewport(QWidget widget);
QScrollBar QAbstractScrollArea.getVerticalScrollBar();
int QAbstractScrollArea.getVerticalScrollBarPolicy();
QWidget QAbstractScrollArea.getViewport();
@Override @Virtual void QAbstractScrollArea.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractScrollArea.signalConnect(String signal_name, dynamic callback_func);

QCloseEvent QCloseEvent.new();
@Override @Virtual void QCloseEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QCloseEvent.signalConnect(String signal_name, dynamic callback_func);

QStylePainter QStylePainter.new();
//QStylePainter QStylePainter.new(QWidget widget);
//QStylePainter QStylePainter.new(QPaintDevice pd, QWidget widget);
boolean QStylePainter.beginOL(QWidget widget);
//boolean QStylePainter.beginOL(QPaintDevice pd, QWidget widget);
void QStylePainter.drawComplexControl(int cc, QStyleOptionComplex option);
void QStylePainter.drawControl(int ce, QStyleOption option);
void QStylePainter.drawItemPixmap(QRect rect, int flags, QPixmap pixmap);
void QStylePainter.drawItemText(QRect rect, int flags, QPalette pal, boolean enabled, String text, int textRole);
void QStylePainter.drawPrimitive(int pe, QStyleOption option);
QStyle QStylePainter.style();
@Override @Virtual void QStylePainter.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStylePainter.signalConnect(String signal_name, dynamic callback_func);

QNetworkAddressEntry QNetworkAddressEntry.new();
//QNetworkAddressEntry QNetworkAddressEntry.new(QNetworkAddressEntry other);
QHostAddress QNetworkAddressEntry.getBroadcast();
QHostAddress QNetworkAddressEntry.getIp();
QHostAddress QNetworkAddressEntry.getNetmask();
int QNetworkAddressEntry.getPrefixLength();
void QNetworkAddressEntry.setBroadcast(QHostAddress new_Broadcast);
void QNetworkAddressEntry.setIp(QHostAddress new_Ip);
void QNetworkAddressEntry.setNetmask(QHostAddress new_Netmask);
void QNetworkAddressEntry.setPrefixLength(int length);
@Virtual void QNetworkAddressEntry.addEvent(String event_name, dynamic callback_func);
@Virtual void QNetworkAddressEntry.signalConnect(String signal_name, dynamic callback_func);
Array<String> QNetworkAddressEntry.parents();

@Virtual @Override QRectF QPlainTextDocumentLayout.blockBoundingRect(QTextBlock block);
@Virtual @Override QSizeF QPlainTextDocumentLayout.documentSize();
@Virtual @Override QRectF QPlainTextDocumentLayout.frameBoundingRect(QTextFrame arg0);
@Virtual @Override int QPlainTextDocumentLayout.hitTest(QPointF arg0, int arg1);
@Virtual @Override int QPlainTextDocumentLayout.pageCount();
QPlainTextDocumentLayout QPlainTextDocumentLayout.new(QTextDocument document);
int QPlainTextDocumentLayout.getCursorWidth();
void QPlainTextDocumentLayout.ensureBlockLayout(QTextBlock block);
void QPlainTextDocumentLayout.requestUpdate();
void QPlainTextDocumentLayout.setCursorWidth(int width);
@Override @Virtual void QPlainTextDocumentLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPlainTextDocumentLayout.signalConnect(String signal_name, dynamic callback_func);

QtAlignment QLayoutItem.getAlignment();
int QLayoutItem.controlTypes();
@Virtual QtOrientations QLayoutItem.expandingDirections();
@Virtual QRect QLayoutItem.getGeometry();
@Virtual boolean QLayoutItem.hasHeightForWidth();
@Virtual int QLayoutItem.heightForWidth(int w);
@Virtual void QLayoutItem.invalidate();
@Virtual boolean QLayoutItem.isEmpty();
@Virtual QLayout QLayoutItem.layout();
@Virtual QSize QLayoutItem.maximumSize();
@Virtual int QLayoutItem.minimumHeightForWidth(int w);
@Virtual QSize QLayoutItem.minimumSize();
void QLayoutItem.setAlignment(QtAlignment alignment);
@Virtual void QLayoutItem.setGeometry(QRect r);
@Virtual QSize QLayoutItem.sizeHint();
@Virtual QSpacerItem QLayoutItem.spacerItem();
@Virtual QWidget QLayoutItem.widget();
@Virtual void QLayoutItem.addEvent(String event_name, dynamic callback_func);
@Virtual void QLayoutItem.signalConnect(String signal_name, dynamic callback_func);
Array<String> QLayoutItem.parents();

QTextTableFormat QTextTableFormat.new();
QtAlignment QTextTableFormat.getAlignment();
float QTextTableFormat.getCellPadding();
float QTextTableFormat.getCellSpacing();
void QTextTableFormat.clearColumnWidthConstraints();
int QTextTableFormat.columns();
int QTextTableFormat.getHeaderRowCount();
void QTextTableFormat.setAlignment(QtAlignment alignment);
void QTextTableFormat.setCellPadding(float padding);
void QTextTableFormat.setCellSpacing(float spacing);
void QTextTableFormat.setHeaderRowCount(int count);
@Override @Virtual void QTextTableFormat.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextTableFormat.signalConnect(String signal_name, dynamic callback_func);

QHelpEvent QHelpEvent.new(int type, QPoint pos, QPoint globalPos);
QPoint QHelpEvent.globalPos();
int QHelpEvent.globalX();
int QHelpEvent.globalY();
QPoint QHelpEvent.pos();
int QHelpEvent.x();
int QHelpEvent.y();
@Override @Virtual void QHelpEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QHelpEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QVariantAnimation.addEvent(String event_name, dynamic callback_func);
@Virtual void QVariantAnimation.signalConnect(String signal_name, dynamic callback_func);

QWizardPage QWizardPage.new(QWidget parent);
String QWizardPage.getButtonText(int which);
@Virtual void QWizardPage.cleanupPage();
@Virtual void QWizardPage.initializePage();
boolean QWizardPage.isCommitPage();
@Virtual boolean QWizardPage.isComplete();
boolean QWizardPage.isFinalPage();
@Virtual int QWizardPage.nextId();
QPixmap QWizardPage.getPixmap(int which);
void QWizardPage.setButtonText(int which, String text);
void QWizardPage.setCommitPage(boolean commitPage);
void QWizardPage.setFinalPage(boolean finalPage);
void QWizardPage.setPixmap(int which, QPixmap pixmap);
void QWizardPage.setSubTitle(String subTitle);
void QWizardPage.setTitle(String title);
String QWizardPage.getSubTitle();
String QWizardPage.getTitle();
@Virtual boolean QWizardPage.validatePage();
@Override @Virtual void QWizardPage.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWizardPage.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QClipboard.addEvent(String event_name, dynamic callback_func);
@Virtual void QClipboard.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWebPluginFactory.addEvent(String event_name, dynamic callback_func);
@Virtual void QWebPluginFactory.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWindowsMime.addEvent(String event_name, dynamic callback_func);
@Virtual void QWindowsMime.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWindowsMime.parents();

int QStyle.combinedLayoutSpacing(int controls1, int controls2, int orientation, QStyleOption option, QWidget widget);
@Virtual void QStyle.drawComplexControl(int control, QStyleOptionComplex option, QPainter painter, QWidget widget);
@Virtual void QStyle.drawControl(int element, QStyleOption option, QPainter painter, QWidget widget);
@Virtual void QStyle.drawItemPixmap(QPainter painter, QRect rectangle, int alignment, QPixmap pixmap);
@Virtual void QStyle.drawItemText(QPainter painter, QRect rectangle, int alignment, QPalette palette, boolean enabled, String text, int textRole);
@Virtual void QStyle.drawPrimitive(int element, QStyleOption option, QPainter painter, QWidget widget);
@Virtual QPixmap QStyle.generatedIconPixmap(int iconMode, QPixmap pixmap, QStyleOption option);
@Virtual int QStyle.hitTestComplexControl(int control, QStyleOptionComplex option, QPoint position, QWidget widget);
@Virtual QRect QStyle.itemPixmapRect(QRect rectangle, int alignment, QPixmap pixmap);
@Virtual QRect QStyle.itemTextRect(QFontMetrics metrics, QRect rectangle, int alignment, boolean enabled, String text);
int QStyle.layoutSpacing(int control1, int control2, int orientation, QStyleOption option, QWidget widget);
@Virtual int QStyle.pixelMetric(int metric, QStyleOption option, QWidget widget);
@Virtual void QStyle.polish(QWidget widget);
//@Virtual void QStyle.polish(QApplication application);
//@Virtual void QStyle.polish(QPalette palette);
QStyle QStyle.proxy();
@Virtual QSize QStyle.sizeFromContents(int type, QStyleOption option, QSize contentsSize, QWidget widget);
QIcon QStyle.standardIcon(int standardIcon, QStyleOption option, QWidget widget);
@Virtual QPalette QStyle.standardPalette();
@Virtual int QStyle.styleHint(int hint, QStyleOption option, QWidget widget, QStyleHintReturn returnData);
@Virtual QRect QStyle.subControlRect(int control, QStyleOptionComplex option, int subControl, QWidget widget);
@Virtual QRect QStyle.subElementRect(int element, QStyleOption option, QWidget widget);
@Virtual void QStyle.unpolish(QWidget widget);
//@Virtual void QStyle.unpolish(QApplication application);
QRect QStyle.alignedRect(int direction, QtAlignment alignment, QSize size, QRect rectangle);
int QStyle.sliderPositionFromValue(int min, int max, int logicalValue, int span, boolean upsideDown);
int QStyle.sliderValueFromPosition(int min, int max, int position, int span, boolean upsideDown);
QtAlignment QStyle.visualAlignment(int direction, QtAlignment alignment);
QPoint QStyle.visualPos(int direction, QRect boundingRectangle, QPoint logicalPosition);
QRect QStyle.visualRect(int direction, QRect boundingRectangle, QRect logicalRectangle);
@Override @Virtual void QStyle.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyle.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionTabV2 QStyleOptionTabV2.new();
//QStyleOptionTabV2 QStyleOptionTabV2.new(QStyleOptionTabV2 other);
//QStyleOptionTabV2 QStyleOptionTabV2.new(QStyleOptionTab other);
@Override @Virtual void QStyleOptionTabV2.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionTabV2.signalConnect(String signal_name, dynamic callback_func);

QFont QToolTip.getFont();
void QToolTip.hideText();
boolean QToolTip.isVisible();
QPalette QToolTip.getPalette();
void QToolTip.setFont(QFont font);
void QToolTip.setPalette(QPalette palette);
void QToolTip.showText(QPoint pos, String text, QWidget w, QRect rect);
//void QToolTip.showText(QPoint pos, String text, QWidget w);
String QToolTip.text();
@Virtual void QToolTip.addEvent(String event_name, dynamic callback_func);
@Virtual void QToolTip.signalConnect(String signal_name, dynamic callback_func);
Array<String> QToolTip.parents();

@Virtual void QX11EmbedContainer.addEvent(String event_name, dynamic callback_func);
@Virtual void QX11EmbedContainer.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMetaType.addEvent(String event_name, dynamic callback_func);
@Virtual void QMetaType.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMetaType.parents();

QStyleOptionSizeGrip QStyleOptionSizeGrip.new();
//QStyleOptionSizeGrip QStyleOptionSizeGrip.new(QStyleOptionSizeGrip other);
@Override @Virtual void QStyleOptionSizeGrip.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionSizeGrip.signalConnect(String signal_name, dynamic callback_func);

QTextDocument QTextObject.document();
QTextFormat QTextObject.format();
int QTextObject.formatIndex();
int QTextObject.objectIndex();
@Override @Virtual void QTextObject.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextObject.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QAbstractSocket.atEnd();
@Virtual @Override int QAbstractSocket.bytesAvailable();
@Virtual @Override int QAbstractSocket.bytesToWrite();
@Virtual @Override boolean QAbstractSocket.canReadLine();
@Virtual @Override void QAbstractSocket.close();
@Virtual @Override boolean QAbstractSocket.isSequential();
@Virtual @Override boolean QAbstractSocket.waitForBytesWritten(int msecs);
@Virtual @Override boolean QAbstractSocket.waitForReadyRead(int msecs);
void QAbstractSocket.abort();
void QAbstractSocket.connectToHost(String hostName, int port, QIODeviceOpenMode openMode);
//void QAbstractSocket.connectToHost(QHostAddress address, int port, QIODeviceOpenMode openMode);
void QAbstractSocket.disconnectFromHost();
int QAbstractSocket.error();
boolean QAbstractSocket.flush();
QHostAddress QAbstractSocket.localAddress();
int QAbstractSocket.localPort();
QHostAddress QAbstractSocket.peerAddress();
String QAbstractSocket.peerName();
int QAbstractSocket.peerPort();
QNetworkProxy QAbstractSocket.getProxy();
int QAbstractSocket.getReadBufferSize();
void QAbstractSocket.setProxy(QNetworkProxy networkProxy);
void QAbstractSocket.setReadBufferSize(int size);
boolean QAbstractSocket.setSocketDescriptor(int socketDescriptor, int socketState, QIODeviceOpenMode openMode);
void QAbstractSocket.setSocketOption(int option, QVariant value);
int QAbstractSocket.getSocketDescriptor();
QVariant QAbstractSocket.getSocketOption(int option);
int QAbstractSocket.socketType();
int QAbstractSocket.state();
boolean QAbstractSocket.waitForConnected(int msecs);
boolean QAbstractSocket.waitForDisconnected(int msecs);
@Override @Virtual void QAbstractSocket.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractSocket.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QDataStream.addEvent(String event_name, dynamic callback_func);
@Virtual void QDataStream.signalConnect(String signal_name, dynamic callback_func);
Array<String> QDataStream.parents();

@Virtual void QX11Info.addEvent(String event_name, dynamic callback_func);
@Virtual void QX11Info.signalConnect(String signal_name, dynamic callback_func);
Array<String> QX11Info.parents();

QStyleOptionViewItemV2 QStyleOptionViewItemV2.new();
//QStyleOptionViewItemV2 QStyleOptionViewItemV2.new(QStyleOptionViewItemV2 other);
//QStyleOptionViewItemV2 QStyleOptionViewItemV2.new(QStyleOptionViewItem other);
@Override @Virtual void QStyleOptionViewItemV2.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionViewItemV2.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QScreenDriverFactory.addEvent(String event_name, dynamic callback_func);
@Virtual void QScreenDriverFactory.signalConnect(String signal_name, dynamic callback_func);
Array<String> QScreenDriverFactory.parents();

QTextCharFormat QTextCharFormat.new();
String QTextCharFormat.getAnchorHref();
QFont QTextCharFormat.getFont();
int QTextCharFormat.getFontCapitalization();
String QTextCharFormat.getFontFamily();
boolean QTextCharFormat.getFontFixedPitch();
boolean QTextCharFormat.getFontItalic();
boolean QTextCharFormat.getFontKerning();
float QTextCharFormat.getFontLetterSpacing();
boolean QTextCharFormat.getFontOverline();
float QTextCharFormat.getFontPointSize();
boolean QTextCharFormat.getFontStrikeOut();
int QTextCharFormat.getFontStyleHint();
int QTextCharFormat.getFontStyleStrategy();
boolean QTextCharFormat.getFontUnderline();
int QTextCharFormat.getFontWeight();
float QTextCharFormat.getFontWordSpacing();
boolean QTextCharFormat.isAnchor();
void QTextCharFormat.setAnchor(boolean anchor);
void QTextCharFormat.setAnchorHref(String value);
void QTextCharFormat.setFont(QFont font);
void QTextCharFormat.setFontCapitalization(int capitalization);
void QTextCharFormat.setFontFamily(String family);
void QTextCharFormat.setFontFixedPitch(boolean fixedPitch);
void QTextCharFormat.setFontItalic(boolean italic);
void QTextCharFormat.setFontKerning(boolean enable);
void QTextCharFormat.setFontLetterSpacing(float spacing);
void QTextCharFormat.setFontOverline(boolean overline);
void QTextCharFormat.setFontPointSize(float size);
void QTextCharFormat.setFontStrikeOut(boolean strikeOut);
void QTextCharFormat.setFontStyleHint(int hint, int strategy);
void QTextCharFormat.setFontStyleStrategy(int strategy);
void QTextCharFormat.setFontUnderline(boolean underline);
void QTextCharFormat.setFontWeight(int weight);
void QTextCharFormat.setFontWordSpacing(float spacing);
void QTextCharFormat.setTextOutline(QPen pen);
void QTextCharFormat.setToolTip(String text);
void QTextCharFormat.setUnderlineColor(QColor color);
void QTextCharFormat.setUnderlineStyle(int style);
void QTextCharFormat.setVerticalAlignment(int alignment);
QPen QTextCharFormat.getTextOutline();
String QTextCharFormat.getToolTip();
QColor QTextCharFormat.getUnderlineColor();
int QTextCharFormat.getUnderlineStyle();
int QTextCharFormat.getVerticalAlignment();
@Override @Virtual void QTextCharFormat.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextCharFormat.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QColorGroup.addEvent(String event_name, dynamic callback_func);
@Virtual void QColorGroup.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QLinkedList.addEvent(String event_name, dynamic callback_func);
@Virtual void QLinkedList.signalConnect(String signal_name, dynamic callback_func);
Array<String> QLinkedList.parents();

QGestureEvent QGestureEvent.new(Array<QGesture> gestures);
Array<QGesture> QGestureEvent.activeGestures();
Array<QGesture> QGestureEvent.canceledGestures();
QGesture QGestureEvent.gesture(int type);
Array<QGesture> QGestureEvent.gestures();
QPointF QGestureEvent.mapToGraphicsScene(QPointF gesturePoint);
QWidget QGestureEvent.widget();
@Override @Virtual void QGestureEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGestureEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWSEmbedWidget.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSEmbedWidget.signalConnect(String signal_name, dynamic callback_func);

@Virtual String QAccessibleInterface.actionText(int action, int t, int child);
@Virtual int QAccessibleInterface.childAt(int x, int y);
@Virtual int QAccessibleInterface.childCount();
@Virtual boolean QAccessibleInterface.doAction(int action, int child, QVariantList params);
@Virtual int QAccessibleInterface.indexOfChild(QAccessibleInterface child);
QVariant QAccessibleInterface.invokeMethod(int method, int child, QVariantList params);
@Virtual int QAccessibleInterface.navigate(int relation, int entry, QAccessibleInterface target);
@Virtual QObject QAccessibleInterface.object();
@Virtual QRect QAccessibleInterface.rect(int child);
@Virtual QAccessibleRelation QAccessibleInterface.relationTo(int child, QAccessibleInterface other, int otherChild);
@Virtual int QAccessibleInterface.role(int child);
@Virtual void QAccessibleInterface.setText(int t, int child, String text);
@Virtual QAccessibleState QAccessibleInterface.state(int child);
@Virtual String QAccessibleInterface.getText(int t, int child);
@Virtual int QAccessibleInterface.userActionCount(int child);
@Override @Virtual void QAccessibleInterface.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAccessibleInterface.signalConnect(String signal_name, dynamic callback_func);

QTextOption QTextOption.new();
//QTextOption QTextOption.new(QtAlignment alignment);
//QTextOption QTextOption.new(QTextOption other);
QtAlignment QTextOption.getAlignment();
QTextOptionFlags QTextOption.getFlags();
void QTextOption.setAlignment(QtAlignment alignment);
void QTextOption.setFlags(QTextOptionFlags flags);
void QTextOption.setTabArray(Array<float> tabStops);
void QTextOption.setTabStop(float tabStop);
void QTextOption.setTextDirection(int direction);
void QTextOption.setUseDesignMetrics(boolean enable);
void QTextOption.setWrapMode(int mode);
Array<float> QTextOption.getTabArray();
float QTextOption.getTabStop();
int QTextOption.getTextDirection();
boolean QTextOption.getUseDesignMetrics();
int QTextOption.getWrapMode();
@Virtual void QTextOption.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextOption.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextOption.parents();

@Virtual void QItemEditorCreator.addEvent(String event_name, dynamic callback_func);
@Virtual void QItemEditorCreator.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QRectF QGraphicsTextItem.boundingRect();
@Virtual @Override boolean QGraphicsTextItem.contains(QPointF point);
@Virtual @Override boolean QGraphicsTextItem.isObscuredBy(QGraphicsItem item);
@Virtual @Override QPainterPath QGraphicsTextItem.opaqueArea();
@Virtual @Override void QGraphicsTextItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override QPainterPath QGraphicsTextItem.shape();
@Virtual @Override int QGraphicsTextItem.type();
QGraphicsTextItem QGraphicsTextItem.new(QGraphicsItem parent);
//QGraphicsTextItem QGraphicsTextItem.new(String text, QGraphicsItem parent);
void QGraphicsTextItem.adjustSize();
QColor QGraphicsTextItem.getDefaultTextColor();
QTextDocument QGraphicsTextItem.getDocument();
QFont QGraphicsTextItem.getFont();
boolean QGraphicsTextItem.getOpenExternalLinks();
void QGraphicsTextItem.setDefaultTextColor(QColor col);
void QGraphicsTextItem.setDocument(QTextDocument document);
void QGraphicsTextItem.setFont(QFont font);
void QGraphicsTextItem.setHtml(String text);
void QGraphicsTextItem.setOpenExternalLinks(boolean open);
void QGraphicsTextItem.setPlainText(String text);
void QGraphicsTextItem.setTabChangesFocus(boolean b);
void QGraphicsTextItem.setTextCursor(QTextCursor cursor);
void QGraphicsTextItem.setTextInteractionFlags(QtTextInteractionFlags flags);
void QGraphicsTextItem.setTextWidth(float width);
boolean QGraphicsTextItem.getTabChangesFocus();
QTextCursor QGraphicsTextItem.getTextCursor();
QtTextInteractionFlags QGraphicsTextItem.getTextInteractionFlags();
float QGraphicsTextItem.getTextWidth();
String QGraphicsTextItem.toHtml();
String QGraphicsTextItem.toPlainText();
@Override @Virtual void QGraphicsTextItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsTextItem.signalConnect(String signal_name, dynamic callback_func);

QPersistentModelIndex QPersistentModelIndex.new(QModelIndex index);
//QPersistentModelIndex QPersistentModelIndex.new(QPersistentModelIndex other);
QModelIndex QPersistentModelIndex.child(int row, int column);
int QPersistentModelIndex.column();
QVariant QPersistentModelIndex.data(int role);
QtItemFlags QPersistentModelIndex.flags();
QAbstractItemModel QPersistentModelIndex.model();
QModelIndex QPersistentModelIndex.parent();
int QPersistentModelIndex.row();
QModelIndex QPersistentModelIndex.sibling(int row, int column);
@Virtual void QPersistentModelIndex.addEvent(String event_name, dynamic callback_func);
@Virtual void QPersistentModelIndex.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPersistentModelIndex.parents();

QTransform QTransform.new();
//QTransform QTransform.new(float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33);
//QTransform QTransform.new(float m11, float m12, float m21, float m22, float dx, float dy);
//QTransform QTransform.new(QMatrix matrix);
float QTransform.m11();
float QTransform.m12();
float QTransform.m13();
float QTransform.m21();
float QTransform.m22();
float QTransform.m23();
float QTransform.m31();
float QTransform.m32();
float QTransform.m33();
QTransform QTransform.adjoint();
float QTransform.determinant();
float QTransform.dx();
float QTransform.dy();
QTransform QTransform.inverted(boolean invertible);
boolean QTransform.isAffine();
boolean QTransform.isIdentity();
boolean QTransform.isInvertible();
boolean QTransform.isRotating();
boolean QTransform.isScaling();
boolean QTransform.isTranslating();
void QTransform.map(float x, float y, float tx, float ty);
//QPointF QTransform.map(QPointF p);
//QPoint QTransform.map(QPoint point);
//QLine QTransform.map(QLine l);
//QLineF QTransform.map(QLineF line);
//QPolygonF QTransform.map(QPolygonF polygon);
//QPolygon QTransform.map(QPolygon polygon);
//QRegion QTransform.map(QRegion region);
//QPainterPath QTransform.map(QPainterPath path);
//void QTransform.map(int x, int y, int tx, int ty);
QRectF QTransform.mapRect(QRectF rectangle);
//QRect QTransform.mapRect(QRect rectangle);
QPolygon QTransform.mapToPolygon(QRect rectangle);
void QTransform.reset();
QTransform QTransform.rotate(float angle, int axis);
QTransform QTransform.rotateRadians(float angle, int axis);
QTransform QTransform.scale(float sx, float sy);
void QTransform.setMatrix(float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33);
QTransform QTransform.shear(float sh, float sv);
QMatrix QTransform.toAffine();
QTransform QTransform.translate(float dx, float dy);
QTransform QTransform.transposed();
int QTransform.type();
QTransform QTransform.fromScale(float sx, float sy);
QTransform QTransform.fromTranslate(float dx, float dy);
boolean QTransform.quadToQuad(QPolygonF one, QPolygonF two, QTransform trans);
boolean QTransform.quadToSquare(QPolygonF quad, QTransform trans);
boolean QTransform.squareToQuad(QPolygonF quad, QTransform trans);
@Virtual void QTransform.addEvent(String event_name, dynamic callback_func);
@Virtual void QTransform.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTransform.parents();

@Virtual @Override QRectF QGraphicsEllipseItem.boundingRect();
@Virtual @Override boolean QGraphicsEllipseItem.contains(QPointF point);
@Virtual @Override boolean QGraphicsEllipseItem.isObscuredBy(QGraphicsItem item);
@Virtual @Override QPainterPath QGraphicsEllipseItem.opaqueArea();
@Virtual @Override void QGraphicsEllipseItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override QPainterPath QGraphicsEllipseItem.shape();
@Virtual @Override int QGraphicsEllipseItem.type();
QGraphicsEllipseItem QGraphicsEllipseItem.new(QGraphicsItem parent);
//QGraphicsEllipseItem QGraphicsEllipseItem.new(QRectF rect, QGraphicsItem parent);
//QGraphicsEllipseItem QGraphicsEllipseItem.new(float x, float y, float width, float height, QGraphicsItem parent);
QRectF QGraphicsEllipseItem.getRect();
void QGraphicsEllipseItem.setRect(QRectF rect);
//void QGraphicsEllipseItem.setRect(float x, float y, float width, float height);
void QGraphicsEllipseItem.setSpanAngle(int angle);
void QGraphicsEllipseItem.setStartAngle(int angle);
int QGraphicsEllipseItem.getSpanAngle();
int QGraphicsEllipseItem.getStartAngle();
@Override @Virtual void QGraphicsEllipseItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsEllipseItem.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QDial.minimumSizeHint();
@Virtual @Override QSize QDial.sizeHint();
QDial QDial.new(QWidget parent);
int QDial.notchSize();
float QDial.getNotchTarget();
boolean QDial.getNotchesVisible();
void QDial.setNotchTarget(double target);
boolean QDial.getWrapping();
void QDial.setNotchesVisible(boolean visible);
void QDial.setWrapping(boolean on);
@Override @Virtual void QDial.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDial.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QQueue.addEvent(String event_name, dynamic callback_func);
@Virtual void QQueue.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionSpinBox QStyleOptionSpinBox.new();
//QStyleOptionSpinBox QStyleOptionSpinBox.new(QStyleOptionSpinBox other);
@Override @Virtual void QStyleOptionSpinBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionSpinBox.signalConnect(String signal_name, dynamic callback_func);

QNetworkInterface QNetworkInterface.new();
//QNetworkInterface QNetworkInterface.new(QNetworkInterface other);
Array<QNetworkAddressEntry> QNetworkInterface.addressEntries();
QNetworkInterfaceInterfaceFlags QNetworkInterface.flags();
String QNetworkInterface.hardwareAddress();
String QNetworkInterface.humanReadableName();
int QNetworkInterface.index();
String QNetworkInterface.name();
Array<QHostAddress> QNetworkInterface.allAddresses();
Array<QNetworkInterface> QNetworkInterface.allInterfaces();
QNetworkInterface QNetworkInterface.interfaceFromIndex(int index);
QNetworkInterface QNetworkInterface.interfaceFromName(String name);
@Virtual void QNetworkInterface.addEvent(String event_name, dynamic callback_func);
@Virtual void QNetworkInterface.signalConnect(String signal_name, dynamic callback_func);
Array<String> QNetworkInterface.parents();

QStyleOptionToolButton QStyleOptionToolButton.new();
//QStyleOptionToolButton QStyleOptionToolButton.new(QStyleOptionToolButton other);
@Override @Virtual void QStyleOptionToolButton.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionToolButton.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QInputDialog.done(int result);
@Virtual @Override QSize QInputDialog.minimumSizeHint();
@Virtual @Override void QInputDialog.setVisible(boolean visible);
@Virtual @Override QSize QInputDialog.sizeHint();
QInputDialog QInputDialog.new(QWidget parent, QtWindowFlags flags);
String QInputDialog.getCancelButtonText();
int QInputDialog.getDoubleDecimals();
double QInputDialog.getDoubleMaximum();
double QInputDialog.getDoubleMinimum();
double QInputDialog.getDoubleValue();
int QInputDialog.getInputMode();
int QInputDialog.getIntMaximum();
int QInputDialog.getIntMinimum();
int QInputDialog.getIntStep();
int QInputDialog.getIntValue();
boolean QInputDialog.isComboBoxEditable();
String QInputDialog.getLabelText();
String QInputDialog.getOkButtonText();
void QInputDialog.open(QObject receiver, String member);
QInputDialogInputDialogOptions QInputDialog.getOptions();
void QInputDialog.setCancelButtonText(String text);
void QInputDialog.setComboBoxEditable(boolean editable);
void QInputDialog.setDoubleDecimals(int decimals);
void QInputDialog.setDoubleMaximum(double max);
void QInputDialog.setDoubleMinimum(double min);
void QInputDialog.setDoubleRange(double min, double max);
void QInputDialog.setDoubleValue(double value);
void QInputDialog.setInputMode(int mode);
void QInputDialog.setIntMaximum(int max);
void QInputDialog.setIntMinimum(int min);
void QInputDialog.setIntRange(int min, int max);
void QInputDialog.setIntStep(int step);
void QInputDialog.setIntValue(int value);
void QInputDialog.setLabelText(String text);
void QInputDialog.setOkButtonText(String text);
void QInputDialog.setOption(int option, boolean on);
void QInputDialog.setOptions(QInputDialogInputDialogOptions options);
void QInputDialog.setTextEchoMode(int mode);
void QInputDialog.setTextValue(String text);
boolean QInputDialog.testOption(int option);
int QInputDialog.getTextEchoMode();
String QInputDialog.getTextValue();
double QInputDialog.getDouble(QWidget parent, String title, String label, double value, double min, double max, int decimals, boolean ok, QtWindowFlags flags);
int QInputDialog.getInt(QWidget parent, String title, String label, int value, int min, int max, int step, boolean ok, QtWindowFlags flags);
String QInputDialog.getText(QWidget parent, String title, String label, int mode, String text, boolean ok, QtWindowFlags flags);
@Override @Virtual void QInputDialog.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QInputDialog.signalConnect(String signal_name, dynamic callback_func);

QTcpSocket QTcpSocket.new(QObject parent);
@Override @Virtual void QTcpSocket.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTcpSocket.signalConnect(String signal_name, dynamic callback_func);

int QPixmapCache.getCacheLimit();
void QPixmapCache.clear();
boolean QPixmapCache.find(String key, QPixmap pixmap);
boolean QPixmapCache.insert(String key, QPixmap pixmap);
void QPixmapCache.remove(String key);
void QPixmapCache.setCacheLimit(int n);
@Virtual void QPixmapCache.addEvent(String event_name, dynamic callback_func);
@Virtual void QPixmapCache.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPixmapCache.parents();

QProcessEnvironment QProcessEnvironment.new();
//QProcessEnvironment QProcessEnvironment.new(QProcessEnvironment other);
void QProcessEnvironment.clear();
boolean QProcessEnvironment.contains(String name);
void QProcessEnvironment.insert(String name, String value);
boolean QProcessEnvironment.isEmpty();
void QProcessEnvironment.remove(String name);
String QProcessEnvironment.value(String name, String defaultValue);
QProcessEnvironment QProcessEnvironment.systemEnvironment();
@Virtual void QProcessEnvironment.addEvent(String event_name, dynamic callback_func);
@Virtual void QProcessEnvironment.signalConnect(String signal_name, dynamic callback_func);
Array<String> QProcessEnvironment.parents();

QSystemLocale QSystemLocale.new();
@Virtual QLocale QSystemLocale.fallbackLocale();
@Virtual QVariant QSystemLocale.query(int type, QVariant in);
@Virtual void QSystemLocale.addEvent(String event_name, dynamic callback_func);
@Virtual void QSystemLocale.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSystemLocale.parents();

QStyleOptionTab QStyleOptionTab.new();
//QStyleOptionTab QStyleOptionTab.new(QStyleOptionTab other);
@Override @Virtual void QStyleOptionTab.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionTab.signalConnect(String signal_name, dynamic callback_func);

QModelIndex QModelIndex.new();
//QModelIndex QModelIndex.new(QModelIndex other);
QModelIndex QModelIndex.child(int row, int column);
int QModelIndex.column();
QVariant QModelIndex.data(int role);
QtItemFlags QModelIndex.flags();
int QModelIndex.internalId();
void QModelIndex.internalPointer();
QAbstractItemModel QModelIndex.model();
QModelIndex QModelIndex.parent();
int QModelIndex.row();
QModelIndex QModelIndex.sibling(int row, int column);
@Virtual void QModelIndex.addEvent(String event_name, dynamic callback_func);
@Virtual void QModelIndex.signalConnect(String signal_name, dynamic callback_func);
Array<String> QModelIndex.parents();

@Virtual void QPointer.addEvent(String event_name, dynamic callback_func);
@Virtual void QPointer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPointer.parents();


@Virtual void QAccessiblePlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QAccessiblePlugin.signalConnect(String signal_name, dynamic callback_func);

QBitmap QBitmap.new();
//QBitmap QBitmap.new(QPixmap pixmap);
//QBitmap QBitmap.new(int width, int height);
//QBitmap QBitmap.new(QSize size);
//QBitmap QBitmap.new(String fileName, String fmt);
void QBitmap.clear();
QBitmap QBitmap.fromData(QSize size, String bits, int monoFormat);
QBitmap QBitmap.fromImage(QImage image, QtImageConversionFlags flags);
@Override @Virtual void QBitmap.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QBitmap.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override int QNetworkDiskCache.cacheSize();
@Virtual @Override QIODevice QNetworkDiskCache.data(QUrl url);
@Virtual @Override void QNetworkDiskCache.insert(QIODevice device);
@Virtual @Override QNetworkCacheMetaData QNetworkDiskCache.metaData(QUrl url);
@Virtual @Override QIODevice QNetworkDiskCache.prepare(QNetworkCacheMetaData metaData);
@Virtual @Override boolean QNetworkDiskCache.remove(QUrl url);
@Virtual @Override void QNetworkDiskCache.updateMetaData(QNetworkCacheMetaData metaData);
QNetworkDiskCache QNetworkDiskCache.new(QObject parent);
String QNetworkDiskCache.getCacheDirectory();
QNetworkCacheMetaData QNetworkDiskCache.fileMetaData(String fileName);
int QNetworkDiskCache.getMaximumCacheSize();
void QNetworkDiskCache.setCacheDirectory(String cacheDir);
void QNetworkDiskCache.setMaximumCacheSize(int size);
@Virtual void QNetworkDiskCache.clear();
@Override @Virtual void QNetworkDiskCache.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QNetworkDiskCache.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QWebPage.event(QEvent ev);
QWebPage QWebPage.new(QObject parent);
QAction QWebPage.action(int action);
int QWebPage.bytesReceived();
QMenu QWebPage.createStandardContextMenu();
QWebFrame QWebPage.currentFrame();
boolean QWebPage.findText(String subString, QWebPageFindFlags options);
boolean QWebPage.focusNextPrevChild(boolean next);
boolean QWebPage.getForwardUnsupportedContent();
QWebFrame QWebPage.frameAt(QPoint pos);
QWebHistory QWebPage.history();
QVariant QWebPage.inputMethodQuery(int property);
boolean QWebPage.isContentEditable();
boolean QWebPage.isModified();
int QWebPage.getLinkDelegationPolicy();
QWebFrame QWebPage.mainFrame();
QNetworkAccessManager QWebPage.getNetworkAccessManager();
QPalette QWebPage.getPalette();
QWebPluginFactory QWebPage.getPluginFactory();
QSize QWebPage.getPreferredContentsSize();
String QWebPage.selectedText();
void QWebPage.setContentEditable(boolean editable);
void QWebPage.setForwardUnsupportedContent(boolean forward);
void QWebPage.setLinkDelegationPolicy(int policy);
void QWebPage.setNetworkAccessManager(QNetworkAccessManager manager);
void QWebPage.setPalette(QPalette palette);
void QWebPage.setPluginFactory(QWebPluginFactory factory);
void QWebPage.setPreferredContentsSize(QSize size);
void QWebPage.setView(QWidget view);
void QWebPage.setViewportSize(QSize size);
QWebSettings QWebPage.settings();
@Virtual boolean QWebPage.supportsExtension(int extension);
boolean QWebPage.swallowContextMenuEvent(QContextMenuEvent event);
int QWebPage.totalBytes();
@Virtual void QWebPage.triggerAction(int action, boolean checked);
QUndoStack QWebPage.undoStack();
void QWebPage.updatePositionDependentActions(QPoint pos);
QWidget QWebPage.getView();
QSize QWebPage.getViewportSize();
boolean QWebPage.shouldInterruptJavaScript();
@Override @Virtual void QWebPage.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWebPage.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QPageSetupDialog.setVisible(boolean visible);
QPageSetupDialog QPageSetupDialog.new(QPrinter printer, QWidget parent);
//QPageSetupDialog QPageSetupDialog.new(QWidget parent);
void QPageSetupDialog.open(QObject receiver, String member);
QPageSetupDialogPageSetupDialogOptions QPageSetupDialog.getOptions();
QPrinter QPageSetupDialog.printer();
void QPageSetupDialog.setOption(int option, boolean on);
void QPageSetupDialog.setOptions(QPageSetupDialogPageSetupDialogOptions options);
boolean QPageSetupDialog.testOption(int option);
@Override @Virtual void QPageSetupDialog.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPageSetupDialog.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QGroupBox.minimumSizeHint();
QGroupBox QGroupBox.new(QWidget parent);
//QGroupBox QGroupBox.new(String title, QWidget parent);
QtAlignment QGroupBox.getAlignment();
boolean QGroupBox.isCheckable();
boolean QGroupBox.isChecked();
boolean QGroupBox.isFlat();
void QGroupBox.setAlignment(int alignment);
void QGroupBox.setCheckable(boolean checkable);
void QGroupBox.setFlat(boolean flat);
void QGroupBox.setTitle(String title);
String QGroupBox.getTitle();
void QGroupBox.setChecked(boolean checked);
@Override @Virtual void QGroupBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGroupBox.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QColorDialog.setVisible(boolean visible);
QColorDialog QColorDialog.new(QWidget parent);
//QColorDialog QColorDialog.new(QColor initial, QWidget parent);
QColor QColorDialog.getCurrentColor();
void QColorDialog.open();
//void QColorDialog.open(QObject receiver, String member);
QColorDialogColorDialogOptions QColorDialog.getOptions();
QColor QColorDialog.selectedColor();
void QColorDialog.setCurrentColor(QColor color);
void QColorDialog.setOption(int option, boolean on);
void QColorDialog.setOptions(QColorDialogColorDialogOptions options);
boolean QColorDialog.testOption(int option);
QRgb QColorDialog.getCustomColor(int index);
int QColorDialog.customCount();
QColor QColorDialog.getColor(QColor initial, QWidget parent, String title, QColorDialogColorDialogOptions options);
//QColor QColorDialog.getColor(QColor initial, QWidget parent);
void QColorDialog.setCustomColor(int index, QRgb color);
void QColorDialog.setStandardColor(int index, QRgb color);
@Override @Virtual void QColorDialog.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QColorDialog.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionGroupBox QStyleOptionGroupBox.new();
//QStyleOptionGroupBox QStyleOptionGroupBox.new(QStyleOptionGroupBox other);
@Override @Virtual void QStyleOptionGroupBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionGroupBox.signalConnect(String signal_name, dynamic callback_func);

QResource QResource.new(String file, QLocale locale);
String QResource.absoluteFilePath();
String QResource.data();
String QResource.getFileName();
boolean QResource.isCompressed();
QLocale QResource.getLocale();
void QResource.setFileName(String file);
void QResource.setLocale(QLocale locale);
int QResource.size();
boolean QResource.registerResource(String rccFileName, String mapRoot);
//boolean QResource.registerResource(String rccData, String mapRoot);
boolean QResource.unregisterResource(String rccFileName, String mapRoot);
//boolean QResource.unregisterResource(String rccData, String mapRoot);
@Virtual void QResource.addEvent(String event_name, dynamic callback_func);
@Virtual void QResource.signalConnect(String signal_name, dynamic callback_func);
Array<String> QResource.parents();

QQuaternion QQuaternion.new();
//QQuaternion QQuaternion.new(float scalar, float xpos, float ypos, float zpos);
QQuaternion QQuaternion.conjugate();
boolean QQuaternion.isIdentity();
float QQuaternion.length();
float QQuaternion.lengthSquared();
void QQuaternion.normalize();
QQuaternion QQuaternion.normalized();
float QQuaternion.getScalar();
void QQuaternion.setScalar(float scalar);
void QQuaternion.setVector(float x, float y, float z);
void QQuaternion.setX(float x);
void QQuaternion.setY(float y);
void QQuaternion.setZ(float z);
float QQuaternion.getX();
float QQuaternion.getY();
float QQuaternion.getZ();
QQuaternion QQuaternion.fromAxisAndAngle(float x, float y, float z, float angle);
QQuaternion QQuaternion.nlerp(QQuaternion q1, QQuaternion q2, float t);
QQuaternion QQuaternion.slerp(QQuaternion q1, QQuaternion q2, float t);
@Virtual void QQuaternion.addEvent(String event_name, dynamic callback_func);
@Virtual void QQuaternion.signalConnect(String signal_name, dynamic callback_func);
Array<String> QQuaternion.parents();

QStyleHintReturnMask QStyleHintReturnMask.new();
@Override @Virtual void QStyleHintReturnMask.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleHintReturnMask.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QSettings.addEvent(String event_name, dynamic callback_func);
@Virtual void QSettings.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QTableWidgetSelectionRange.addEvent(String event_name, dynamic callback_func);
@Virtual void QTableWidgetSelectionRange.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTableWidgetSelectionRange.parents();

QStyleOptionDockWidget QStyleOptionDockWidget.new();
//QStyleOptionDockWidget QStyleOptionDockWidget.new(QStyleOptionDockWidget other);
@Override @Virtual void QStyleOptionDockWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionDockWidget.signalConnect(String signal_name, dynamic callback_func);

QMouseEventTransition QMouseEventTransition.new(QState sourceState);
//QMouseEventTransition QMouseEventTransition.new(QObject object, int type, int button, QState sourceState);
int QMouseEventTransition.getButton();
QPainterPath QMouseEventTransition.getHitTestPath();
QtKeyboardModifiers QMouseEventTransition.getModifierMask();
void QMouseEventTransition.setButton(int button);
void QMouseEventTransition.setHitTestPath(QPainterPath path);
void QMouseEventTransition.setModifierMask(QtKeyboardModifiers modifierMask);
@Override @Virtual void QMouseEventTransition.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMouseEventTransition.signalConnect(String signal_name, dynamic callback_func);

QTreeWidgetItem QTreeWidgetItem.new(int type);
//QTreeWidgetItem QTreeWidgetItem.new(QTreeWidget parent, int type);
//QTreeWidgetItem QTreeWidgetItem.new(QTreeWidget parent, QTreeWidgetItem preceding, int type);
//QTreeWidgetItem QTreeWidgetItem.new(QTreeWidgetItem parent, int type);
//QTreeWidgetItem QTreeWidgetItem.new(QTreeWidgetItem parent, QTreeWidgetItem preceding, int type);
//QTreeWidgetItem QTreeWidgetItem.new(QTreeWidgetItem other);
void QTreeWidgetItem.addChild(QTreeWidgetItem child);
void QTreeWidgetItem.addChildren(Array<QTreeWidgetItem> children);
QBrush QTreeWidgetItem.getBackground(int column);
int QTreeWidgetItem.getCheckState(int column);
QTreeWidgetItem QTreeWidgetItem.child(int index);
int QTreeWidgetItem.childCount();
int QTreeWidgetItem.getChildIndicatorPolicy();
@Virtual QTreeWidgetItem QTreeWidgetItem.clone();
int QTreeWidgetItem.columnCount();
@Virtual QVariant QTreeWidgetItem.getData(int column, int role);
QtItemFlags QTreeWidgetItem.getFlags();
QFont QTreeWidgetItem.getFont(int column);
QBrush QTreeWidgetItem.getForeground(int column);
QIcon QTreeWidgetItem.getIcon(int column);
int QTreeWidgetItem.indexOfChild(QTreeWidgetItem child);
void QTreeWidgetItem.insertChild(int index, QTreeWidgetItem child);
void QTreeWidgetItem.insertChildren(int index, Array<QTreeWidgetItem> children);
boolean QTreeWidgetItem.isDisabled();
boolean QTreeWidgetItem.isExpanded();
boolean QTreeWidgetItem.isFirstColumnSpanned();
boolean QTreeWidgetItem.isHidden();
boolean QTreeWidgetItem.isSelected();
QTreeWidgetItem QTreeWidgetItem.parent();
void QTreeWidgetItem.removeChild(QTreeWidgetItem child);
void QTreeWidgetItem.setBackground(int column, QBrush brush);
void QTreeWidgetItem.setCheckState(int column, int state);
void QTreeWidgetItem.setChildIndicatorPolicy(int policy);
@Virtual void QTreeWidgetItem.setData(int column, int role, QVariant value);
void QTreeWidgetItem.setDisabled(boolean disabled);
void QTreeWidgetItem.setExpanded(boolean expand);
void QTreeWidgetItem.setFirstColumnSpanned(boolean span);
void QTreeWidgetItem.setFlags(QtItemFlags flags);
void QTreeWidgetItem.setFont(int column, QFont font);
void QTreeWidgetItem.setForeground(int column, QBrush brush);
void QTreeWidgetItem.setHidden(boolean hide);
void QTreeWidgetItem.setIcon(int column, QIcon icon);
void QTreeWidgetItem.setSelected(boolean select);
void QTreeWidgetItem.setSizeHint(int column, QSize size);
void QTreeWidgetItem.setStatusTip(int column, String statusTip);
void QTreeWidgetItem.setText(int column, String text);
void QTreeWidgetItem.setTextAlignment(int column, int alignment);
void QTreeWidgetItem.setToolTip(int column, String toolTip);
void QTreeWidgetItem.setWhatsThis(int column, String whatsThis);
QSize QTreeWidgetItem.getSizeHint(int column);
void QTreeWidgetItem.sortChildren(int column, int order);
String QTreeWidgetItem.getStatusTip(int column);
QTreeWidgetItem QTreeWidgetItem.takeChild(int index);
Array<QTreeWidgetItem> QTreeWidgetItem.takeChildren();
String QTreeWidgetItem.getText(int column);
int QTreeWidgetItem.getTextAlignment(int column);
String QTreeWidgetItem.getToolTip(int column);
QTreeWidget QTreeWidgetItem.treeWidget();
int QTreeWidgetItem.type();
String QTreeWidgetItem.getWhatsThis(int column);
@Virtual void QTreeWidgetItem.addEvent(String event_name, dynamic callback_func);
@Virtual void QTreeWidgetItem.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTreeWidgetItem.parents();

@Virtual void QAbstractAnimation.addEvent(String event_name, dynamic callback_func);
@Virtual void QAbstractAnimation.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QAccessibleBridge.notifyAccessibilityUpdate(int reason, QAccessibleInterface interface, int child);
@Virtual void QAccessibleBridge.setRootObject(QAccessibleInterface object);
@Virtual void QAccessibleBridge.addEvent(String event_name, dynamic callback_func);
@Virtual void QAccessibleBridge.signalConnect(String signal_name, dynamic callback_func);
Array<String> QAccessibleBridge.parents();

@Virtual @Override void QDateTimeEdit.clear();
@Virtual @Override boolean QDateTimeEdit.event(QEvent event);
@Virtual @Override QSize QDateTimeEdit.sizeHint();
@Virtual @Override void QDateTimeEdit.stepBy(int steps);
QDateTimeEdit QDateTimeEdit.new(QWidget parent);
//QDateTimeEdit QDateTimeEdit.new(QDateTime datetime, QWidget parent);
//QDateTimeEdit QDateTimeEdit.new(QDate date, QWidget parent);
//QDateTimeEdit QDateTimeEdit.new(QTime time, QWidget parent);
boolean QDateTimeEdit.getCalendarPopup();
QCalendarWidget QDateTimeEdit.getCalendarWidget();
void QDateTimeEdit.clearMaximumDate();
void QDateTimeEdit.clearMaximumDateTime();
void QDateTimeEdit.clearMaximumTime();
void QDateTimeEdit.clearMinimumDate();
void QDateTimeEdit.clearMinimumDateTime();
void QDateTimeEdit.clearMinimumTime();
int QDateTimeEdit.getCurrentSection();
int QDateTimeEdit.getCurrentSectionIndex();
QDate QDateTimeEdit.getDate();
QDateTime QDateTimeEdit.getDateTime();
String QDateTimeEdit.getDisplayFormat();
QDateTimeEditSections QDateTimeEdit.displayedSections();
QDate QDateTimeEdit.getMaximumDate();
QDateTime QDateTimeEdit.getMaximumDateTime();
QTime QDateTimeEdit.getMaximumTime();
QDate QDateTimeEdit.getMinimumDate();
QDateTime QDateTimeEdit.getMinimumDateTime();
QTime QDateTimeEdit.getMinimumTime();
int QDateTimeEdit.sectionAt(int index);
int QDateTimeEdit.sectionCount();
String QDateTimeEdit.sectionText(int section);
void QDateTimeEdit.setCalendarPopup(boolean enable);
void QDateTimeEdit.setCalendarWidget(QCalendarWidget calendarWidget);
void QDateTimeEdit.setCurrentSection(int section);
void QDateTimeEdit.setCurrentSectionIndex(int index);
void QDateTimeEdit.setDateRange(QDate min, QDate max);
void QDateTimeEdit.setDateTimeRange(QDateTime min, QDateTime max);
void QDateTimeEdit.setDisplayFormat(String fmt);
void QDateTimeEdit.setMaximumDate(QDate max);
void QDateTimeEdit.setMaximumDateTime(QDateTime dt);
void QDateTimeEdit.setMaximumTime(QTime max);
void QDateTimeEdit.setMinimumDate(QDate min);
void QDateTimeEdit.setMinimumDateTime(QDateTime dt);
void QDateTimeEdit.setMinimumTime(QTime min);
void QDateTimeEdit.setSelectedSection(int section);
void QDateTimeEdit.setTimeRange(QTime min, QTime max);
void QDateTimeEdit.setTimeSpec(int spec);
QTime QDateTimeEdit.getTime();
int QDateTimeEdit.getTimeSpec();
void QDateTimeEdit.setDate(QDate date);
void QDateTimeEdit.setDateTime(QDateTime dateTime);
void QDateTimeEdit.setTime(QTime time);
@Override @Virtual void QDateTimeEdit.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDateTimeEdit.signalConnect(String signal_name, dynamic callback_func);

boolean QAccessible.isActive();
QAccessibleInterface QAccessible.queryAccessibleInterface(QObject object);
void QAccessible.setRootObject(QObject object);
void QAccessible.updateAccessibility(QObject object, int child, int reason);
@Virtual void QAccessible.addEvent(String event_name, dynamic callback_func);
@Virtual void QAccessible.signalConnect(String signal_name, dynamic callback_func);
Array<String> QAccessible.parents();

QVBoxLayout QVBoxLayout.new();
//QVBoxLayout QVBoxLayout.new(QWidget parent);
@Override @Virtual void QVBoxLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QVBoxLayout.signalConnect(String signal_name, dynamic callback_func);

boolean QAbstractEventDispatcher.filterEvent(void message);
@Virtual void QAbstractEventDispatcher.flush();
@Virtual boolean QAbstractEventDispatcher.hasPendingEvents();
@Virtual void QAbstractEventDispatcher.interrupt();
@Virtual boolean QAbstractEventDispatcher.processEvents(int flags);
@Virtual void QAbstractEventDispatcher.registerSocketNotifier(QSocketNotifier notifier);
int QAbstractEventDispatcher.registerTimer(int interval, QObject object);
//@Virtual void QAbstractEventDispatcher.registerTimer(int timerId, int interval, QObject object);
@Virtual void QAbstractEventDispatcher.unregisterSocketNotifier(QSocketNotifier notifier);
@Virtual boolean QAbstractEventDispatcher.unregisterTimer(int timerId);
@Virtual boolean QAbstractEventDispatcher.unregisterTimers(QObject object);
@Virtual void QAbstractEventDispatcher.wakeUp();
QAbstractEventDispatcher QAbstractEventDispatcher.instance(QThread thread);
@Override @Virtual void QAbstractEventDispatcher.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractEventDispatcher.signalConnect(String signal_name, dynamic callback_func);

QWidgetAction QWidgetAction.new(QObject parent);
QWidget QWidgetAction.getDefaultWidget();
void QWidgetAction.releaseWidget(QWidget widget);
QWidget QWidgetAction.requestWidget(QWidget parent);
void QWidgetAction.setDefaultWidget(QWidget widget);
@Override @Virtual void QWidgetAction.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWidgetAction.signalConnect(String signal_name, dynamic callback_func);

QPolygon QPolygon.new();
//QPolygon QPolygon.new(int size);
//QPolygon QPolygon.new(QPolygon polygon);
//QPolygon QPolygon.new(QRect rectangle, boolean closed);
QRect QPolygon.boundingRect();
boolean QPolygon.containsPoint(QPoint point, int fillRule);
QPolygon QPolygon.intersected(QPolygon r);
void QPolygon.getPoint(int index, int x, int y);
//QPoint QPolygon.getPoint(int index);
void QPolygon.putPoints(int index, int nPoints, QPolygon fromPolygon, int fromIndex);
void QPolygon.setPoint(int index, int x, int y);
//void QPolygon.setPoint(int index, QPoint point);
void QPolygon.setPoints(int nPoints, int points);
QPolygon QPolygon.subtracted(QPolygon r);
void QPolygon.translate(int dx, int dy);
//void QPolygon.translate(QPoint offset);
QPolygon QPolygon.translated(int dx, int dy);
//QPolygon QPolygon.translated(QPoint offset);
QPolygon QPolygon.united(QPolygon r);
@Override @Virtual void QPolygon.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPolygon.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QGraphicsLayout.getContentsMargins(float left, float top, float right, float bottom);
@Virtual @Override void QGraphicsLayout.updateGeometry();
void QGraphicsLayout.activate();
@Virtual int QGraphicsLayout.count();
@Virtual void QGraphicsLayout.invalidate();
boolean QGraphicsLayout.isActivated();
@Virtual QGraphicsLayoutItem QGraphicsLayout.itemAt(int i);
@Virtual void QGraphicsLayout.removeAt(int index);
void QGraphicsLayout.setContentsMargins(float left, float top, float right, float bottom);
@Virtual void QGraphicsLayout.widgetEvent(QEvent e);
@Override @Virtual void QGraphicsLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsLayout.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QCleanlooksStyle.addEvent(String event_name, dynamic callback_func);
@Virtual void QCleanlooksStyle.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QVariant QAbstractItemView.inputMethodQuery(int query);
boolean QAbstractItemView.getAlternatingRowColors();
int QAbstractItemView.getAutoScrollMargin();
void QAbstractItemView.closePersistentEditor(QModelIndex index);
QModelIndex QAbstractItemView.getCurrentIndex();
int QAbstractItemView.getDefaultDropAction();
int QAbstractItemView.getDragDropMode();
boolean QAbstractItemView.getDragDropOverwriteMode();
boolean QAbstractItemView.getDragEnabled();
QAbstractItemViewEditTriggers QAbstractItemView.getEditTriggers();
boolean QAbstractItemView.hasAutoScroll();
int QAbstractItemView.getHorizontalScrollMode();
QSize QAbstractItemView.getIconSize();
@Virtual QModelIndex QAbstractItemView.indexAt(QPoint point);
QWidget QAbstractItemView.getIndexWidget(QModelIndex index);
QAbstractItemDelegate QAbstractItemView.getItemDelegate();
//QAbstractItemDelegate QAbstractItemView.getItemDelegate(QModelIndex index);
QAbstractItemDelegate QAbstractItemView.getItemDelegateForColumn(int column);
QAbstractItemDelegate QAbstractItemView.getItemDelegateForRow(int row);
@Virtual void QAbstractItemView.keyboardSearch(String search);
QAbstractItemModel QAbstractItemView.getModel();
void QAbstractItemView.openPersistentEditor(QModelIndex index);
QModelIndex QAbstractItemView.getRootIndex();
@Virtual void QAbstractItemView.scrollTo(QModelIndex index, int hint);
int QAbstractItemView.getSelectionBehavior();
int QAbstractItemView.getSelectionMode();
QItemSelectionModel QAbstractItemView.getSelectionModel();
void QAbstractItemView.setAlternatingRowColors(boolean enable);
void QAbstractItemView.setAutoScroll(boolean enable);
void QAbstractItemView.setAutoScrollMargin(int margin);
void QAbstractItemView.setDefaultDropAction(int dropAction);
void QAbstractItemView.setDragDropMode(int behavior);
void QAbstractItemView.setDragDropOverwriteMode(boolean overwrite);
void QAbstractItemView.setDragEnabled(boolean enable);
void QAbstractItemView.setDropIndicatorShown(boolean enable);
void QAbstractItemView.setEditTriggers(QAbstractItemViewEditTriggers triggers);
void QAbstractItemView.setHorizontalScrollMode(int mode);
void QAbstractItemView.setIconSize(QSize size);
void QAbstractItemView.setIndexWidget(QModelIndex index, QWidget widget);
void QAbstractItemView.setItemDelegate(QAbstractItemDelegate delegate);
void QAbstractItemView.setItemDelegateForColumn(int column, QAbstractItemDelegate delegate);
void QAbstractItemView.setItemDelegateForRow(int row, QAbstractItemDelegate delegate);
@Virtual void QAbstractItemView.setModel(QAbstractItemModel model);
void QAbstractItemView.setSelectionBehavior(int behavior);
void QAbstractItemView.setSelectionMode(int mode);
@Virtual void QAbstractItemView.setSelectionModel(QItemSelectionModel selectionModel);
void QAbstractItemView.setTabKeyNavigation(boolean enable);
void QAbstractItemView.setTextElideMode(int mode);
void QAbstractItemView.setVerticalScrollMode(int mode);
boolean QAbstractItemView.showDropIndicator();
@Virtual int QAbstractItemView.sizeHintForColumn(int column);
QSize QAbstractItemView.sizeHintForIndex(QModelIndex index);
@Virtual int QAbstractItemView.sizeHintForRow(int row);
boolean QAbstractItemView.getTabKeyNavigation();
int QAbstractItemView.getTextElideMode();
int QAbstractItemView.getVerticalScrollMode();
@Virtual QRect QAbstractItemView.visualRect(QModelIndex index);
void QAbstractItemView.clearSelection();
void QAbstractItemView.edit(QModelIndex index);
@Virtual void QAbstractItemView.reset();
void QAbstractItemView.scrollToBottom();
void QAbstractItemView.scrollToTop();
@Virtual void QAbstractItemView.selectAll();
void QAbstractItemView.setCurrentIndex(QModelIndex index);
@Virtual void QAbstractItemView.setRootIndex(QModelIndex index);
void QAbstractItemView.update(QModelIndex index);
@Override @Virtual void QAbstractItemView.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractItemView.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QStringListModel.addEvent(String event_name, dynamic callback_func);
@Virtual void QStringListModel.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionRubberBand QStyleOptionRubberBand.new();
//QStyleOptionRubberBand QStyleOptionRubberBand.new(QStyleOptionRubberBand other);
@Override @Virtual void QStyleOptionRubberBand.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionRubberBand.signalConnect(String signal_name, dynamic callback_func);

QEventLoop QEventLoop.new(QObject parent);
int QEventLoop.exec(QEventLoopProcessEventsFlags flags);
void QEventLoop.exit(int returnCode);
boolean QEventLoop.isRunning();
boolean QEventLoop.processEvents(QEventLoopProcessEventsFlags flags);
//void QEventLoop.processEvents(QEventLoopProcessEventsFlags flags, int maxTime);
void QEventLoop.wakeUp();
void QEventLoop.quit();
@Override @Virtual void QEventLoop.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QEventLoop.signalConnect(String signal_name, dynamic callback_func);

QMargins QMargins.new();
//QMargins QMargins.new(int left, int top, int right, int bottom);
int QMargins.getBottom();
int QMargins.getLeft();
int QMargins.getRight();
void QMargins.setBottom(int bottom);
void QMargins.setLeft(int left);
void QMargins.setRight(int right);
void QMargins.setTop(int top);
int QMargins.getTop();
@Virtual void QMargins.addEvent(String event_name, dynamic callback_func);
@Virtual void QMargins.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMargins.parents();

QWebHistoryItem QWebHistoryItem.new(QWebHistoryItem other);
QIcon QWebHistoryItem.icon();
QDateTime QWebHistoryItem.lastVisited();
QUrl QWebHistoryItem.originalUrl();
void QWebHistoryItem.setUserData(QVariant userData);
String QWebHistoryItem.title();
QUrl QWebHistoryItem.url();
QVariant QWebHistoryItem.getUserData();
@Virtual void QWebHistoryItem.addEvent(String event_name, dynamic callback_func);
@Virtual void QWebHistoryItem.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWebHistoryItem.parents();

@Virtual void QGraphicsItemAnimation.addEvent(String event_name, dynamic callback_func);
@Virtual void QGraphicsItemAnimation.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMultiMap.addEvent(String event_name, dynamic callback_func);
@Virtual void QMultiMap.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QCDEStyle.drawControl(int element, QStyleOption opt, QPainter p, QWidget widget);
@Virtual @Override void QCDEStyle.drawPrimitive(int pe, QStyleOption opt, QPainter p, QWidget widget);
@Virtual @Override int QCDEStyle.pixelMetric(int metric, QStyleOption option, QWidget widget);
@Virtual @Override QPalette QCDEStyle.standardPalette();
QCDEStyle QCDEStyle.new(boolean useHighlightCols);
@Override @Virtual void QCDEStyle.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QCDEStyle.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QX11EmbedWidget.addEvent(String event_name, dynamic callback_func);
@Virtual void QX11EmbedWidget.signalConnect(String signal_name, dynamic callback_func);


QMovie QMovie.new(QObject parent);
//QMovie QMovie.new(QIODevice device, QByteArray fmt, QObject parent);
//QMovie QMovie.new(String fileName, QByteArray fmt, QObject parent);
QColor QMovie.getBackgroundColor();
int QMovie.getCacheMode();
int QMovie.currentFrameNumber();
QImage QMovie.currentImage();
QPixmap QMovie.currentPixmap();
QIODevice QMovie.getDevice();
String QMovie.getFileName();
QByteArray QMovie.getFormat();
int QMovie.frameCount();
QRect QMovie.frameRect();
boolean QMovie.jumpToFrame(int frameNumber);
int QMovie.loopCount();
int QMovie.nextFrameDelay();
QSize QMovie.getScaledSize();
void QMovie.setBackgroundColor(QColor color);
void QMovie.setCacheMode(int mode);
void QMovie.setDevice(QIODevice device);
void QMovie.setFileName(String fileName);
void QMovie.setFormat(QByteArray fmt);
void QMovie.setScaledSize(QSize size);
int QMovie.getSpeed();
int QMovie.state();
Array<QByteArray> QMovie.supportedFormats();
boolean QMovie.jumpToNextFrame();
void QMovie.setPaused(boolean paused);
void QMovie.setSpeed(int percentSpeed);
void QMovie.start();
void QMovie.stop();
@Override @Virtual void QMovie.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMovie.signalConnect(String signal_name, dynamic callback_func);

QChildEvent QChildEvent.new(int type, QObject child);
boolean QChildEvent.added();
QObject QChildEvent.child();
boolean QChildEvent.polished();
boolean QChildEvent.removed();
@Override @Virtual void QChildEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QChildEvent.signalConnect(String signal_name, dynamic callback_func);

QBrush QPaintEngineState.backgroundBrush();
int QPaintEngineState.backgroundMode();
QBrush QPaintEngineState.brush();
boolean QPaintEngineState.brushNeedsResolving();
QPointF QPaintEngineState.brushOrigin();
int QPaintEngineState.clipOperation();
QPainterPath QPaintEngineState.clipPath();
QRegion QPaintEngineState.clipRegion();
int QPaintEngineState.compositionMode();
QFont QPaintEngineState.font();
boolean QPaintEngineState.isClipEnabled();
float QPaintEngineState.opacity();
QPainter QPaintEngineState.painter();
QPen QPaintEngineState.pen();
boolean QPaintEngineState.penNeedsResolving();
int QPaintEngineState.renderHints();
int QPaintEngineState.state();
QTransform QPaintEngineState.transform();
@Virtual void QPaintEngineState.addEvent(String event_name, dynamic callback_func);
@Virtual void QPaintEngineState.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPaintEngineState.parents();

QMimeData QMimeData.new();
void QMimeData.clear();
QVariant QMimeData.getColorData();
QByteArray QMimeData.getData(String mimeType);
boolean QMimeData.hasColor();
@Virtual boolean QMimeData.hasFormat(String mimeType);
boolean QMimeData.hasHtml();
boolean QMimeData.hasImage();
boolean QMimeData.hasText();
boolean QMimeData.hasUrls();
String QMimeData.getHtml();
QVariant QMimeData.getImageData();
void QMimeData.removeFormat(String mimeType);
void QMimeData.setColorData(QVariant color);
void QMimeData.setData(String mimeType, QByteArray data);
void QMimeData.setHtml(String html);
void QMimeData.setImageData(QVariant image);
void QMimeData.setText(String text);
void QMimeData.setUrls(Array<QUrl> urls);
String QMimeData.getText();
Array<QUrl> QMimeData.getUrls();
@Override @Virtual void QMimeData.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMimeData.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QProxyScreen.addEvent(String event_name, dynamic callback_func);
@Virtual void QProxyScreen.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QString.addEvent(String event_name, dynamic callback_func);
@Virtual void QString.signalConnect(String signal_name, dynamic callback_func);
Array<String> QString.parents();

@Virtual void QTextObjectInterface.drawObject(QPainter painter, QRectF rect, QTextDocument doc, int posInDocument, QTextFormat fmt);
@Virtual QSizeF QTextObjectInterface.intrinsicSize(QTextDocument doc, int posInDocument, QTextFormat fmt);
@Virtual void QTextObjectInterface.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextObjectInterface.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextObjectInterface.parents();

QSslError QSslError.new();
//QSslError QSslError.new(int error);
//QSslError QSslError.new(int error, QSslCertificate certificate);
//QSslError QSslError.new(QSslError other);
QSslCertificate QSslError.certificate();
int QSslError.error();
String QSslError.errorString();
@Virtual void QSslError.addEvent(String event_name, dynamic callback_func);
@Virtual void QSslError.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSslError.parents();

QUndoCommand QUndoCommand.new(QUndoCommand parent);
//QUndoCommand QUndoCommand.new(String text, QUndoCommand parent);
QUndoCommand QUndoCommand.child(int index);
int QUndoCommand.childCount();
@Virtual int QUndoCommand.id();
@Virtual boolean QUndoCommand.mergeWith(QUndoCommand command);
@Virtual void QUndoCommand.redo();
void QUndoCommand.setText(String text);
String QUndoCommand.getText();
@Virtual void QUndoCommand.undo();
@Virtual void QUndoCommand.addEvent(String event_name, dynamic callback_func);
@Virtual void QUndoCommand.signalConnect(String signal_name, dynamic callback_func);
Array<String> QUndoCommand.parents();

@Virtual @Override QSize QTabBar.minimumSizeHint();
@Virtual @Override QSize QTabBar.sizeHint();
QTabBar QTabBar.new(QWidget parent);
int QTabBar.addTab(String text);
//int QTabBar.addTab(QIcon icon, String text);
int QTabBar.count();
int QTabBar.getCurrentIndex();
boolean QTabBar.getDocumentMode();
boolean QTabBar.getDrawBase();
int QTabBar.getElideMode();
boolean QTabBar.getExpanding();
QSize QTabBar.getIconSize();
int QTabBar.insertTab(int index, String text);
//int QTabBar.insertTab(int index, QIcon icon, String text);
boolean QTabBar.isMovable();
boolean QTabBar.isTabEnabled(int index);
void QTabBar.moveTab(int from_, int to_);
void QTabBar.removeTab(int index);
int QTabBar.getSelectionBehaviorOnRemove();
void QTabBar.setDocumentMode(boolean set);
void QTabBar.setDrawBase(boolean drawTheBase);
void QTabBar.setElideMode(int arg0);
void QTabBar.setExpanding(boolean enabled);
void QTabBar.setIconSize(QSize size);
void QTabBar.setMovable(boolean movable);
void QTabBar.setSelectionBehaviorOnRemove(int behavior);
void QTabBar.setShape(int shape);
void QTabBar.setTabButton(int index, int position, QWidget widget);
void QTabBar.setTabData(int index, QVariant data);
void QTabBar.setTabEnabled(int index, boolean enabled);
void QTabBar.setTabIcon(int index, QIcon icon);
void QTabBar.setTabText(int index, String text);
void QTabBar.setTabTextColor(int index, QColor color);
void QTabBar.setTabToolTip(int index, String tip);
void QTabBar.setTabWhatsThis(int index, String text);
void QTabBar.setTabsClosable(boolean closable);
void QTabBar.setUsesScrollButtons(boolean useButtons);
int QTabBar.getShape();
int QTabBar.tabAt(QPoint position);
QWidget QTabBar.getTabButton(int index, int position);
QVariant QTabBar.getTabData(int index);
QIcon QTabBar.getTabIcon(int index);
QRect QTabBar.tabRect(int index);
String QTabBar.getTabText(int index);
QColor QTabBar.getTabTextColor(int index);
String QTabBar.getTabToolTip(int index);
String QTabBar.getTabWhatsThis(int index);
boolean QTabBar.getTabsClosable();
boolean QTabBar.getUsesScrollButtons();
void QTabBar.setCurrentIndex(int index);
@Override @Virtual void QTabBar.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTabBar.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionViewItemV3 QStyleOptionViewItemV3.new();
//QStyleOptionViewItemV3 QStyleOptionViewItemV3.new(QStyleOptionViewItemV3 other);
//QStyleOptionViewItemV3 QStyleOptionViewItemV3.new(QStyleOptionViewItem other);
@Override @Virtual void QStyleOptionViewItemV3.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionViewItemV3.signalConnect(String signal_name, dynamic callback_func);

boolean QAbstractFileEngine.atEnd();
@Virtual boolean QAbstractFileEngine.caseSensitive();
@Virtual boolean QAbstractFileEngine.close();
@Virtual boolean QAbstractFileEngine.copy(String new_Name);
String QAbstractFileEngine.errorString();
@Virtual QAbstractFileEngineFileFlags QAbstractFileEngine.fileFlags(QAbstractFileEngineFileFlags type);
@Virtual String QAbstractFileEngine.getFileName(int file);
@Virtual QDateTime QAbstractFileEngine.fileTime(int time);
@Virtual boolean QAbstractFileEngine.flush();
@Virtual int QAbstractFileEngine.handle();
@Virtual boolean QAbstractFileEngine.isRelativePath();
@Virtual boolean QAbstractFileEngine.isSequential();
@Virtual boolean QAbstractFileEngine.link(String new_Name);
@Virtual boolean QAbstractFileEngine.mkdir(String dirName, boolean createParentDirectories);
@Virtual boolean QAbstractFileEngine.open(int mode);
@Virtual String QAbstractFileEngine.owner(int owner);
@Virtual int QAbstractFileEngine.ownerId(int owner);
@Virtual int QAbstractFileEngine.pos();
@Virtual int QAbstractFileEngine.read(String data, int maxlen);
@Virtual int QAbstractFileEngine.readLine(String data, int maxlen);
@Virtual boolean QAbstractFileEngine.remove();
@Virtual boolean QAbstractFileEngine.rename(String new_Name);
@Virtual boolean QAbstractFileEngine.rmdir(String dirName, boolean recurseParentDirectories);
@Virtual boolean QAbstractFileEngine.seek(int offset);
@Virtual void QAbstractFileEngine.setFileName(String file);
@Virtual boolean QAbstractFileEngine.setPermissions(int perms);
@Virtual boolean QAbstractFileEngine.setSize(int size);
@Virtual int QAbstractFileEngine.getSize();
@Virtual boolean QAbstractFileEngine.supportsExtension(int extension);
boolean QAbstractFileEngine.unmap(String address);
@Virtual int QAbstractFileEngine.write(String data, int len);
QAbstractFileEngine QAbstractFileEngine.create(String fileName);
@Virtual void QAbstractFileEngine.addEvent(String event_name, dynamic callback_func);
@Virtual void QAbstractFileEngine.signalConnect(String signal_name, dynamic callback_func);
Array<String> QAbstractFileEngine.parents();

@Virtual void QSyntaxHighlighter.addEvent(String event_name, dynamic callback_func);
@Virtual void QSyntaxHighlighter.signalConnect(String signal_name, dynamic callback_func);

QSizePolicy QSizePolicy.new();
//QSizePolicy QSizePolicy.new(int horizontal, int vertical);
//QSizePolicy QSizePolicy.new(int horizontal, int vertical, int type);
int QSizePolicy.getControlType();
QtOrientations QSizePolicy.expandingDirections();
boolean QSizePolicy.hasHeightForWidth();
int QSizePolicy.getHorizontalPolicy();
int QSizePolicy.getHorizontalStretch();
void QSizePolicy.setControlType(int type);
void QSizePolicy.setHeightForWidth(boolean dependent);
void QSizePolicy.setHorizontalPolicy(int policy);
void QSizePolicy.setHorizontalStretch(String stretchFactor);
void QSizePolicy.setVerticalPolicy(int policy);
void QSizePolicy.setVerticalStretch(String stretchFactor);
void QSizePolicy.transpose();
int QSizePolicy.getVerticalPolicy();
int QSizePolicy.getVerticalStretch();
@Virtual void QSizePolicy.addEvent(String event_name, dynamic callback_func);
@Virtual void QSizePolicy.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSizePolicy.parents();

QTime QTime.new();
//QTime QTime.new(int h, int m, int s, int ms);
QTime QTime.addMSecs(int ms);
QTime QTime.addSecs(int s);
int QTime.elapsed();
int QTime.hour();
int QTime.minute();
int QTime.msec();
int QTime.msecsTo(QTime t);
int QTime.restart();
int QTime.second();
int QTime.secsTo(QTime t);
boolean QTime.setHMS(int h, int m, int s, int ms);
void QTime.start();
String QTime.toString(String fmt);
//String QTime.toString(int fmt);
QTime QTime.currentTime();
QTime QTime.fromString(String str, int fmt);
//QTime QTime.fromString(String str, String fmt);
@Virtual void QTime.addEvent(String event_name, dynamic callback_func);
@Virtual void QTime.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTime.parents();

@Virtual void QContiguousCache.addEvent(String event_name, dynamic callback_func);
@Virtual void QContiguousCache.signalConnect(String signal_name, dynamic callback_func);
Array<String> QContiguousCache.parents();

@Virtual @Override QSize QFontComboBox.sizeHint();
QFontComboBox QFontComboBox.new(QWidget parent);
QFont QFontComboBox.getCurrentFont();
QFontComboBoxFontFilters QFontComboBox.getFontFilters();
void QFontComboBox.setFontFilters(QFontComboBoxFontFilters filters);
void QFontComboBox.setWritingSystem(int script);
int QFontComboBox.getWritingSystem();
void QFontComboBox.setCurrentFont(QFont font);
@Override @Virtual void QFontComboBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QFontComboBox.signalConnect(String signal_name, dynamic callback_func);

QTimeLine QTimeLine.new(int duration, QObject parent);
int QTimeLine.currentFrame();
int QTimeLine.getCurrentTime();
float QTimeLine.currentValue();
int QTimeLine.getCurveShape();
int QTimeLine.getDirection();
int QTimeLine.getDuration();
QEasingCurve QTimeLine.getEasingCurve();
int QTimeLine.getEndFrame();
int QTimeLine.frameForTime(int msec);
int QTimeLine.getLoopCount();
void QTimeLine.setCurveShape(int shape);
void QTimeLine.setDirection(int direction);
void QTimeLine.setDuration(int duration);
void QTimeLine.setEasingCurve(QEasingCurve curve);
void QTimeLine.setEndFrame(int frame);
void QTimeLine.setFrameRange(int startFrame, int endFrame);
void QTimeLine.setLoopCount(int count);
void QTimeLine.setStartFrame(int frame);
void QTimeLine.setUpdateInterval(int interval);
int QTimeLine.getStartFrame();
int QTimeLine.state();
int QTimeLine.getUpdateInterval();
@Virtual float QTimeLine.valueForTime(int msec);
void QTimeLine.resume();
void QTimeLine.setCurrentTime(int msec);
void QTimeLine.setPaused(boolean paused);
void QTimeLine.start();
void QTimeLine.stop();
void QTimeLine.toggleDirection();
@Override @Virtual void QTimeLine.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTimeLine.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QXmlStreamAttribute.addEvent(String event_name, dynamic callback_func);
@Virtual void QXmlStreamAttribute.signalConnect(String signal_name, dynamic callback_func);
Array<String> QXmlStreamAttribute.parents();

@Virtual void QItemEditorCreatorBase.addEvent(String event_name, dynamic callback_func);
@Virtual void QItemEditorCreatorBase.signalConnect(String signal_name, dynamic callback_func);
Array<String> QItemEditorCreatorBase.parents();

QAction QAction.new(QObject parent);
//QAction QAction.new(String text, QObject parent);
//QAction QAction.new(QIcon icon, String text, QObject parent);
QActionGroup QAction.getActionGroup();
void QAction.activate(int event);
Array<QGraphicsWidget> QAction.associatedGraphicsWidgets();
Array<QWidget> QAction.associatedWidgets();
boolean QAction.getAutoRepeat();
QVariant QAction.getData();
QFont QAction.getFont();
QIcon QAction.getIcon();
String QAction.getIconText();
boolean QAction.isCheckable();
boolean QAction.isChecked();
boolean QAction.isEnabled();
boolean QAction.isIconVisibleInMenu();
boolean QAction.isSeparator();
boolean QAction.isVisible();
QMenu QAction.getMenu();
int QAction.getMenuRole();
QWidget QAction.parentWidget();
int QAction.getPriority();
void QAction.setActionGroup(QActionGroup group);
void QAction.setAutoRepeat(boolean arg0);
void QAction.setCheckable(boolean arg0);
void QAction.setData(QVariant userData);
void QAction.setFont(QFont font);
void QAction.setIcon(QIcon icon);
void QAction.setIconText(String text);
void QAction.setIconVisibleInMenu(boolean visible);
void QAction.setMenu(QMenu menu);
void QAction.setMenuRole(int menuRole);
void QAction.setPriority(int priority);
void QAction.setSeparator(boolean b);
void QAction.setShortcut(QKeySequence shortcut);
void QAction.setShortcutContext(int context);
void QAction.setShortcuts(Array<QKeySequence> shortcuts);
//void QAction.setShortcuts(int key);
void QAction.setSoftKeyRole(int softKeyRole);
void QAction.setStatusTip(String statusTip);
void QAction.setText(String text);
void QAction.setToolTip(String tip);
void QAction.setWhatsThis(String what);
QKeySequence QAction.getShortcut();
int QAction.getShortcutContext();
Array<QKeySequence> QAction.getShortcuts();
boolean QAction.showStatusText(QWidget widget);
int QAction.getSoftKeyRole();
String QAction.getStatusTip();
String QAction.getText();
String QAction.getToolTip();
String QAction.getWhatsThis();
void QAction.hover();
void QAction.setChecked(boolean arg0);
void QAction.setDisabled(boolean b);
void QAction.setEnabled(boolean arg0);
void QAction.setVisible(boolean arg0);
void QAction.toggle();
void QAction.trigger();
@Override @Virtual void QAction.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAction.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QProxyScreenCursor.addEvent(String event_name, dynamic callback_func);
@Virtual void QProxyScreenCursor.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QRectF QGraphicsSimpleTextItem.boundingRect();
@Virtual @Override boolean QGraphicsSimpleTextItem.contains(QPointF point);
@Virtual @Override boolean QGraphicsSimpleTextItem.isObscuredBy(QGraphicsItem item);
@Virtual @Override QPainterPath QGraphicsSimpleTextItem.opaqueArea();
@Virtual @Override void QGraphicsSimpleTextItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override QPainterPath QGraphicsSimpleTextItem.shape();
@Virtual @Override int QGraphicsSimpleTextItem.type();
QGraphicsSimpleTextItem QGraphicsSimpleTextItem.new(QGraphicsItem parent);
//QGraphicsSimpleTextItem QGraphicsSimpleTextItem.new(String text, QGraphicsItem parent);
QFont QGraphicsSimpleTextItem.getFont();
void QGraphicsSimpleTextItem.setFont(QFont font);
void QGraphicsSimpleTextItem.setText(String text);
String QGraphicsSimpleTextItem.getText();
@Override @Virtual void QGraphicsSimpleTextItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsSimpleTextItem.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QCopChannel.addEvent(String event_name, dynamic callback_func);
@Virtual void QCopChannel.signalConnect(String signal_name, dynamic callback_func);

QTextLength QTextLength.new();
//QTextLength QTextLength.new(int type, float value);
float QTextLength.rawValue();
int QTextLength.type();
float QTextLength.value(float maximumLength);
@Virtual void QTextLength.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextLength.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextLength.parents();

@Virtual void QStackedLayout.addEvent(String event_name, dynamic callback_func);
@Virtual void QStackedLayout.signalConnect(String signal_name, dynamic callback_func);

QEventTransition QEventTransition.new(QState sourceState);
//QEventTransition QEventTransition.new(QObject object, int type, QState sourceState);
QObject QEventTransition.getEventSource();
int QEventTransition.getEventType();
void QEventTransition.setEventSource(QObject object);
void QEventTransition.setEventType(int type);
@Override @Virtual void QEventTransition.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QEventTransition.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QRectF QGraphicsLineItem.boundingRect();
@Virtual @Override boolean QGraphicsLineItem.contains(QPointF point);
@Virtual @Override boolean QGraphicsLineItem.isObscuredBy(QGraphicsItem item);
@Virtual @Override QPainterPath QGraphicsLineItem.opaqueArea();
@Virtual @Override void QGraphicsLineItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override QPainterPath QGraphicsLineItem.shape();
@Virtual @Override int QGraphicsLineItem.type();
QGraphicsLineItem QGraphicsLineItem.new(QGraphicsItem parent);
//QGraphicsLineItem QGraphicsLineItem.new(QLineF line, QGraphicsItem parent);
//QGraphicsLineItem QGraphicsLineItem.new(float x1, float y1, float x2, float y2, QGraphicsItem parent);
QLineF QGraphicsLineItem.getLine();
QPen QGraphicsLineItem.getPen();
void QGraphicsLineItem.setLine(QLineF line);
//void QGraphicsLineItem.setLine(float x1, float y1, float x2, float y2);
void QGraphicsLineItem.setPen(QPen pen);
@Override @Virtual void QGraphicsLineItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsLineItem.signalConnect(String signal_name, dynamic callback_func);

void QAbstractTransition.addAnimation(QAbstractAnimation animation);
Array<QAbstractAnimation> QAbstractTransition.animations();
QStateMachine QAbstractTransition.machine();
void QAbstractTransition.removeAnimation(QAbstractAnimation animation);
void QAbstractTransition.setTargetState(QAbstractState target);
void QAbstractTransition.setTargetStates(Array<QAbstractState> targets);
QState QAbstractTransition.sourceState();
QAbstractState QAbstractTransition.getTargetState();
Array<QAbstractState> QAbstractTransition.getTargetStates();
@Override @Virtual void QAbstractTransition.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractTransition.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFlags.addEvent(String event_name, dynamic callback_func);
@Virtual void QFlags.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFlags.parents();

@Virtual @Override QRectF QGraphicsItemGroup.boundingRect();
@Virtual @Override boolean QGraphicsItemGroup.isObscuredBy(QGraphicsItem item);
@Virtual @Override QPainterPath QGraphicsItemGroup.opaqueArea();
@Virtual @Override void QGraphicsItemGroup.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override int QGraphicsItemGroup.type();
QGraphicsItemGroup QGraphicsItemGroup.new(QGraphicsItem parent);
void QGraphicsItemGroup.addToGroup(QGraphicsItem item);
void QGraphicsItemGroup.removeFromGroup(QGraphicsItem item);
@Override @Virtual void QGraphicsItemGroup.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsItemGroup.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QGraphicsTransform.applyTo(QMatrix4x4 matrix);
@Override @Virtual void QGraphicsTransform.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsTransform.signalConnect(String signal_name, dynamic callback_func);

@Virtual QModelIndex QAbstractItemModel.buddy(QModelIndex index);
@Virtual boolean QAbstractItemModel.canFetchMore(QModelIndex parent);
@Virtual QVariant QAbstractItemModel.getData(QModelIndex index, int role);
@Virtual boolean QAbstractItemModel.dropMimeData(QMimeData data, int action, int row, int column, QModelIndex parent);
@Virtual void QAbstractItemModel.fetchMore(QModelIndex parent);
@Virtual QtItemFlags QAbstractItemModel.flags(QModelIndex index);
@Virtual boolean QAbstractItemModel.hasChildren(QModelIndex parent);
boolean QAbstractItemModel.hasIndex(int row, int column, QModelIndex parent);
@Virtual QVariant QAbstractItemModel.getHeaderData(int section, int orientation, int role);
@Virtual boolean QAbstractItemModel.insertColumns(int column, int count, QModelIndex parent);
@Virtual boolean QAbstractItemModel.insertRows(int row, int count, QModelIndex parent);
@Virtual QModelIndexList QAbstractItemModel.match(QModelIndex start, int role, QVariant value, int hits, QtMatchFlags flags);
@Virtual QMimeData QAbstractItemModel.mimeData(QModelIndexList indexes);
@Virtual QModelIndex QAbstractItemModel.parent(QModelIndex index);
boolean QAbstractItemModel.removeColumn(int column, QModelIndex parent);
@Virtual boolean QAbstractItemModel.removeColumns(int column, int count, QModelIndex parent);
boolean QAbstractItemModel.removeRow(int row, QModelIndex parent);
@Virtual boolean QAbstractItemModel.removeRows(int row, int count, QModelIndex parent);
@Virtual boolean QAbstractItemModel.setData(QModelIndex index, QVariant value, int role);
@Virtual boolean QAbstractItemModel.setHeaderData(int section, int orientation, QVariant value, int role);
void QAbstractItemModel.setSupportedDragActions(QtDropActions actions);
QModelIndex QAbstractItemModel.sibling(int row, int column, QModelIndex index);
@Virtual void QAbstractItemModel.sort(int column, int order);
@Virtual QSize QAbstractItemModel.span(QModelIndex index);
QtDropActions QAbstractItemModel.getSupportedDragActions();
@Virtual QtDropActions QAbstractItemModel.supportedDropActions();
@Virtual void QAbstractItemModel.revert();
@Virtual boolean QAbstractItemModel.submit();
@Override @Virtual void QAbstractItemModel.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractItemModel.signalConnect(String signal_name, dynamic callback_func);

QHistoryState QHistoryState.new(QState parent);
//QHistoryState QHistoryState.new(int type, QState parent);
QAbstractState QHistoryState.getDefaultState();
int QHistoryState.getHistoryType();
void QHistoryState.setDefaultState(QAbstractState state);
void QHistoryState.setHistoryType(int type);
@Override @Virtual void QHistoryState.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QHistoryState.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QXmlStreamEntityResolver.addEvent(String event_name, dynamic callback_func);
@Virtual void QXmlStreamEntityResolver.signalConnect(String signal_name, dynamic callback_func);
Array<String> QXmlStreamEntityResolver.parents();

@Virtual @Override boolean QBuffer.atEnd();
@Virtual @Override boolean QBuffer.canReadLine();
@Virtual @Override void QBuffer.close();
@Virtual @Override boolean QBuffer.open(QIODeviceOpenMode flags);
@Virtual @Override int QBuffer.pos();
@Virtual @Override boolean QBuffer.seek(int pos);
@Virtual @Override int QBuffer.size();
QBuffer QBuffer.new(QObject parent);
//QBuffer QBuffer.new(QByteArray byteArray, QObject parent);
QByteArray QBuffer.getBuffer();
//QByteArray QBuffer.getBuffer();
QByteArray QBuffer.getData();
void QBuffer.setBuffer(QByteArray byteArray);
void QBuffer.setData(QByteArray data);
//void QBuffer.setData(String data, int size);
@Override @Virtual void QBuffer.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QBuffer.signalConnect(String signal_name, dynamic callback_func);

QPaintEvent QPaintEvent.new(QRegion paintRegion);
//QPaintEvent QPaintEvent.new(QRect paintRect);
QRect QPaintEvent.rect();
QRegion QPaintEvent.region();
@Override @Virtual void QPaintEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPaintEvent.signalConnect(String signal_name, dynamic callback_func);

QHoverEvent QHoverEvent.new(int type, QPoint pos, QPoint oldPos);
QPoint QHoverEvent.oldPos();
QPoint QHoverEvent.pos();
@Override @Virtual void QHoverEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QHoverEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QStandardItemEditorCreator.addEvent(String event_name, dynamic callback_func);
@Virtual void QStandardItemEditorCreator.signalConnect(String signal_name, dynamic callback_func);

QBasicTimer QBasicTimer.new();
boolean QBasicTimer.isActive();
void QBasicTimer.start(int msec, QObject object);
void QBasicTimer.stop();
int QBasicTimer.timerId();
@Virtual void QBasicTimer.addEvent(String event_name, dynamic callback_func);
@Virtual void QBasicTimer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QBasicTimer.parents();

@Virtual void QValidator.fixup(String input);
QLocale QValidator.getLocale();
void QValidator.setLocale(QLocale locale);
@Virtual int QValidator.validate(String input, int pos);
@Override @Virtual void QValidator.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QValidator.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QWidget QItemDelegate.createEditor(QWidget parent, QStyleOptionViewItem option, QModelIndex index);
@Virtual @Override void QItemDelegate.paint(QPainter painter, QStyleOptionViewItem option, QModelIndex index);
@Virtual @Override void QItemDelegate.setEditorData(QWidget editor, QModelIndex index);
@Virtual @Override void QItemDelegate.setModelData(QWidget editor, QAbstractItemModel model, QModelIndex index);
@Virtual @Override QSize QItemDelegate.sizeHint(QStyleOptionViewItem option, QModelIndex index);
@Virtual @Override void QItemDelegate.updateEditorGeometry(QWidget editor, QStyleOptionViewItem option, QModelIndex index);
QItemDelegate QItemDelegate.new(QObject parent);
boolean QItemDelegate.hasClipping();
QItemEditorFactory QItemDelegate.getItemEditorFactory();
void QItemDelegate.setClipping(boolean clip);
void QItemDelegate.setItemEditorFactory(QItemEditorFactory factory);
@Override @Virtual void QItemDelegate.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QItemDelegate.signalConnect(String signal_name, dynamic callback_func);

QNetworkCookie QNetworkCookie.new(QByteArray name, QByteArray value);
//QNetworkCookie QNetworkCookie.new(QNetworkCookie other);
String QNetworkCookie.getDomain();
QDateTime QNetworkCookie.getExpirationDate();
boolean QNetworkCookie.isHttpOnly();
boolean QNetworkCookie.isSecure();
boolean QNetworkCookie.isSessionCookie();
QByteArray QNetworkCookie.getName();
String QNetworkCookie.getPath();
void QNetworkCookie.setDomain(String domain);
void QNetworkCookie.setExpirationDate(QDateTime date);
void QNetworkCookie.setHttpOnly(boolean enable);
void QNetworkCookie.setName(QByteArray cookieName);
void QNetworkCookie.setPath(String path);
void QNetworkCookie.setSecure(boolean enable);
void QNetworkCookie.setValue(QByteArray value);
QByteArray QNetworkCookie.toRawForm(int form);
QByteArray QNetworkCookie.getValue();
Array<QNetworkCookie> QNetworkCookie.parseCookies(QByteArray cookieString);
@Virtual void QNetworkCookie.addEvent(String event_name, dynamic callback_func);
@Virtual void QNetworkCookie.signalConnect(String signal_name, dynamic callback_func);
Array<String> QNetworkCookie.parents();

QToolBar QToolBar.new(String title, QWidget parent);
//QToolBar QToolBar.new(QWidget parent);
QAction QToolBar.actionAt(QPoint p);
//QAction QToolBar.actionAt(int x, int y);
QAction QToolBar.addSeparator();
QAction QToolBar.addWidget(QWidget widget);
QtToolBarAreas QToolBar.getAllowedAreas();
void QToolBar.clear();
QSize QToolBar.getIconSize();
QAction QToolBar.insertSeparator(QAction before);
QAction QToolBar.insertWidget(QAction before, QWidget widget);
boolean QToolBar.isAreaAllowed(int area);
boolean QToolBar.isFloatable();
boolean QToolBar.isFloating();
boolean QToolBar.isMovable();
int QToolBar.getOrientation();
void QToolBar.setAllowedAreas(QtToolBarAreas areas);
void QToolBar.setFloatable(boolean floatable);
void QToolBar.setMovable(boolean movable);
void QToolBar.setOrientation(int orientation);
QAction QToolBar.toggleViewAction();
int QToolBar.getToolButtonStyle();
QWidget QToolBar.widgetForAction(QAction action);
void QToolBar.setIconSize(QSize iconSize);
void QToolBar.setToolButtonStyle(int toolButtonStyle);
@Override @Virtual void QToolBar.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QToolBar.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QIntValidator.fixup(String input);
@Virtual @Override int QIntValidator.validate(String input, int pos);
QIntValidator QIntValidator.new(QObject parent);
//QIntValidator QIntValidator.new(int minimum, int maximum, QObject parent);
int QIntValidator.getBottom();
void QIntValidator.setBottom(int arg0);
@Virtual void QIntValidator.setRange(int bottom, int top);
void QIntValidator.setTop(int arg0);
int QIntValidator.getTop();
@Override @Virtual void QIntValidator.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QIntValidator.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFlag.addEvent(String event_name, dynamic callback_func);
@Virtual void QFlag.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFlag.parents();

QSystemTrayIcon QSystemTrayIcon.new(QObject parent);
//QSystemTrayIcon QSystemTrayIcon.new(QIcon icon, QObject parent);
QMenu QSystemTrayIcon.getContextMenu();
QRect QSystemTrayIcon.geometry();
QIcon QSystemTrayIcon.getIcon();
boolean QSystemTrayIcon.isVisible();
void QSystemTrayIcon.setContextMenu(QMenu menu);
void QSystemTrayIcon.setIcon(QIcon icon);
void QSystemTrayIcon.setToolTip(String tip);
void QSystemTrayIcon.showMessage(String title, String message, int icon, int millisecondsTimeoutHint);
String QSystemTrayIcon.getToolTip();
boolean QSystemTrayIcon.isSystemTrayAvailable();
boolean QSystemTrayIcon.supportsMessages();
void QSystemTrayIcon.hide();
void QSystemTrayIcon.setVisible(boolean visible);
void QSystemTrayIcon.show();
@Override @Virtual void QSystemTrayIcon.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSystemTrayIcon.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QImageIOPlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QImageIOPlugin.signalConnect(String signal_name, dynamic callback_func);

QNetworkConfiguration QNetworkConfiguration.new();
//QNetworkConfiguration QNetworkConfiguration.new(QNetworkConfiguration other);
String QNetworkConfiguration.bearerName();
int QNetworkConfiguration.bearerType();
String QNetworkConfiguration.bearerTypeName();
Array<QNetworkConfiguration> QNetworkConfiguration.children();
String QNetworkConfiguration.identifier();
boolean QNetworkConfiguration.isRoamingAvailable();
String QNetworkConfiguration.name();
int QNetworkConfiguration.purpose();
QNetworkConfigurationStateFlags QNetworkConfiguration.state();
int QNetworkConfiguration.type();
@Virtual void QNetworkConfiguration.addEvent(String event_name, dynamic callback_func);
@Virtual void QNetworkConfiguration.signalConnect(String signal_name, dynamic callback_func);
Array<String> QNetworkConfiguration.parents();

QUdpSocket QUdpSocket.new(QObject parent);
boolean QUdpSocket.bind(QHostAddress address, int port);
//boolean QUdpSocket.bind(QHostAddress address, int port, QUdpSocketBindMode mode);
//boolean QUdpSocket.bind(int port);
//boolean QUdpSocket.bind(int port, QUdpSocketBindMode mode);
boolean QUdpSocket.hasPendingDatagrams();
int QUdpSocket.pendingDatagramSize();
int QUdpSocket.readDatagram(String data, int maxSize, QHostAddress address, int port);
int QUdpSocket.writeDatagram(String data, int size, QHostAddress address, int port);
//int QUdpSocket.writeDatagram(QByteArray datagram, QHostAddress host, int port);
@Override @Virtual void QUdpSocket.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QUdpSocket.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QTreeWidget.setSelectionModel(QItemSelectionModel selectionModel);
QTreeWidget QTreeWidget.new(QWidget parent);
void QTreeWidget.addTopLevelItem(QTreeWidgetItem item);
void QTreeWidget.addTopLevelItems(Array<QTreeWidgetItem> items);
void QTreeWidget.closePersistentEditorOL(QTreeWidgetItem item, int column);
int QTreeWidget.getColumnCount();
int QTreeWidget.currentColumn();
QTreeWidgetItem QTreeWidget.getCurrentItem();
void QTreeWidget.editItem(QTreeWidgetItem item, int column);
Array<QTreeWidgetItem> QTreeWidget.findItems(String text, QtMatchFlags flags, int column);
QTreeWidgetItem QTreeWidget.getHeaderItem();
int QTreeWidget.indexOfTopLevelItem(QTreeWidgetItem item);
void QTreeWidget.insertTopLevelItem(int index, QTreeWidgetItem item);
void QTreeWidget.insertTopLevelItems(int index, Array<QTreeWidgetItem> items);
QTreeWidgetItem QTreeWidget.invisibleRootItem();
boolean QTreeWidget.isFirstItemColumnSpanned(QTreeWidgetItem item);
QTreeWidgetItem QTreeWidget.itemAbove(QTreeWidgetItem item);
QTreeWidgetItem QTreeWidget.itemAt(QPoint p);
//QTreeWidgetItem QTreeWidget.itemAt(int x, int y);
QTreeWidgetItem QTreeWidget.itemBelow(QTreeWidgetItem item);
QWidget QTreeWidget.getItemWidget(QTreeWidgetItem item, int column);
void QTreeWidget.openPersistentEditorOL(QTreeWidgetItem item, int column);
void QTreeWidget.removeItemWidget(QTreeWidgetItem item, int column);
Array<QTreeWidgetItem> QTreeWidget.selectedItems();
void QTreeWidget.setColumnCount(int columns);
void QTreeWidget.setCurrentItem(QTreeWidgetItem item);
//void QTreeWidget.setCurrentItem(QTreeWidgetItem item, int column);
//void QTreeWidget.setCurrentItem(QTreeWidgetItem item, int column, int command);
void QTreeWidget.setFirstItemColumnSpanned(QTreeWidgetItem item, boolean span);
void QTreeWidget.setHeaderItem(QTreeWidgetItem item);
void QTreeWidget.setHeaderLabel(String label);
void QTreeWidget.setItemWidget(QTreeWidgetItem item, int column, QWidget widget);
int QTreeWidget.sortColumn();
void QTreeWidget.sortItems(int column, int order);
QTreeWidgetItem QTreeWidget.takeTopLevelItem(int index);
QTreeWidgetItem QTreeWidget.topLevelItem(int index);
int QTreeWidget.topLevelItemCount();
QRect QTreeWidget.visualItemRect(QTreeWidgetItem item);
void QTreeWidget.clear();
void QTreeWidget.collapseItem(QTreeWidgetItem item);
void QTreeWidget.expandItem(QTreeWidgetItem item);
void QTreeWidget.scrollToItem(QTreeWidgetItem item, int hint);
@Override @Virtual void QTreeWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTreeWidget.signalConnect(String signal_name, dynamic callback_func);

QInputMethodEvent QInputMethodEvent.new();
//QInputMethodEvent QInputMethodEvent.new(QInputMethodEvent other);
String QInputMethodEvent.getCommitString();
String QInputMethodEvent.preeditString();
int QInputMethodEvent.replacementLength();
int QInputMethodEvent.replacementStart();
void QInputMethodEvent.setCommitString(String commitString, int replaceFrom, int replaceLength);
@Override @Virtual void QInputMethodEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QInputMethodEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QProgressBar.minimumSizeHint();
@Virtual @Override QSize QProgressBar.sizeHint();
QProgressBar QProgressBar.new(QWidget parent);
QtAlignment QProgressBar.getAlignment();
String QProgressBar.getFormat();
boolean QProgressBar.getInvertedAppearance();
//boolean QProgressBar.getInvertedAppearance();
boolean QProgressBar.isTextVisible();
int QProgressBar.getMaximum();
int QProgressBar.getMinimum();
int QProgressBar.getOrientation();
void QProgressBar.setAlignment(QtAlignment alignment);
void QProgressBar.setFormat(String fmt);
void QProgressBar.setInvertedAppearance(boolean invert);
void QProgressBar.setTextDirection(int textDirection);
void QProgressBar.setTextVisible(boolean visible);
@Virtual String QProgressBar.text();
int QProgressBar.getTextDirection();
//int QProgressBar.getTextDirection();
int QProgressBar.getValue();
void QProgressBar.reset();
void QProgressBar.setMaximum(int maximum);
void QProgressBar.setMinimum(int minimum);
void QProgressBar.setOrientation(int arg0);
void QProgressBar.setRange(int minimum, int maximum);
void QProgressBar.setValue(int value);
@Override @Virtual void QProgressBar.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QProgressBar.signalConnect(String signal_name, dynamic callback_func);

QGraphicsSceneResizeEvent QGraphicsSceneResizeEvent.new();
QSizeF QGraphicsSceneResizeEvent.newSize();
QSizeF QGraphicsSceneResizeEvent.oldSize();
@Override @Virtual void QGraphicsSceneResizeEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsSceneResizeEvent.signalConnect(String signal_name, dynamic callback_func);

int QGraphicsSceneMouseEvent.button();
QPointF QGraphicsSceneMouseEvent.buttonDownPos(int button);
QPointF QGraphicsSceneMouseEvent.buttonDownScenePos(int button);
QPoint QGraphicsSceneMouseEvent.buttonDownScreenPos(int button);
QtMouseButtons QGraphicsSceneMouseEvent.buttons();
QPointF QGraphicsSceneMouseEvent.lastPos();
QPointF QGraphicsSceneMouseEvent.lastScenePos();
QPoint QGraphicsSceneMouseEvent.lastScreenPos();
QtKeyboardModifiers QGraphicsSceneMouseEvent.modifiers();
QPointF QGraphicsSceneMouseEvent.pos();
QPointF QGraphicsSceneMouseEvent.scenePos();
QPoint QGraphicsSceneMouseEvent.screenPos();
@Override @Virtual void QGraphicsSceneMouseEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsSceneMouseEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QMdiArea.minimumSizeHint();
@Virtual @Override QSize QMdiArea.sizeHint();
QMdiArea QMdiArea.new(QWidget parent);
int QMdiArea.getActivationOrder();
QMdiSubWindow QMdiArea.getActiveSubWindow();
QMdiSubWindow QMdiArea.addSubWindow(QWidget widget, QtWindowFlags windowFlags);
QBrush QMdiArea.getBackground();
QMdiSubWindow QMdiArea.currentSubWindow();
boolean QMdiArea.getDocumentMode();
void QMdiArea.removeSubWindow(QWidget widget);
void QMdiArea.setActivationOrder(int order);
void QMdiArea.setBackground(QBrush background);
void QMdiArea.setDocumentMode(boolean enabled);
void QMdiArea.setOption(int option, boolean on);
void QMdiArea.setTabPosition(int position);
void QMdiArea.setTabShape(int shape);
void QMdiArea.setViewMode(int mode);
Array<QMdiSubWindow> QMdiArea.subWindowList(int order);
int QMdiArea.getTabPosition();
int QMdiArea.getTabShape();
boolean QMdiArea.testOption(int option);
int QMdiArea.getViewMode();
void QMdiArea.activateNextSubWindow();
void QMdiArea.activatePreviousSubWindow();
void QMdiArea.cascadeSubWindows();
void QMdiArea.closeActiveSubWindow();
void QMdiArea.closeAllSubWindows();
void QMdiArea.setActiveSubWindow(QMdiSubWindow window);
void QMdiArea.tileSubWindows();
@Override @Virtual void QMdiArea.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMdiArea.signalConnect(String signal_name, dynamic callback_func);

QPointF QTapGesture.getPosition();
void QTapGesture.setPosition(QPointF pos);
@Override @Virtual void QTapGesture.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTapGesture.signalConnect(String signal_name, dynamic callback_func);

QWheelEvent QWheelEvent.new(QPoint pos, int delta, QtMouseButtons buttons, QtKeyboardModifiers modifiers, int orient);
//QWheelEvent QWheelEvent.new(QPoint pos, QPoint globalPos, int delta, QtMouseButtons buttons, QtKeyboardModifiers modifiers, int orient);
QtMouseButtons QWheelEvent.buttons();
int QWheelEvent.delta();
QPoint QWheelEvent.globalPos();
int QWheelEvent.globalX();
int QWheelEvent.globalY();
int QWheelEvent.orientation();
QPoint QWheelEvent.pos();
int QWheelEvent.x();
int QWheelEvent.y();
@Override @Virtual void QWheelEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWheelEvent.signalConnect(String signal_name, dynamic callback_func);

QTextLayout QTextLayout.new();
//QTextLayout QTextLayout.new(String text);
//QTextLayout QTextLayout.new(String text, QFont font, QPaintDevice paintdevice);
void QTextLayout.beginLayout();
QRectF QTextLayout.boundingRect();
boolean QTextLayout.getCacheEnabled();
void QTextLayout.clearAdditionalFormats();
void QTextLayout.clearLayout();
QTextLine QTextLayout.createLine();
void QTextLayout.drawCursor(QPainter painter, QPointF position, int cursorPosition, int width);
//void QTextLayout.drawCursor(QPainter painter, QPointF position, int cursorPosition);
void QTextLayout.endLayout();
QFont QTextLayout.getFont();
boolean QTextLayout.isValidCursorPosition(int pos);
QTextLine QTextLayout.lineAt(int i);
int QTextLayout.lineCount();
QTextLine QTextLayout.lineForTextPosition(int pos);
float QTextLayout.maximumWidth();
float QTextLayout.minimumWidth();
int QTextLayout.nextCursorPosition(int oldPos, int mode);
QPointF QTextLayout.getPosition();
int QTextLayout.preeditAreaPosition();
String QTextLayout.preeditAreaText();
int QTextLayout.previousCursorPosition(int oldPos, int mode);
void QTextLayout.setCacheEnabled(boolean enable);
void QTextLayout.setFont(QFont font);
void QTextLayout.setPosition(QPointF p);
void QTextLayout.setPreeditArea(int position, String text);
void QTextLayout.setText(String str);
void QTextLayout.setTextOption(QTextOption option);
String QTextLayout.getText();
QTextOption QTextLayout.getTextOption();
@Virtual void QTextLayout.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextLayout.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextLayout.parents();

QtWindowStates QWindowStateChangeEvent.oldState();
@Override @Virtual void QWindowStateChangeEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWindowStateChangeEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QAbstractFileEngineIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QAbstractFileEngineIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QAbstractFileEngineIterator.parents();

@Virtual void QMap.addEvent(String event_name, dynamic callback_func);
@Virtual void QMap.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMap.parents();

QDockWidget QDockWidget.new(String title, QWidget parent, QtWindowFlags flags);
//QDockWidget QDockWidget.new(QWidget parent, QtWindowFlags flags);
QtDockWidgetAreas QDockWidget.getAllowedAreas();
QDockWidgetDockWidgetFeatures QDockWidget.getFeatures();
boolean QDockWidget.isAreaAllowed(int area);
boolean QDockWidget.isFloating();
void QDockWidget.setAllowedAreas(QtDockWidgetAreas areas);
void QDockWidget.setFeatures(QDockWidgetDockWidgetFeatures features);
void QDockWidget.setFloating(boolean floating);
void QDockWidget.setTitleBarWidget(QWidget widget);
void QDockWidget.setWidget(QWidget widget);
QWidget QDockWidget.getTitleBarWidget();
QAction QDockWidget.toggleViewAction();
QWidget QDockWidget.getWidget();
@Override @Virtual void QDockWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDockWidget.signalConnect(String signal_name, dynamic callback_func);

QStyle QStyleFactory.create(String key);
@Virtual void QStyleFactory.addEvent(String event_name, dynamic callback_func);
@Virtual void QStyleFactory.signalConnect(String signal_name, dynamic callback_func);
Array<String> QStyleFactory.parents();

QPlainTextEdit QPlainTextEdit.new(QWidget parent);
//QPlainTextEdit QPlainTextEdit.new(String text, QWidget parent);
String QPlainTextEdit.anchorAt(QPoint pos);
boolean QPlainTextEdit.getBackgroundVisible();
int QPlainTextEdit.blockCount();
boolean QPlainTextEdit.canPaste();
boolean QPlainTextEdit.getCenterOnScroll();
QMenu QPlainTextEdit.createStandardContextMenu();
QTextCharFormat QPlainTextEdit.getCurrentCharFormat();
QTextCursor QPlainTextEdit.cursorForPosition(QPoint pos);
QRect QPlainTextEdit.cursorRect(QTextCursor cursor);
//QRect QPlainTextEdit.cursorRect();
int QPlainTextEdit.getCursorWidth();
QTextDocument QPlainTextEdit.getDocument();
String QPlainTextEdit.getDocumentTitle();
void QPlainTextEdit.ensureCursorVisible();
Array<int> QPlainTextEdit.getExtraSelections();
boolean QPlainTextEdit.find(String exp, int options);
boolean QPlainTextEdit.isReadOnly();
boolean QPlainTextEdit.isUndoRedoEnabled();
int QPlainTextEdit.getLineWrapMode();
@Virtual QVariant QPlainTextEdit.loadResource(int type, QUrl name);
int QPlainTextEdit.getMaximumBlockCount();
void QPlainTextEdit.mergeCurrentCharFormat(QTextCharFormat modifier);
void QPlainTextEdit.moveCursor(int operation, int mode);
boolean QPlainTextEdit.getOverwriteMode();
void QPlainTextEdit.print(QPrinter printer);
void QPlainTextEdit.setBackgroundVisible(boolean visible);
void QPlainTextEdit.setCenterOnScroll(boolean enabled);
void QPlainTextEdit.setCurrentCharFormat(QTextCharFormat fmt);
void QPlainTextEdit.setCursorWidth(int width);
void QPlainTextEdit.setDocument(QTextDocument document);
void QPlainTextEdit.setDocumentTitle(String title);
void QPlainTextEdit.setExtraSelections(Array<int> selections);
void QPlainTextEdit.setLineWrapMode(int mode);
void QPlainTextEdit.setMaximumBlockCount(int maximum);
void QPlainTextEdit.setOverwriteMode(boolean overwrite);
void QPlainTextEdit.setReadOnly(boolean ro);
void QPlainTextEdit.setTabChangesFocus(boolean b);
void QPlainTextEdit.setTabStopWidth(int width);
void QPlainTextEdit.setTextCursor(QTextCursor cursor);
void QPlainTextEdit.setTextInteractionFlags(QtTextInteractionFlags flags);
void QPlainTextEdit.setUndoRedoEnabled(boolean enable);
void QPlainTextEdit.setWordWrapMode(int policy);
boolean QPlainTextEdit.getTabChangesFocus();
int QPlainTextEdit.getTabStopWidth();
QTextCursor QPlainTextEdit.getTextCursor();
QtTextInteractionFlags QPlainTextEdit.getTextInteractionFlags();
String QPlainTextEdit.toPlainText();
int QPlainTextEdit.getWordWrapMode();
void QPlainTextEdit.appendHtml(String html);
void QPlainTextEdit.appendPlainText(String text);
void QPlainTextEdit.centerCursor();
void QPlainTextEdit.clear();
void QPlainTextEdit.copy();
void QPlainTextEdit.cut();
void QPlainTextEdit.insertPlainText(String text);
void QPlainTextEdit.paste();
void QPlainTextEdit.redo();
void QPlainTextEdit.selectAll();
void QPlainTextEdit.setPlainText(String text);
void QPlainTextEdit.undo();
@Override @Virtual void QPlainTextEdit.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPlainTextEdit.signalConnect(String signal_name, dynamic callback_func);

int QSwipeGesture.horizontalDirection();
void QSwipeGesture.setSwipeAngle(float value);
float QSwipeGesture.getSwipeAngle();
int QSwipeGesture.verticalDirection();
@Override @Virtual void QSwipeGesture.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSwipeGesture.signalConnect(String signal_name, dynamic callback_func);

QConicalGradient QConicalGradient.new();
//QConicalGradient QConicalGradient.new(QPointF center, float angle);
//QConicalGradient QConicalGradient.new(float cx, float cy, float angle);
float QConicalGradient.getAngle();
QPointF QConicalGradient.getCenter();
void QConicalGradient.setAngle(float angle);
void QConicalGradient.setCenter(QPointF center);
//void QConicalGradient.setCenter(float x, float y);
@Override @Virtual void QConicalGradient.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QConicalGradient.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QVector.addEvent(String event_name, dynamic callback_func);
@Virtual void QVector.signalConnect(String signal_name, dynamic callback_func);
Array<String> QVector.parents();

@Virtual void QPauseAnimation.addEvent(String event_name, dynamic callback_func);
@Virtual void QPauseAnimation.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMutableVectorIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QMutableVectorIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMutableVectorIterator.parents();

QStyleOptionMenuItem QStyleOptionMenuItem.new();
//QStyleOptionMenuItem QStyleOptionMenuItem.new(QStyleOptionMenuItem other);
@Override @Virtual void QStyleOptionMenuItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionMenuItem.signalConnect(String signal_name, dynamic callback_func);

QSystemSemaphore QSystemSemaphore.new(String key, int initialValue, int mode);
boolean QSystemSemaphore.acquire();
int QSystemSemaphore.error();
String QSystemSemaphore.errorString();
String QSystemSemaphore.getKey();
boolean QSystemSemaphore.release(int n);
void QSystemSemaphore.setKey(String key, int initialValue, int mode);
@Virtual void QSystemSemaphore.addEvent(String event_name, dynamic callback_func);
@Virtual void QSystemSemaphore.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSystemSemaphore.parents();

@Virtual @Override boolean QWebInspector.event(QEvent ev);
@Virtual @Override QSize QWebInspector.sizeHint();
QWebInspector QWebInspector.new(QWidget parent);
QWebPage QWebInspector.getPage();
void QWebInspector.setPage(QWebPage page);
@Override @Virtual void QWebInspector.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWebInspector.signalConnect(String signal_name, dynamic callback_func);

QDir QDir.new(QDir dir);
//QDir QDir.new(String path);
//QDir QDir.new(String path, String nameFilter, QDirSortFlags sort);
String QDir.absoluteFilePath(String fileName);
String QDir.absolutePath();
String QDir.canonicalPath();
boolean QDir.cd(String dirName);
boolean QDir.cdUp();
int QDir.count();
String QDir.dirName();
boolean QDir.exists(String name);
//boolean QDir.exists();
String QDir.filePath(String fileName);
QDirFilters QDir.getFilter();
boolean QDir.isAbsolute();
boolean QDir.isReadable();
boolean QDir.isRelative();
boolean QDir.isRoot();
boolean QDir.makeAbsolute();
boolean QDir.mkdir(String dirName);
boolean QDir.mkpath(String dirPath);
String QDir.getPath();
void QDir.refresh();
String QDir.relativeFilePath(String fileName);
boolean QDir.remove(String fileName);
boolean QDir.rename(String oldName, String new_Name);
boolean QDir.rmdir(String dirName);
boolean QDir.rmpath(String dirPath);
void QDir.setFilter(QDirFilters filters);
void QDir.setPath(String path);
void QDir.setSorting(QDirSortFlags sort);
QDirSortFlags QDir.getSorting();
void QDir.addSearchPath(String prefix, String path);
String QDir.cleanPath(String path);
QDir QDir.getCurrent();
String QDir.currentPath();
String QDir.fromNativeSeparators(String pathName);
QDir QDir.home();
String QDir.homePath();
boolean QDir.isAbsolutePath(String path);
boolean QDir.isRelativePath(String path);
boolean QDir.match(String filter, String fileName);
QDir QDir.root();
String QDir.rootPath();
QChar QDir.separator();
boolean QDir.setCurrent(String path);
QDir QDir.temp();
String QDir.tempPath();
String QDir.toNativeSeparators(String pathName);
@Virtual void QDir.addEvent(String event_name, dynamic callback_func);
@Virtual void QDir.signalConnect(String signal_name, dynamic callback_func);
Array<String> QDir.parents();

@Virtual void QMapIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QMapIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMapIterator.parents();

@Virtual void QS60MainDocument.addEvent(String event_name, dynamic callback_func);
@Virtual void QS60MainDocument.signalConnect(String signal_name, dynamic callback_func);
Array<String> QS60MainDocument.parents();

@Virtual void QSet.addEvent(String event_name, dynamic callback_func);
@Virtual void QSet.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSet.parents();

QTabletEvent QTabletEvent.new(int type, QPoint pos, QPoint globalPos, QPointF hiResGlobalPos, int device, int pointerType, float pressure, int xTilt, int yTilt, float tangentialPressure, float rotation, int z, QtKeyboardModifiers keyState, int uniqueID);
int QTabletEvent.device();
QPoint QTabletEvent.globalPos();
int QTabletEvent.globalX();
int QTabletEvent.globalY();
QPointF QTabletEvent.hiResGlobalPos();
float QTabletEvent.hiResGlobalX();
float QTabletEvent.hiResGlobalY();
int QTabletEvent.pointerType();
QPoint QTabletEvent.pos();
float QTabletEvent.pressure();
float QTabletEvent.rotation();
float QTabletEvent.tangentialPressure();
int QTabletEvent.uniqueId();
int QTabletEvent.x();
int QTabletEvent.xTilt();
int QTabletEvent.y();
int QTabletEvent.yTilt();
int QTabletEvent.z();
@Override @Virtual void QTabletEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTabletEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QSessionManager.addEvent(String event_name, dynamic callback_func);
@Virtual void QSessionManager.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWindowsVistaStyle.addEvent(String event_name, dynamic callback_func);
@Virtual void QWindowsVistaStyle.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QMdiSubWindow.minimumSizeHint();
@Virtual @Override QSize QMdiSubWindow.sizeHint();
QMdiSubWindow QMdiSubWindow.new(QWidget parent, QtWindowFlags flags);
boolean QMdiSubWindow.isShaded();
int QMdiSubWindow.getKeyboardPageStep();
int QMdiSubWindow.getKeyboardSingleStep();
QMdiArea QMdiSubWindow.mdiArea();
void QMdiSubWindow.setKeyboardPageStep(int step);
void QMdiSubWindow.setKeyboardSingleStep(int step);
void QMdiSubWindow.setOption(int option, boolean on);
void QMdiSubWindow.setSystemMenu(QMenu systemMenu);
void QMdiSubWindow.setWidget(QWidget widget);
QMenu QMdiSubWindow.getSystemMenu();
boolean QMdiSubWindow.testOption(int option);
QWidget QMdiSubWindow.getWidget();
void QMdiSubWindow.showShaded();
void QMdiSubWindow.showSystemMenu();
@Override @Virtual void QMdiSubWindow.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMdiSubWindow.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QScopedPointer.addEvent(String event_name, dynamic callback_func);
@Virtual void QScopedPointer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QScopedPointer.parents();

@Virtual @Override void QMessageBox.setVisible(boolean visible);
QMessageBox QMessageBox.new(QWidget parent);
//QMessageBox QMessageBox.new(int icon, String title, String text, QMessageBoxStandardButtons buttons, QWidget parent, QtWindowFlags f);
void QMessageBox.addButton(QAbstractButton button, int role);
//QPushButton QMessageBox.addButton(String text, int role);
//QPushButton QMessageBox.addButton(int button);
QAbstractButton QMessageBox.button(int which);
int QMessageBox.buttonRole(QAbstractButton button);
Array<QAbstractButton> QMessageBox.buttons();
QAbstractButton QMessageBox.clickedButton();
QPushButton QMessageBox.getDefaultButton();
String QMessageBox.getDetailedText();
QAbstractButton QMessageBox.getEscapeButton();
int QMessageBox.getIcon();
QPixmap QMessageBox.getIconPixmap();
String QMessageBox.getInformativeText();
void QMessageBox.open(QObject receiver, String member);
void QMessageBox.removeButton(QAbstractButton button);
void QMessageBox.setDefaultButton(QPushButton button);
//void QMessageBox.setDefaultButton(int button);
void QMessageBox.setDetailedText(String text);
void QMessageBox.setEscapeButton(QAbstractButton button);
//void QMessageBox.setEscapeButton(int button);
void QMessageBox.setIcon(int arg0);
void QMessageBox.setIconPixmap(QPixmap pixmap);
void QMessageBox.setInformativeText(String text);
void QMessageBox.setStandardButtons(QMessageBoxStandardButtons buttons);
void QMessageBox.setText(String text);
void QMessageBox.setTextFormat(int fmt);
void QMessageBox.setWindowModality(int windowModality);
void QMessageBox.setWindowTitle(String title);
int QMessageBox.standardButton(QAbstractButton button);
QMessageBoxStandardButtons QMessageBox.getStandardButtons();
String QMessageBox.getText();
int QMessageBox.getTextFormat();
void QMessageBox.about(QWidget parent, String title, String text);
void QMessageBox.aboutQt(QWidget parent, String title);
int QMessageBox.critical(QWidget parent, String title, String text, QMessageBoxStandardButtons buttons, int defaultButton);
int QMessageBox.information(QWidget parent, String title, String text, QMessageBoxStandardButtons buttons, int defaultButton);
int QMessageBox.question(QWidget parent, String title, String text, QMessageBoxStandardButtons buttons, int defaultButton);
int QMessageBox.warning(QWidget parent, String title, String text, QMessageBoxStandardButtons buttons, int defaultButton);
int QMessageBox.exec();
@Override @Virtual void QMessageBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMessageBox.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override int QGraphicsGridLayout.count();
@Virtual @Override void QGraphicsGridLayout.invalidate();
@Virtual @Override QGraphicsLayoutItem QGraphicsGridLayout.itemAt(int index);
@Virtual @Override void QGraphicsGridLayout.removeAt(int index);
@Virtual @Override void QGraphicsGridLayout.setGeometry(QRectF rect);
@Virtual @Override QSizeF QGraphicsGridLayout.sizeHint(int which, QSizeF constraint);
QGraphicsGridLayout QGraphicsGridLayout.new(QGraphicsLayoutItem parent);
void QGraphicsGridLayout.addItem(QGraphicsLayoutItem item, int row, int column, int rowSpan, int columnSpan, QtAlignment alignment);
//void QGraphicsGridLayout.addItem(QGraphicsLayoutItem item, int row, int column, QtAlignment alignment);
QtAlignment QGraphicsGridLayout.getAlignment(QGraphicsLayoutItem item);
QtAlignment QGraphicsGridLayout.getColumnAlignment(int column);
int QGraphicsGridLayout.columnCount();
float QGraphicsGridLayout.getColumnMaximumWidth(int column);
float QGraphicsGridLayout.getColumnMinimumWidth(int column);
float QGraphicsGridLayout.getColumnPreferredWidth(int column);
float QGraphicsGridLayout.getColumnSpacing(int column);
int QGraphicsGridLayout.getColumnStretchFactor(int column);
float QGraphicsGridLayout.getHorizontalSpacing();
//QGraphicsLayoutItem QGraphicsGridLayout.itemAt(int row, int column);
QtAlignment QGraphicsGridLayout.getRowAlignment(int row);
int QGraphicsGridLayout.rowCount();
float QGraphicsGridLayout.getRowMaximumHeight(int row);
float QGraphicsGridLayout.getRowMinimumHeight(int row);
float QGraphicsGridLayout.getRowPreferredHeight(int row);
float QGraphicsGridLayout.getRowSpacing(int row);
int QGraphicsGridLayout.getRowStretchFactor(int row);
void QGraphicsGridLayout.setAlignment(QGraphicsLayoutItem item, QtAlignment alignment);
void QGraphicsGridLayout.setColumnAlignment(int column, QtAlignment alignment);
void QGraphicsGridLayout.setColumnFixedWidth(int column, float width);
void QGraphicsGridLayout.setColumnMaximumWidth(int column, float width);
void QGraphicsGridLayout.setColumnMinimumWidth(int column, float width);
void QGraphicsGridLayout.setColumnPreferredWidth(int column, float width);
void QGraphicsGridLayout.setColumnSpacing(int column, float spacing);
void QGraphicsGridLayout.setColumnStretchFactor(int column, int stretch);
void QGraphicsGridLayout.setHorizontalSpacing(float spacing);
void QGraphicsGridLayout.setRowAlignment(int row, QtAlignment alignment);
void QGraphicsGridLayout.setRowFixedHeight(int row, float height);
void QGraphicsGridLayout.setRowMaximumHeight(int row, float height);
void QGraphicsGridLayout.setRowMinimumHeight(int row, float height);
void QGraphicsGridLayout.setRowPreferredHeight(int row, float height);
void QGraphicsGridLayout.setRowSpacing(int row, float spacing);
void QGraphicsGridLayout.setRowStretchFactor(int row, int stretch);
void QGraphicsGridLayout.setSpacing(float spacing);
void QGraphicsGridLayout.setVerticalSpacing(float spacing);
float QGraphicsGridLayout.getVerticalSpacing();
@Override @Virtual void QGraphicsGridLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsGridLayout.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionComplex QStyleOptionComplex.new(int version, int type);
//QStyleOptionComplex QStyleOptionComplex.new(QStyleOptionComplex other);
@Override @Virtual void QStyleOptionComplex.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionComplex.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override String QAccessibleObject.actionText(int action, int t, int child);
@Virtual @Override boolean QAccessibleObject.doAction(int action, int child, QVariantList params);
@Virtual @Override QObject QAccessibleObject.object();
@Virtual @Override QRect QAccessibleObject.rect(int child);
@Virtual @Override void QAccessibleObject.setText(int t, int child, String text);
@Virtual @Override int QAccessibleObject.userActionCount(int child);
@Override @Virtual void QAccessibleObject.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAccessibleObject.signalConnect(String signal_name, dynamic callback_func);

@Override @Virtual void QTextBlockGroup.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextBlockGroup.signalConnect(String signal_name, dynamic callback_func);

QImageReader QImageReader.new();
//QImageReader QImageReader.new(QIODevice device, QByteArray fmt);
//QImageReader QImageReader.new(String fileName, QByteArray fmt);
boolean QImageReader.getAutoDetectImageFormat();
QColor QImageReader.getBackgroundColor();
boolean QImageReader.canRead();
QRect QImageReader.getClipRect();
int QImageReader.currentImageNumber();
QRect QImageReader.currentImageRect();
boolean QImageReader.getDecideFormatFromContent();
QIODevice QImageReader.getDevice();
int QImageReader.error();
String QImageReader.errorString();
String QImageReader.getFileName();
QByteArray QImageReader.getFormat();
int QImageReader.imageCount();
int QImageReader.imageFormat();
boolean QImageReader.jumpToImage(int imageNumber);
boolean QImageReader.jumpToNextImage();
int QImageReader.loopCount();
int QImageReader.nextImageDelay();
int QImageReader.getQuality();
QImage QImageReader.read();
//boolean QImageReader.read(QImage image);
QRect QImageReader.getScaledClipRect();
QSize QImageReader.getScaledSize();
void QImageReader.setAutoDetectImageFormat(boolean enabled);
void QImageReader.setBackgroundColor(QColor color);
void QImageReader.setClipRect(QRect rect);
void QImageReader.setDecideFormatFromContent(boolean ignored);
void QImageReader.setDevice(QIODevice device);
void QImageReader.setFileName(String fileName);
void QImageReader.setFormat(QByteArray fmt);
void QImageReader.setQuality(int quality);
void QImageReader.setScaledClipRect(QRect rect);
void QImageReader.setScaledSize(QSize size);
QSize QImageReader.size();
boolean QImageReader.supportsAnimation();
boolean QImageReader.supportsOption(int option);
String QImageReader.text(String key);
//QByteArray QImageReader.imageFormat(String fileName);
//QByteArray QImageReader.imageFormat(QIODevice device);
Array<QByteArray> QImageReader.supportedImageFormats();
@Virtual void QImageReader.addEvent(String event_name, dynamic callback_func);
@Virtual void QImageReader.signalConnect(String signal_name, dynamic callback_func);
Array<String> QImageReader.parents();

QStyleOptionTabWidgetFrameV2 QStyleOptionTabWidgetFrameV2.new();
//QStyleOptionTabWidgetFrameV2 QStyleOptionTabWidgetFrameV2.new(QStyleOptionTabWidgetFrameV2 other);
//QStyleOptionTabWidgetFrameV2 QStyleOptionTabWidgetFrameV2.new(QStyleOptionTabWidgetFrame other);
@Override @Virtual void QStyleOptionTabWidgetFrameV2.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionTabWidgetFrameV2.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QtOrientations QLayout.expandingDirections();
@Virtual @Override QRect QLayout.getGeometry();
@Virtual @Override void QLayout.invalidate();
@Virtual @Override boolean QLayout.isEmpty();
@Virtual @Override QLayout QLayout.layout();
@Virtual @Override QSize QLayout.maximumSize();
@Virtual @Override QSize QLayout.minimumSize();
@Virtual @Override void QLayout.setGeometry(QRect r);
//boolean QLayout.activate();
@Virtual void QLayout.addItem(QLayoutItem item);
void QLayout.addWidgetOL(QWidget w);
QMargins QLayout.contentsMargins();
QRect QLayout.contentsRect();
@Virtual int QLayout.count();
void QLayout.getContentsMargins(int left, int top, int right, int bottom);
@Virtual int QLayout.indexOf(QWidget widget);
boolean QLayout.isEnabled();
@Virtual QLayoutItem QLayout.itemAt(int index);
QWidget QLayout.getMenuBar();
QWidget QLayout.parentWidget();
void QLayout.removeItem(QLayoutItem item);
void QLayout.removeWidget(QWidget widget);
boolean QLayout.setAlignmentOL(QWidget w, QtAlignment alignment);
//void QLayout.setAlignmentOL(QtAlignment alignment);
//boolean QLayout.setAlignmentOL(QLayout l, QtAlignment alignment);
void QLayout.setContentsMargins(int left, int top, int right, int bottom);
//void QLayout.setContentsMargins(QMargins margins);
void QLayout.setEnabled(boolean enable);
void QLayout.setMenuBar(QWidget widget);
void QLayout.setSizeConstraint(int arg0);
@Virtual void QLayout.setSpacing(int arg0);
int QLayout.getSizeConstraint();
@Virtual int QLayout.getSpacing();
@Virtual QLayoutItem QLayout.takeAt(int index);
void QLayout.update();
QSize QLayout.closestAcceptableSize(QWidget widget, QSize size);
@Override @Virtual void QLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QLayout.signalConnect(String signal_name, dynamic callback_func);

QRect QRect.new();
//QRect QRect.new(QPoint topLeft, QPoint bottomRight);
//QRect QRect.new(QPoint topLeft, QSize size);
//QRect QRect.new(int x, int y, int width, int height);
void QRect.adjust(int dx1, int dy1, int dx2, int dy2);
QRect QRect.adjusted(int dx1, int dy1, int dx2, int dy2);
int QRect.getBottom();
QPoint QRect.getBottomLeft();
QPoint QRect.getBottomRight();
QPoint QRect.center();
boolean QRect.contains(QPoint point, boolean proper);
//boolean QRect.contains(int x, int y, boolean proper);
//boolean QRect.contains(int x, int y);
//boolean QRect.contains(QRect rectangle, boolean proper);
void QRect.getCoords(int x1, int y1, int x2, int y2);
void QRect.getRect(int x, int y, int width, int height);
int QRect.getHeight();
QRect QRect.intersected(QRect rectangle);
boolean QRect.intersects(QRect rectangle);
boolean QRect.isEmpty();
int QRect.getLeft();
void QRect.moveBottom(int y);
void QRect.moveBottomLeft(QPoint position);
void QRect.moveBottomRight(QPoint position);
void QRect.moveCenter(QPoint position);
void QRect.moveLeft(int x);
void QRect.moveRight(int x);
void QRect.moveTo(int x, int y);
//void QRect.moveTo(QPoint position);
void QRect.moveTop(int y);
void QRect.moveTopLeft(QPoint position);
void QRect.moveTopRight(QPoint position);
QRect QRect.normalized();
int QRect.getRight();
void QRect.setBottom(int y);
void QRect.setBottomLeft(QPoint position);
void QRect.setBottomRight(QPoint position);
void QRect.setCoords(int x1, int y1, int x2, int y2);
void QRect.setHeight(int height);
void QRect.setLeft(int x);
void QRect.setRect(int x, int y, int width, int height);
void QRect.setRight(int x);
void QRect.setSize(QSize size);
void QRect.setTop(int y);
void QRect.setTopLeft(QPoint position);
void QRect.setTopRight(QPoint position);
void QRect.setWidth(int width);
void QRect.setX(int x);
void QRect.setY(int y);
QSize QRect.getSize();
int QRect.getTop();
QPoint QRect.getTopLeft();
QPoint QRect.getTopRight();
void QRect.translate(int dx, int dy);
//void QRect.translate(QPoint offset);
QRect QRect.translated(int dx, int dy);
//QRect QRect.translated(QPoint offset);
QRect QRect.united(QRect rectangle);
int QRect.getWidth();
int QRect.getX();
int QRect.getY();
@Virtual void QRect.addEvent(String event_name, dynamic callback_func);
@Virtual void QRect.signalConnect(String signal_name, dynamic callback_func);
Array<String> QRect.parents();

int QPaintDevice.colorCount();
@Virtual int QPaintDevice.depth();
@Virtual int QPaintDevice.height();
int QPaintDevice.heightMM();
int QPaintDevice.logicalDpiX();
int QPaintDevice.logicalDpiY();
int QPaintDevice.numColors();
@Virtual QPaintEngine QPaintDevice.paintEngine();
boolean QPaintDevice.paintingActive();
int QPaintDevice.physicalDpiX();
int QPaintDevice.physicalDpiY();
@Virtual int QPaintDevice.width();
int QPaintDevice.widthMM();
@Virtual void QPaintDevice.addEvent(String event_name, dynamic callback_func);
@Virtual void QPaintDevice.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPaintDevice.parents();

@Virtual void QFileSystemModel.addEvent(String event_name, dynamic callback_func);
@Virtual void QFileSystemModel.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QProgressDialog.sizeHint();
QProgressDialog QProgressDialog.new(QWidget parent, QtWindowFlags f);
//QProgressDialog QProgressDialog.new(String labelText, String cancelButtonText, int minimum, int maximum, QWidget parent, QtWindowFlags f);
boolean QProgressDialog.getAutoClose();
boolean QProgressDialog.autoReset();
String QProgressDialog.getLabelText();
int QProgressDialog.getMaximum();
int QProgressDialog.getMinimum();
int QProgressDialog.getMinimumDuration();
void QProgressDialog.openOL(QObject receiver, String member);
void QProgressDialog.setAutoClose(boolean close);
void QProgressDialog.setAutoReset(boolean reset);
void QProgressDialog.setBar(QProgressBar bar);
void QProgressDialog.setCancelButton(QPushButton cancelButton);
void QProgressDialog.setLabel(QLabel label);
int QProgressDialog.getValue();
boolean QProgressDialog.wasCanceled();
void QProgressDialog.cancel();
void QProgressDialog.reset();
void QProgressDialog.setCancelButtonText(String cancelButtonText);
void QProgressDialog.setLabelText(String text);
void QProgressDialog.setMaximum(int maximum);
void QProgressDialog.setMinimum(int minimum);
void QProgressDialog.setMinimumDuration(int ms);
void QProgressDialog.setRange(int minimum, int maximum);
void QProgressDialog.setValue(int progress);
@Override @Virtual void QProgressDialog.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QProgressDialog.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionFrameV2 QStyleOptionFrameV2.new();
//QStyleOptionFrameV2 QStyleOptionFrameV2.new(QStyleOptionFrameV2 other);
//QStyleOptionFrameV2 QStyleOptionFrameV2.new(QStyleOptionFrame other);
@Override @Virtual void QStyleOptionFrameV2.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionFrameV2.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QS60Style.addEvent(String event_name, dynamic callback_func);
@Virtual void QS60Style.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QGestureRecognizer.addEvent(String event_name, dynamic callback_func);
@Virtual void QGestureRecognizer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QGestureRecognizer.parents();

QDebug QDebug.new(QIODevice device);
//QDebug QDebug.new(String str);
//QDebug QDebug.new(QtMsgType type);
//QDebug QDebug.new(QDebug other);
QDebug QDebug.maybeSpace();
QDebug QDebug.nospace();
QDebug QDebug.space();
@Virtual void QDebug.addEvent(String event_name, dynamic callback_func);
@Virtual void QDebug.signalConnect(String signal_name, dynamic callback_func);
Array<String> QDebug.parents();

QItemEditorFactory QItemEditorFactory.new();
@Virtual QWidget QItemEditorFactory.createEditor(int type, QWidget parent);
void QItemEditorFactory.registerEditor(int type, QItemEditorCreatorBase creator);
@Virtual QByteArray QItemEditorFactory.valuePropertyName(int type);
QItemEditorFactory QItemEditorFactory.getDefaultFactory();
void QItemEditorFactory.setDefaultFactory(QItemEditorFactory factory);
@Virtual void QItemEditorFactory.addEvent(String event_name, dynamic callback_func);
@Virtual void QItemEditorFactory.signalConnect(String signal_name, dynamic callback_func);
Array<String> QItemEditorFactory.parents();

void QGraphicsObject.grabGesture(int gesture, QtGestureFlags flags);
void QGraphicsObject.ungrabGesture(int gesture);
@Override @Virtual void QGraphicsObject.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsObject.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QDirIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QDirIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QDirIterator.parents();

QStaticText QStaticText.new();
//QStaticText QStaticText.new(String text);
//QStaticText QStaticText.new(QStaticText other);
int QStaticText.getPerformanceHint();
void QStaticText.prepare(QTransform matrix, QFont font);
void QStaticText.setPerformanceHint(int performanceHint);
void QStaticText.setText(String text);
void QStaticText.setTextFormat(int textFormat);
void QStaticText.setTextOption(QTextOption textOption);
void QStaticText.setTextWidth(float textWidth);
QSizeF QStaticText.size();
String QStaticText.getText();
int QStaticText.getTextFormat();
QTextOption QStaticText.getTextOption();
float QStaticText.getTextWidth();
@Virtual void QStaticText.addEvent(String event_name, dynamic callback_func);
@Virtual void QStaticText.signalConnect(String signal_name, dynamic callback_func);
Array<String> QStaticText.parents();

@Virtual int QAbstractPrintDialog.exec();
int QAbstractPrintDialog.fromPage();
int QAbstractPrintDialog.maxPage();
int QAbstractPrintDialog.minPage();
int QAbstractPrintDialog.getPrintRange();
@Virtual QPrinter QAbstractPrintDialog.printer();
void QAbstractPrintDialog.setFromTo(int from_, int to_);
void QAbstractPrintDialog.setMinMax(int min, int max);
void QAbstractPrintDialog.setOptionTabs(Array<QWidget> tabs);
void QAbstractPrintDialog.setPrintRange(int range);
int QAbstractPrintDialog.toPage();
@Override @Virtual void QAbstractPrintDialog.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractPrintDialog.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QPropertyAnimation.addEvent(String event_name, dynamic callback_func);
@Virtual void QPropertyAnimation.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QGraphicsProxyWidget.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override void QGraphicsProxyWidget.setGeometry(QRectF rect);
@Virtual @Override int QGraphicsProxyWidget.type();
QGraphicsProxyWidget QGraphicsProxyWidget.new(QGraphicsItem parent, QtWindowFlags wFlags);
QGraphicsProxyWidget QGraphicsProxyWidget.createProxyForChildWidget(QWidget child);
void QGraphicsProxyWidget.setWidget(QWidget widget);
QRectF QGraphicsProxyWidget.subWidgetRect(QWidget widget);
QWidget QGraphicsProxyWidget.getWidget();
@Override @Virtual void QGraphicsProxyWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsProxyWidget.signalConnect(String signal_name, dynamic callback_func);

@Virtual QSize QIconEngine.actualSize(QSize size, int mode, int state);
@Virtual void QIconEngine.addFile(String fileName, QSize size, int mode, int state);
@Virtual void QIconEngine.addPixmap(QPixmap pixmap, int mode, int state);
@Virtual void QIconEngine.paint(QPainter painter, QRect rect, int mode, int state);
@Virtual QPixmap QIconEngine.pixmap(QSize size, int mode, int state);
@Virtual void QIconEngine.addEvent(String event_name, dynamic callback_func);
@Virtual void QIconEngine.signalConnect(String signal_name, dynamic callback_func);
Array<String> QIconEngine.parents();

QUndoGroup QUndoGroup.new(QObject parent);
QUndoStack QUndoGroup.getActiveStack();
void QUndoGroup.addStack(QUndoStack stack);
boolean QUndoGroup.canRedo();
boolean QUndoGroup.canUndo();
QAction QUndoGroup.createRedoAction(QObject parent, String prefix);
QAction QUndoGroup.createUndoAction(QObject parent, String prefix);
boolean QUndoGroup.isClean();
String QUndoGroup.redoText();
void QUndoGroup.removeStack(QUndoStack stack);
Array<QUndoStack> QUndoGroup.stacks();
String QUndoGroup.undoText();
void QUndoGroup.redo();
void QUndoGroup.setActiveStack(QUndoStack stack);
void QUndoGroup.undo();
@Override @Virtual void QUndoGroup.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QUndoGroup.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QPaintEngine QWidget.paintEngine();
QWidget QWidget.new(QWidget parent, QtWindowFlags f);
boolean QWidget.getAcceptDrops();
String QWidget.getAccessibleDescription();
String QWidget.getAccessibleName();
Array<QAction> QWidget.actions();
void QWidget.activateWindow();
void QWidget.addActions(Array<QAction> actions);
void QWidget.adjustSize();
boolean QWidget.getAutoFillBackground();
int QWidget.getBackgroundRole();
QSize QWidget.getBaseSize();
QWidget QWidget.childAt(int x, int y);
//QWidget QWidget.childAt(QPoint p);
QRect QWidget.childrenRect();
QRegion QWidget.childrenRegion();
void QWidget.clearFocus();
void QWidget.clearMask();
QMargins QWidget.contentsMargins();
QRect QWidget.contentsRect();
int QWidget.getContextMenuPolicy();
QCursor QWidget.getCursor();
void QWidget.ensurePolished();
int QWidget.getFocusPolicy();
QWidget QWidget.getFocusProxy();
QWidget QWidget.focusWidget();
QFont QWidget.getFont();
QFontInfo QWidget.fontInfo();
QFontMetrics QWidget.fontMetrics();
int QWidget.getForegroundRole();
QRect QWidget.frameGeometry();
QSize QWidget.frameSize();
QRect QWidget.getGeometry();
void QWidget.getContentsMargins(int left, int top, int right, int bottom);
void QWidget.grabGesture(int gesture, QtGestureFlags flags);
void QWidget.grabKeyboard();
void QWidget.grabMouse();
//void QWidget.grabMouse(QCursor cursor);
int QWidget.grabShortcut(QKeySequence key, int context);
QGraphicsEffect QWidget.getGraphicsEffect();
QGraphicsProxyWidget QWidget.graphicsProxyWidget();
boolean QWidget.hasFocus();
boolean QWidget.hasMouseTracking();
int QWidget.height();
@Virtual int QWidget.heightForWidth(int w);
QInputContext QWidget.getInputContext();
QtInputMethodHints QWidget.getInputMethodHints();
@Virtual QVariant QWidget.inputMethodQuery(int query);
void QWidget.insertAction(QAction before, QAction action);
void QWidget.insertActions(QAction before, Array<QAction> actions);
boolean QWidget.isActiveWindow();
boolean QWidget.isAncestorOf(QWidget child);
boolean QWidget.isEnabled();
boolean QWidget.isEnabledTo(QWidget ancestor);
boolean QWidget.isFullScreen();
boolean QWidget.isHidden();
boolean QWidget.isMaximized();
boolean QWidget.isMinimized();
boolean QWidget.isModal();
boolean QWidget.isVisible();
boolean QWidget.isVisibleTo(QWidget ancestor);
boolean QWidget.isWindow();
boolean QWidget.isWindowModified();
QLayout QWidget.getLayout();
int QWidget.getLayoutDirection();
QLocale QWidget.getLocale();
QPoint QWidget.mapFrom(QWidget parent, QPoint pos);
QPoint QWidget.mapFromGlobal(QPoint pos);
QPoint QWidget.mapFromParent(QPoint pos);
QPoint QWidget.mapTo(QWidget parent, QPoint pos);
QPoint QWidget.mapToGlobal(QPoint pos);
QPoint QWidget.mapToParent(QPoint pos);
QRegion QWidget.getMask();
int QWidget.getMaximumHeight();
QSize QWidget.getMaximumSize();
int QWidget.getMaximumWidth();
int QWidget.getMinimumHeight();
QSize QWidget.getMinimumSize();
@Virtual QSize QWidget.minimumSizeHint();
int QWidget.getMinimumWidth();
void QWidget.move(QPoint arg0);
//void QWidget.move(int x, int y);
QWidget QWidget.nativeParentWidget();
QWidget QWidget.nextInFocusChain();
QRect QWidget.normalGeometry();
void QWidget.overrideWindowFlags(QtWindowFlags flags);
QPalette QWidget.getPalette();
QWidget QWidget.parentWidget();
QPoint QWidget.pos();
QWidget QWidget.previousInFocusChain();
QRect QWidget.rect();
void QWidget.releaseKeyboard();
void QWidget.releaseMouse();
void QWidget.releaseShortcut(int id);
void QWidget.removeAction(QAction action);
void QWidget.render(QPaintDevice target, QPoint targetOffset, QRegion sourceRegion, QWidgetRenderFlags renderFlags);
//void QWidget.render(QPainter painter, QPoint targetOffset, QRegion sourceRegion, QWidgetRenderFlags renderFlags);
void QWidget.repaint(int x, int y, int w, int h);
//void QWidget.repaint(QRect rect);
//void QWidget.repaint(QRegion rgn);
void QWidget.resize(QSize arg0);
//void QWidget.resize(int w, int h);
boolean QWidget.restoreGeometry(QByteArray geometry);
QByteArray QWidget.saveGeometry();
void QWidget.scroll(int dx, int dy);
//void QWidget.scroll(int dx, int dy, QRect r);
void QWidget.setAcceptDrops(boolean on);
void QWidget.setAccessibleDescription(String description);
void QWidget.setAccessibleName(String name);
void QWidget.setAttribute(int attribute, boolean on);
void QWidget.setAutoFillBackground(boolean enabled);
void QWidget.setBackgroundRole(int role);
void QWidget.setBaseSize(QSize arg0);
//void QWidget.setBaseSize(int basew, int baseh);
void QWidget.setContentsMargins(int left, int top, int right, int bottom);
//void QWidget.setContentsMargins(QMargins margins);
void QWidget.setContextMenuPolicy(int policy);
void QWidget.setCursor(QCursor arg0);
void QWidget.setFixedHeight(int h);
void QWidget.setFixedSize(QSize s);
//void QWidget.setFixedSize(int w, int h);
void QWidget.setFixedWidth(int w);
void QWidget.setFocus(int reason);
void QWidget.setFocusPolicy(int policy);
void QWidget.setFocusProxy(QWidget w);
void QWidget.setFont(QFont arg0);
void QWidget.setForegroundRole(int role);
void QWidget.setGeometry(QRect arg0);
//void QWidget.setGeometry(int x, int y, int w, int h);
void QWidget.setGraphicsEffect(QGraphicsEffect effect);
void QWidget.setInputContext(QInputContext context);
void QWidget.setInputMethodHints(QtInputMethodHints hints);
void QWidget.setLayout(QLayout layout);
void QWidget.setLayoutDirection(int direction);
void QWidget.setLocale(QLocale locale);
void QWidget.setMask(QBitmap bitmap);
//void QWidget.setMask(QRegion region);
void QWidget.setMaximumHeight(int maxh);
void QWidget.setMaximumSize(QSize arg0);
//void QWidget.setMaximumSize(int maxw, int maxh);
void QWidget.setMaximumWidth(int maxw);
void QWidget.setMinimumHeight(int minh);
void QWidget.setMinimumSize(QSize arg0);
//void QWidget.setMinimumSize(int minw, int minh);
void QWidget.setMinimumWidth(int minw);
void QWidget.setMouseTracking(boolean enable);
void QWidget.setPalette(QPalette arg0);
void QWidget.setParentOL(QWidget parent);
//void QWidget.setParentOL(QWidget parent, QtWindowFlags f);
void QWidget.setShortcutAutoRepeat(int id, boolean enable);
void QWidget.setShortcutEnabled(int id, boolean enable);
void QWidget.setSizeIncrement(QSize arg0);
//void QWidget.setSizeIncrement(int w, int h);
void QWidget.setSizePolicy(QSizePolicy arg0);
//void QWidget.setSizePolicy(int horizontal, int vertical);
void QWidget.setStatusTip(String arg0);
void QWidget.setStyle(QStyle style);
void QWidget.setToolTip(String arg0);
void QWidget.setUpdatesEnabled(boolean enable);
void QWidget.setWhatsThis(String arg0);
void QWidget.setWindowFilePath(String filePath);
void QWidget.setWindowFlags(QtWindowFlags type);
void QWidget.setWindowIcon(QIcon icon);
void QWidget.setWindowIconText(String arg0);
@Virtual void QWidget.setWindowModality(int windowModality);
void QWidget.setWindowOpacity(float level);
void QWidget.setWindowRole(String role);
void QWidget.setWindowState(QtWindowStates windowState);
QSize QWidget.size();
@Virtual QSize QWidget.sizeHint();
QSize QWidget.getSizeIncrement();
QSizePolicy QWidget.getSizePolicy();
void QWidget.stackUnder(QWidget w);
String QWidget.getStatusTip();
QStyle QWidget.getStyle();
String QWidget.getStyleSheet();
boolean QWidget.testAttribute(int attribute);
String QWidget.getToolTip();
boolean QWidget.underMouse();
void QWidget.ungrabGesture(int gesture);
void QWidget.unsetCursor();
void QWidget.unsetLayoutDirection();
void QWidget.unsetLocale();
void QWidget.updateOL(int x, int y, int w, int h);
//void QWidget.updateOL(QRect rect);
//void QWidget.updateOL(QRegion rgn);
void QWidget.updateOLGeometry();
boolean QWidget.getUpdatesEnabled();
QRegion QWidget.visibleRegion();
String QWidget.getWhatsThis();
int QWidget.width();
QWidget QWidget.window();
String QWidget.getWindowFilePath();
QtWindowFlags QWidget.getWindowFlags();
QIcon QWidget.getWindowIcon();
String QWidget.getWindowIconText();
int QWidget.getWindowModality();
float QWidget.getWindowOpacity();
String QWidget.getWindowRole();
QtWindowStates QWidget.getWindowState();
String QWidget.getWindowTitle();
int QWidget.windowType();
int QWidget.x();
int QWidget.y();
QWidget QWidget.keyboardGrabber();
QWidget QWidget.mouseGrabber();
void QWidget.setTabOrder(QWidget first, QWidget second);
boolean QWidget.close();
void QWidget.hide();
void QWidget.lower();
void QWidget.raise();
//void QWidget.repaint();
void QWidget.setDisabled(boolean disable);
void QWidget.setEnabled(boolean arg0);
//void QWidget.setFocus();
void QWidget.setHidden(boolean hidden);
void QWidget.setStyleSheet(String styleSheet);
@Virtual void QWidget.setVisible(boolean visible);
void QWidget.setWindowModified(boolean arg0);
@Virtual void QWidget.setWindowTitle(String arg0);
void QWidget.show();
void QWidget.showFullScreen();
void QWidget.showMaximized();
void QWidget.showMinimized();
void QWidget.showNormal();
//void QWidget.updateOL();
@Override @Virtual void QWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWidget.signalConnect(String signal_name, dynamic callback_func);

boolean QGraphicsItem.getAcceptDrops();
boolean QGraphicsItem.getAcceptHoverEvents();
boolean QGraphicsItem.getAcceptTouchEvents();
QtMouseButtons QGraphicsItem.getAcceptedMouseButtons();
@Virtual void QGraphicsItem.advance(int phase);
@Virtual QRectF QGraphicsItem.boundingRect();
QRegion QGraphicsItem.boundingRegion(QTransform itemToDeviceTransform);
float QGraphicsItem.getBoundingRegionGranularity();
int QGraphicsItem.getCacheMode();
Array<QGraphicsItem> QGraphicsItem.childItems();
QRectF QGraphicsItem.childrenBoundingRect();
void QGraphicsItem.clearFocus();
QPainterPath QGraphicsItem.clipPath();
@Virtual boolean QGraphicsItem.collidesWithItem(QGraphicsItem other, int mode);
@Virtual boolean QGraphicsItem.collidesWithPath(QPainterPath path, int mode);
Array<QGraphicsItem> QGraphicsItem.collidingItems(int mode);
QGraphicsItem QGraphicsItem.commonAncestorItem(QGraphicsItem other);
@Virtual boolean QGraphicsItem.contains(QPointF point);
QCursor QGraphicsItem.getCursor();
QVariant QGraphicsItem.getData(int key);
QTransform QGraphicsItem.deviceTransform(QTransform viewportTransform);
float QGraphicsItem.effectiveOpacity();
void QGraphicsItem.ensureVisible(QRectF rect, int xmargin, int ymargin);
//void QGraphicsItem.ensureVisible(float x, float y, float w, float h, int xmargin, int ymargin);
boolean QGraphicsItem.getFiltersChildEvents();
QGraphicsItemGraphicsItemFlags QGraphicsItem.getFlags();
QGraphicsItem QGraphicsItem.focusItem();
QGraphicsItem QGraphicsItem.getFocusProxy();
void QGraphicsItem.grabKeyboard();
void QGraphicsItem.grabMouse();
QGraphicsEffect QGraphicsItem.getGraphicsEffect();
QGraphicsItemGroup QGraphicsItem.getGroup();
boolean QGraphicsItem.hasCursor();
boolean QGraphicsItem.hasFocus();
void QGraphicsItem.hide();
QtInputMethodHints QGraphicsItem.getInputMethodHints();
boolean QGraphicsItem.isActive();
boolean QGraphicsItem.isAncestorOf(QGraphicsItem child);
boolean QGraphicsItem.isBlockedByModalPanel(QGraphicsItem blockingPanel);
boolean QGraphicsItem.isClipped();
boolean QGraphicsItem.isEnabled();
boolean QGraphicsItem.isObscured();
//boolean QGraphicsItem.isObscured(float x, float y, float w, float h);
//boolean QGraphicsItem.isObscured(QRectF rect);
@Virtual boolean QGraphicsItem.isObscuredBy(QGraphicsItem item);
boolean QGraphicsItem.isPanel();
boolean QGraphicsItem.isSelected();
boolean QGraphicsItem.isUnderMouse();
boolean QGraphicsItem.isVisible();
boolean QGraphicsItem.isVisibleTo(QGraphicsItem parent);
boolean QGraphicsItem.isWidget();
boolean QGraphicsItem.isWindow();
QTransform QGraphicsItem.itemTransform(QGraphicsItem other, boolean ok);
QPointF QGraphicsItem.mapFromItem(QGraphicsItem item, QPointF point);
//QPolygonF QGraphicsItem.mapFromItem(QGraphicsItem item, QRectF rect);
//QPolygonF QGraphicsItem.mapFromItem(QGraphicsItem item, QPolygonF polygon);
//QPainterPath QGraphicsItem.mapFromItem(QGraphicsItem item, QPainterPath path);
//QPolygonF QGraphicsItem.mapFromItem(QGraphicsItem item, float x, float y, float w, float h);
//QPointF QGraphicsItem.mapFromItem(QGraphicsItem item, float x, float y);
QPointF QGraphicsItem.mapFromParent(QPointF point);
//QPolygonF QGraphicsItem.mapFromParent(QRectF rect);
//QPolygonF QGraphicsItem.mapFromParent(QPolygonF polygon);
//QPainterPath QGraphicsItem.mapFromParent(QPainterPath path);
//QPolygonF QGraphicsItem.mapFromParent(float x, float y, float w, float h);
//QPointF QGraphicsItem.mapFromParent(float x, float y);
QPointF QGraphicsItem.mapFromScene(QPointF point);
//QPolygonF QGraphicsItem.mapFromScene(QRectF rect);
//QPolygonF QGraphicsItem.mapFromScene(QPolygonF polygon);
//QPainterPath QGraphicsItem.mapFromScene(QPainterPath path);
//QPolygonF QGraphicsItem.mapFromScene(float x, float y, float w, float h);
//QPointF QGraphicsItem.mapFromScene(float x, float y);
QRectF QGraphicsItem.mapRectFromItem(QGraphicsItem item, QRectF rect);
//QRectF QGraphicsItem.mapRectFromItem(QGraphicsItem item, float x, float y, float w, float h);
QRectF QGraphicsItem.mapRectFromParent(QRectF rect);
//QRectF QGraphicsItem.mapRectFromParent(float x, float y, float w, float h);
QRectF QGraphicsItem.mapRectFromScene(QRectF rect);
//QRectF QGraphicsItem.mapRectFromScene(float x, float y, float w, float h);
QRectF QGraphicsItem.mapRectToItem(QGraphicsItem item, QRectF rect);
//QRectF QGraphicsItem.mapRectToItem(QGraphicsItem item, float x, float y, float w, float h);
QRectF QGraphicsItem.mapRectToParent(QRectF rect);
//QRectF QGraphicsItem.mapRectToParent(float x, float y, float w, float h);
QRectF QGraphicsItem.mapRectToScene(QRectF rect);
//QRectF QGraphicsItem.mapRectToScene(float x, float y, float w, float h);
QPointF QGraphicsItem.mapToItem(QGraphicsItem item, QPointF point);
//QPolygonF QGraphicsItem.mapToItem(QGraphicsItem item, QRectF rect);
//QPolygonF QGraphicsItem.mapToItem(QGraphicsItem item, QPolygonF polygon);
//QPainterPath QGraphicsItem.mapToItem(QGraphicsItem item, QPainterPath path);
//QPolygonF QGraphicsItem.mapToItem(QGraphicsItem item, float x, float y, float w, float h);
//QPointF QGraphicsItem.mapToItem(QGraphicsItem item, float x, float y);
QPointF QGraphicsItem.mapToParent(QPointF point);
//QPolygonF QGraphicsItem.mapToParent(QRectF rect);
//QPolygonF QGraphicsItem.mapToParent(QPolygonF polygon);
//QPainterPath QGraphicsItem.mapToParent(QPainterPath path);
//QPolygonF QGraphicsItem.mapToParent(float x, float y, float w, float h);
//QPointF QGraphicsItem.mapToParent(float x, float y);
QPointF QGraphicsItem.mapToScene(QPointF point);
//QPolygonF QGraphicsItem.mapToScene(QRectF rect);
//QPolygonF QGraphicsItem.mapToScene(QPolygonF polygon);
//QPainterPath QGraphicsItem.mapToScene(QPainterPath path);
//QPolygonF QGraphicsItem.mapToScene(float x, float y, float w, float h);
//QPointF QGraphicsItem.mapToScene(float x, float y);
void QGraphicsItem.moveBy(float dx, float dy);
float QGraphicsItem.getOpacity();
@Virtual QPainterPath QGraphicsItem.opaqueArea();
@Virtual void QGraphicsItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
QGraphicsItem QGraphicsItem.panel();
int QGraphicsItem.getPanelModality();
QGraphicsItem QGraphicsItem.getParentItem();
QGraphicsObject QGraphicsItem.parentObject();
QGraphicsWidget QGraphicsItem.parentWidget();
QPointF QGraphicsItem.getPos();
void QGraphicsItem.resetTransform();
float QGraphicsItem.getRotation();
float QGraphicsItem.getScale();
QGraphicsScene QGraphicsItem.scene();
QRectF QGraphicsItem.sceneBoundingRect();
QPointF QGraphicsItem.scenePos();
QTransform QGraphicsItem.sceneTransform();
void QGraphicsItem.scroll(float dx, float dy, QRectF rect);
void QGraphicsItem.setAcceptDrops(boolean on);
void QGraphicsItem.setAcceptHoverEvents(boolean enabled);
void QGraphicsItem.setAcceptTouchEvents(boolean enabled);
void QGraphicsItem.setAcceptedMouseButtons(QtMouseButtons buttons);
void QGraphicsItem.setActive(boolean active);
void QGraphicsItem.setBoundingRegionGranularity(float granularity);
void QGraphicsItem.setCacheMode(int mode, QSize logicalCacheSize);
void QGraphicsItem.setCursor(QCursor cursor);
void QGraphicsItem.setData(int key, QVariant value);
void QGraphicsItem.setEnabled(boolean enabled);
void QGraphicsItem.setFiltersChildEvents(boolean enabled);
void QGraphicsItem.setFlag(int flag, boolean enabled);
void QGraphicsItem.setFlags(QGraphicsItemGraphicsItemFlags flags);
void QGraphicsItem.setFocus(int focusReason);
void QGraphicsItem.setFocusProxy(QGraphicsItem item);
void QGraphicsItem.setGraphicsEffect(QGraphicsEffect effect);
void QGraphicsItem.setGroup(QGraphicsItemGroup group);
void QGraphicsItem.setInputMethodHints(QtInputMethodHints hints);
void QGraphicsItem.setOpacity(float opacity);
void QGraphicsItem.setPanelModality(int panelModality);
void QGraphicsItem.setParentItem(QGraphicsItem new_Parent);
void QGraphicsItem.setPos(QPointF pos);
//void QGraphicsItem.setPos(float x, float y);
void QGraphicsItem.setRotation(float angle);
void QGraphicsItem.setScale(float factor);
void QGraphicsItem.setSelected(boolean selected);
void QGraphicsItem.setToolTip(String toolTip);
void QGraphicsItem.setTransform(QTransform matrix, boolean combine);
void QGraphicsItem.setTransformOriginPoint(QPointF origin);
//void QGraphicsItem.setTransformOriginPoint(float x, float y);
void QGraphicsItem.setTransformations(Array<QGraphicsTransform> transformations);
void QGraphicsItem.setVisible(boolean visible);
void QGraphicsItem.setX(float x);
void QGraphicsItem.setY(float y);
void QGraphicsItem.setZValue(float z);
@Virtual QPainterPath QGraphicsItem.shape();
void QGraphicsItem.show();
void QGraphicsItem.stackBefore(QGraphicsItem sibling);
QGraphicsObject QGraphicsItem.toGraphicsObject();
//QGraphicsObject QGraphicsItem.toGraphicsObject();
String QGraphicsItem.getToolTip();
QGraphicsItem QGraphicsItem.topLevelItem();
QGraphicsWidget QGraphicsItem.topLevelWidget();
QTransform QGraphicsItem.getTransform();
QPointF QGraphicsItem.getTransformOriginPoint();
Array<QGraphicsTransform> QGraphicsItem.getTransformations();
@Virtual int QGraphicsItem.type();
void QGraphicsItem.ungrabKeyboard();
void QGraphicsItem.ungrabMouse();
void QGraphicsItem.unsetCursor();
void QGraphicsItem.update(QRectF rect);
//void QGraphicsItem.update(float x, float y, float width, float height);
QGraphicsWidget QGraphicsItem.window();
float QGraphicsItem.getX();
float QGraphicsItem.getY();
float QGraphicsItem.getZValue();
@Virtual void QGraphicsItem.addEvent(String event_name, dynamic callback_func);
@Virtual void QGraphicsItem.signalConnect(String signal_name, dynamic callback_func);
Array<String> QGraphicsItem.parents();

QWebElement QWebElement.new();
//QWebElement QWebElement.new(QWebElement other);
void QWebElement.addClass(String name);
void QWebElement.appendInside(String markup);
//void QWebElement.appendInside(QWebElement element);
void QWebElement.appendOutside(String markup);
//void QWebElement.appendOutside(QWebElement element);
String QWebElement.getAttribute(String name, String defaultValue);
String QWebElement.getAttributeNS(String namespaceUri, String name, String defaultValue);
QWebElement QWebElement.clone();
QWebElement QWebElement.document();
void QWebElement.encloseContentsWith(QWebElement element);
//void QWebElement.encloseContentsWith(String markup);
void QWebElement.encloseWith(String markup);
//void QWebElement.encloseWith(QWebElement element);
QVariant QWebElement.evaluateJavaScript(String scriptSource);
QWebElementCollection QWebElement.findAll(String selectorQuery);
QWebElement QWebElement.findFirst(String selectorQuery);
QWebElement QWebElement.firstChild();
QRect QWebElement.geometry();
boolean QWebElement.hasAttribute(String name);
boolean QWebElement.hasAttributeNS(String namespaceUri, String name);
boolean QWebElement.hasAttributes();
boolean QWebElement.hasClass(String name);
boolean QWebElement.hasFocus();
QWebElement QWebElement.lastChild();
String QWebElement.localName();
String QWebElement.namespaceUri();
QWebElement QWebElement.nextSibling();
QWebElement QWebElement.parent();
String QWebElement.prefix();
void QWebElement.prependInside(String markup);
//void QWebElement.prependInside(QWebElement element);
void QWebElement.prependOutside(String markup);
//void QWebElement.prependOutside(QWebElement element);
QWebElement QWebElement.previousSibling();
void QWebElement.removeAllChildren();
void QWebElement.removeAttribute(String name);
void QWebElement.removeAttributeNS(String namespaceUri, String name);
void QWebElement.removeClass(String name);
void QWebElement.removeFromDocument();
void QWebElement.render(QPainter painter);
void QWebElement.replace(String markup);
//void QWebElement.replace(QWebElement element);
void QWebElement.setAttribute(String name, String value);
void QWebElement.setAttributeNS(String namespaceUri, String name, String value);
void QWebElement.setFocus();
void QWebElement.setInnerXml(String markup);
void QWebElement.setOuterXml(String markup);
void QWebElement.setPlainText(String text);
void QWebElement.setStyleProperty(String name, String value);
String QWebElement.getStyleProperty(String name, int strategy);
String QWebElement.tagName();
QWebElement QWebElement.takeFromDocument();
String QWebElement.toInnerXml();
String QWebElement.toOuterXml();
String QWebElement.toPlainText();
void QWebElement.toggleClass(String name);
QWebFrame QWebElement.webFrame();
@Virtual void QWebElement.addEvent(String event_name, dynamic callback_func);
@Virtual void QWebElement.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWebElement.parents();

@Virtual @Override void QNetworkReply.close();
@Virtual void QNetworkReply.abort();
QVariant QNetworkReply.attribute(int code);
int QNetworkReply.error();
boolean QNetworkReply.hasRawHeader(QByteArray headerName);
QVariant QNetworkReply.header(int header);
void QNetworkReply.ignoreSslErrors(Array<QSslError> errors);
boolean QNetworkReply.isFinished();
boolean QNetworkReply.isRunning();
QNetworkAccessManager QNetworkReply.manager();
int QNetworkReply.operation();
QByteArray QNetworkReply.rawHeader(QByteArray headerName);
Array<QByteArray> QNetworkReply.rawHeaderList();
int QNetworkReply.getReadBufferSize();
QNetworkRequest QNetworkReply.request();
@Virtual void QNetworkReply.setReadBufferSize(int size);
void QNetworkReply.setSslConfiguration(QSslConfiguration config);
QSslConfiguration QNetworkReply.getSslConfiguration();
QUrl QNetworkReply.url();
//@Virtual void QNetworkReply.ignoreSslErrors();
@Override @Virtual void QNetworkReply.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QNetworkReply.signalConnect(String signal_name, dynamic callback_func);

QPointF QPointF.new();
//QPointF QPointF.new(QPoint point);
//QPointF QPointF.new(float x, float y);
float QPointF.manhattanLength();
float QPointF.rx();
float QPointF.ry();
void QPointF.setX(float x);
void QPointF.setY(float y);
QPoint QPointF.toPoint();
float QPointF.getX();
float QPointF.getY();
@Virtual void QPointF.addEvent(String event_name, dynamic callback_func);
@Virtual void QPointF.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPointF.parents();

@Virtual @Override boolean QGraphicsWebView.event(QEvent event);
@Virtual @Override QVariant QGraphicsWebView.inputMethodQuery(int query);
@Virtual @Override QVariant QGraphicsWebView.itemChange(int change, QVariant value);
@Virtual @Override void QGraphicsWebView.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override void QGraphicsWebView.setGeometry(QRectF rect);
@Virtual @Override QSizeF QGraphicsWebView.sizeHint(int which, QSizeF constraint);
@Virtual @Override void QGraphicsWebView.updateGeometry();
QGraphicsWebView QGraphicsWebView.new(QGraphicsItem parent);
boolean QGraphicsWebView.findText(String subString, int options);
QWebHistory QGraphicsWebView.history();
QIcon QGraphicsWebView.icon();
boolean QGraphicsWebView.isModified();
boolean QGraphicsWebView.isTiledBackingStoreFrozen();
void QGraphicsWebView.load(QUrl url);
//void QGraphicsWebView.load(QNetworkRequest request, int operation, QByteArray body);
QWebPage QGraphicsWebView.getPage();
QAction QGraphicsWebView.pageAction(int action);
boolean QGraphicsWebView.getResizesToContents();
void QGraphicsWebView.setContent(QByteArray data, String mimeType, QUrl baseUrl);
void QGraphicsWebView.setHtml(String html, QUrl baseUrl);
void QGraphicsWebView.setPage(QWebPage page);
void QGraphicsWebView.setResizesToContents(boolean enabled);
void QGraphicsWebView.setTiledBackingStoreFrozen(boolean frozen);
void QGraphicsWebView.setUrl(QUrl arg0);
void QGraphicsWebView.setZoomFactor(float arg0);
QWebSettings QGraphicsWebView.settings();
String QGraphicsWebView.title();
void QGraphicsWebView.triggerPageAction(int action, boolean checked);
QUrl QGraphicsWebView.getUrl();
float QGraphicsWebView.getZoomFactor();
void QGraphicsWebView.back();
void QGraphicsWebView.forward();
void QGraphicsWebView.reload();
void QGraphicsWebView.stop();
@Override @Virtual void QGraphicsWebView.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsWebView.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QXmlStreamEntityDeclaration.addEvent(String event_name, dynamic callback_func);
@Virtual void QXmlStreamEntityDeclaration.signalConnect(String signal_name, dynamic callback_func);
Array<String> QXmlStreamEntityDeclaration.parents();

@Virtual void QTemporaryFile.addEvent(String event_name, dynamic callback_func);
@Virtual void QTemporaryFile.signalConnect(String signal_name, dynamic callback_func);

QMetaEnum QMetaProperty.enumerator();
boolean QMetaProperty.hasNotifySignal();
boolean QMetaProperty.isConstant();
boolean QMetaProperty.isDesignable(QObject object);
boolean QMetaProperty.isEnumType();
boolean QMetaProperty.isFinal();
boolean QMetaProperty.isFlagType();
boolean QMetaProperty.isReadable();
boolean QMetaProperty.isResettable();
boolean QMetaProperty.isScriptable(QObject object);
boolean QMetaProperty.isStored(QObject object);
boolean QMetaProperty.isUser(QObject object);
boolean QMetaProperty.isWritable();
String QMetaProperty.name();
QMetaMethod QMetaProperty.notifySignal();
int QMetaProperty.notifySignalIndex();
int QMetaProperty.propertyIndex();
QVariant QMetaProperty.read(QObject object);
boolean QMetaProperty.reset(QObject object);
int QMetaProperty.type();
String QMetaProperty.typeName();
int QMetaProperty.userType();
boolean QMetaProperty.write(QObject object, QVariant value);
@Virtual void QMetaProperty.addEvent(String event_name, dynamic callback_func);
@Virtual void QMetaProperty.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMetaProperty.parents();

QPixmap QPixmap.new();
//QPixmap QPixmap.new(int width, int height);
//QPixmap QPixmap.new(String fileName, String fmt, QtImageConversionFlags flags);
//QPixmap QPixmap.new(QPixmap pixmap);
//QPixmap QPixmap.new(QSize size);
int QPixmap.cacheKey();
boolean QPixmap.convertFromImage(QImage image, QtImageConversionFlags flags);
QPixmap QPixmap.copy(QRect rectangle);
//QPixmap QPixmap.copy(int x, int y, int width, int height);
QBitmap QPixmap.createHeuristicMask(boolean clipTight);
QBitmap QPixmap.createMaskFromColor(QColor maskColor, int mode);
//QBitmap QPixmap.createMaskFromColor(QColor maskColor);
int QPixmap.depth();
void QPixmap.detach();
void QPixmap.fill(QColor color);
//void QPixmap.fill(QWidget widget, QPoint offset);
//void QPixmap.fill(QWidget widget, int x, int y);
boolean QPixmap.hasAlpha();
boolean QPixmap.hasAlphaChannel();
int QPixmap.height();
boolean QPixmap.isQBitmap();
boolean QPixmap.load(String fileName, String fmt, QtImageConversionFlags flags);
boolean QPixmap.loadFromData(String data, int len, String fmt, QtImageConversionFlags flags);
//boolean QPixmap.loadFromData(QByteArray data, String fmt, QtImageConversionFlags flags);
QBitmap QPixmap.getMask();
QRect QPixmap.rect();
boolean QPixmap.save(String fileName, String fmt, int quality);
//boolean QPixmap.save(QIODevice device, String fmt, int quality);
QPixmap QPixmap.scaled(QSize size, int aspectRatioMode, int transformMode);
//QPixmap QPixmap.scaled(int width, int height, int aspectRatioMode, int transformMode);
QPixmap QPixmap.scaledToHeight(int height, int mode);
QPixmap QPixmap.scaledToWidth(int width, int mode);
void QPixmap.scroll(int dx, int dy, int x, int y, int width, int height, QRegion exposed);
//void QPixmap.scroll(int dx, int dy, QRect rect, QRegion exposed);
void QPixmap.setMask(QBitmap mask);
QSize QPixmap.size();
QImage QPixmap.toImage();
int QPixmap.width();
int QPixmap.defaultDepth();
QPixmap QPixmap.fromImageOL(QImage image, QtImageConversionFlags flags);
QPixmap QPixmap.fromImageOLReader(QImageReader imageReader, QtImageConversionFlags flags);
QPixmap QPixmap.grabWidget(QWidget widget, QRect rectangle);
//QPixmap QPixmap.grabWidget(QWidget widget, int x, int y, int width, int height);
QTransform QPixmap.trueMatrix(QTransform matrix, int width, int height);
//QMatrix QPixmap.trueMatrix(QMatrix m, int w, int h);
@Override @Virtual void QPixmap.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPixmap.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QImageIOHandler.addEvent(String event_name, dynamic callback_func);
@Virtual void QImageIOHandler.signalConnect(String signal_name, dynamic callback_func);
Array<String> QImageIOHandler.parents();

@Virtual @Override void QPrintDialog.done(int result);
@Virtual @Override int QPrintDialog.exec();
@Virtual @Override void QPrintDialog.setVisible(boolean visible);
QPrintDialog QPrintDialog.new(QPrinter printer, QWidget parent);
//QPrintDialog QPrintDialog.new(QWidget parent);
void QPrintDialog.open(QObject receiver, String member);
QAbstractPrintDialogPrintDialogOptions QPrintDialog.getOptions();
QPrinter QPrintDialog.printer();
void QPrintDialog.setOption(int option, boolean on);
void QPrintDialog.setOptions(QAbstractPrintDialogPrintDialogOptions options);
boolean QPrintDialog.testOption(int option);
@Override @Virtual void QPrintDialog.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPrintDialog.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWeakPointer.addEvent(String event_name, dynamic callback_func);
@Virtual void QWeakPointer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWeakPointer.parents();

@Virtual void QVector4D.addEvent(String event_name, dynamic callback_func);
@Virtual void QVector4D.signalConnect(String signal_name, dynamic callback_func);
Array<String> QVector4D.parents();

@Virtual @Override QSize QSplitterHandle.sizeHint();
QSplitterHandle QSplitterHandle.new(int orientation, QSplitter parent);
boolean QSplitterHandle.opaqueResize();
int QSplitterHandle.getOrientation();
void QSplitterHandle.setOrientation(int orientation);
QSplitter QSplitterHandle.splitter();
@Override @Virtual void QSplitterHandle.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSplitterHandle.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QStateMachine.addEvent(String event_name, dynamic callback_func);
@Virtual void QStateMachine.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QApplication.notify(QObject receiver, QEvent e);
QApplication QApplication.new(int argc, String argv);
//QApplication QApplication.new(int argc, String argv, boolean GUIenabled);
//QApplication QApplication.new(int argc, String argv, int type);
QInputContext QApplication.getInputContext();
boolean QApplication.isSessionRestored();
String QApplication.sessionId();
String QApplication.sessionKey();
void QApplication.setInputContext(QInputContext inputContext);
String QApplication.getStyleSheet();
QWidget QApplication.activeModalWidget();
QWidget QApplication.activePopupWidget();
QWidget QApplication.getActiveWindow();
void QApplication.alert(QWidget widget, int msec);
QWidgetList QApplication.allWidgets();
void QApplication.beep();
void QApplication.changeOverrideCursor(QCursor cursor);
QClipboard QApplication.clipboard();
int QApplication.getColorSpec();
int QApplication.getCursorFlashTime();
QDesktopWidget QApplication.desktop();
boolean QApplication.getDesktopSettingsAware();
int QApplication.getDoubleClickInterval();
int QApplication.exec();
QWidget QApplication.focusWidget();
QFont QApplication.getFont();
//QFont QApplication.getFont(QWidget widget);
//QFont QApplication.getFont(String className);
QFontMetrics QApplication.fontMetrics();
QSize QApplication.getGlobalStrut();
boolean QApplication.isEffectEnabled(int effect);
boolean QApplication.isLeftToRight();
boolean QApplication.isRightToLeft();
int QApplication.keyboardInputDirection();
int QApplication.getKeyboardInputInterval();
QLocale QApplication.keyboardInputLocale();
QtKeyboardModifiers QApplication.keyboardModifiers();
int QApplication.getLayoutDirection();
QtMouseButtons QApplication.mouseButtons();
QCursor QApplication.getOverrideCursor();
QPalette QApplication.getPalette();
//QPalette QApplication.getPalette(QWidget widget);
//QPalette QApplication.getPalette(String className);
boolean QApplication.getQuitOnLastWindowClosed();
void QApplication.restoreOverrideCursor();
void QApplication.setActiveWindow(QWidget active);
void QApplication.setColorSpec(int spec);
void QApplication.setCursorFlashTime(int arg0);
void QApplication.setDesktopSettingsAware(boolean on);
void QApplication.setDoubleClickInterval(int arg0);
void QApplication.setEffectEnabled(int effect, boolean enable);
void QApplication.setFont(QFont font, String className);
void QApplication.setGlobalStrut(QSize arg0);
void QApplication.setGraphicsSystem(String system);
void QApplication.setKeyboardInputInterval(int arg0);
void QApplication.setLayoutDirection(int direction);
void QApplication.setOverrideCursor(QCursor cursor);
void QApplication.setPalette(QPalette palette, String className);
void QApplication.setQuitOnLastWindowClosed(boolean quit);
void QApplication.setStartDragDistance(int l);
void QApplication.setStartDragTime(int ms);
void QApplication.setStyle(QStyle style);
//QStyle QApplication.setStyle(String style);
void QApplication.setWheelScrollLines(int arg0);
void QApplication.setWindowIcon(QIcon icon);
int QApplication.getStartDragDistance();
int QApplication.getStartDragTime();
QStyle QApplication.getStyle();
void QApplication.syncX();
QWidget QApplication.topLevelAt(QPoint point);
//QWidget QApplication.topLevelAt(int x, int y);
QWidgetList QApplication.topLevelWidgets();
int QApplication.type();
int QApplication.getWheelScrollLines();
QWidget QApplication.widgetAt(QPoint point);
//QWidget QApplication.widgetAt(int x, int y);
QIcon QApplication.getWindowIcon();
void QApplication.aboutQt();
boolean QApplication.getAutoSipEnabled();
void QApplication.closeAllWindows();
void QApplication.setAutoSipEnabled(boolean enabled);
void QApplication.setStyleSheet(String sheet);
@Override @Virtual void QApplication.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QApplication.signalConnect(String signal_name, dynamic callback_func);

QPointF QGraphicsSceneHoverEvent.lastPos();
QPointF QGraphicsSceneHoverEvent.lastScenePos();
QPoint QGraphicsSceneHoverEvent.lastScreenPos();
QtKeyboardModifiers QGraphicsSceneHoverEvent.modifiers();
QPointF QGraphicsSceneHoverEvent.pos();
QPointF QGraphicsSceneHoverEvent.scenePos();
QPoint QGraphicsSceneHoverEvent.screenPos();
@Override @Virtual void QGraphicsSceneHoverEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsSceneHoverEvent.signalConnect(String signal_name, dynamic callback_func);

QLocalServer QLocalServer.new(QObject parent);
void QLocalServer.close();
String QLocalServer.errorString();
String QLocalServer.fullServerName();
@Virtual boolean QLocalServer.hasPendingConnections();
boolean QLocalServer.isListening();
boolean QLocalServer.listen(String name);
int QLocalServer.getMaxPendingConnections();
@Virtual QLocalSocket QLocalServer.nextPendingConnection();
int QLocalServer.serverError();
String QLocalServer.serverName();
void QLocalServer.setMaxPendingConnections(int numConnections);
boolean QLocalServer.waitForNewConnection(int msec, boolean timedOut);
boolean QLocalServer.removeServer(String name);
@Override @Virtual void QLocalServer.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QLocalServer.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFileOpenEvent.addEvent(String event_name, dynamic callback_func);
@Virtual void QFileOpenEvent.signalConnect(String signal_name, dynamic callback_func);

float QTextItem.ascent();
float QTextItem.descent();
QFont QTextItem.font();
QTextItemRenderFlags QTextItem.renderFlags();
String QTextItem.text();
float QTextItem.width();
@Virtual void QTextItem.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextItem.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextItem.parents();

@Virtual void QWSEvent.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSEvent.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWSEvent.parents();

QLatin1String QLatin1String.new(String str);
String QLatin1String.latin1();
@Virtual void QLatin1String.addEvent(String event_name, dynamic callback_func);
@Virtual void QLatin1String.signalConnect(String signal_name, dynamic callback_func);
Array<String> QLatin1String.parents();

QSpinBox QSpinBox.new(QWidget parent);
String QSpinBox.cleanText();
int QSpinBox.getMaximum();
int QSpinBox.getMinimum();
String QSpinBox.getPrefix();
void QSpinBox.setMaximum(int max);
void QSpinBox.setMinimum(int min);
void QSpinBox.setPrefix(String prefix);
void QSpinBox.setRange(int minimum, int maximum);
void QSpinBox.setSingleStep(int val);
void QSpinBox.setSuffix(String suffix);
int QSpinBox.getSingleStep();
String QSpinBox.getSuffix();
int QSpinBox.getValue();
void QSpinBox.setValue(int val);
@Override @Virtual void QSpinBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSpinBox.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QtOrientations QWidgetItem.expandingDirections();
@Virtual @Override QRect QWidgetItem.getGeometry();
@Virtual @Override boolean QWidgetItem.hasHeightForWidth();
@Virtual @Override int QWidgetItem.heightForWidth(int w);
@Virtual @Override boolean QWidgetItem.isEmpty();
@Virtual @Override QSize QWidgetItem.maximumSize();
@Virtual @Override QSize QWidgetItem.minimumSize();
@Virtual @Override void QWidgetItem.setGeometry(QRect rect);
@Virtual @Override QSize QWidgetItem.sizeHint();
@Virtual @Override QWidget QWidgetItem.widget();
QWidgetItem QWidgetItem.new(QWidget widget);
@Override @Virtual void QWidgetItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWidgetItem.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QDialog.minimumSizeHint();
@Virtual @Override void QDialog.setVisible(boolean visible);
@Virtual @Override QSize QDialog.sizeHint();
QDialog QDialog.new(QWidget parent, QtWindowFlags f);
boolean QDialog.isSizeGripEnabled();
int QDialog.getResult();
void QDialog.setModal(boolean modal);
void QDialog.setResult(int i);
void QDialog.setSizeGripEnabled(boolean arg0);
@Virtual void QDialog.done(int r);
int QDialog.exec();
void QDialog.open();
@Virtual void QDialog.reject();
@Override @Virtual void QDialog.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDialog.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionGraphicsItem QStyleOptionGraphicsItem.new();
//QStyleOptionGraphicsItem QStyleOptionGraphicsItem.new(QStyleOptionGraphicsItem other);
float QStyleOptionGraphicsItem.levelOfDetailFromTransform(QTransform worldTransform);
@Override @Virtual void QStyleOptionGraphicsItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionGraphicsItem.signalConnect(String signal_name, dynamic callback_func);

QUrlInfo QUrlInfo.new();
//QUrlInfo QUrlInfo.new(QUrlInfo ui);
//QUrlInfo QUrlInfo.new(String name, int permissions, String owner, String group, int size, QDateTime lastModified, QDateTime lastRead, boolean isDir, boolean isFile, boolean isSymLink, boolean isWritable, boolean isReadable, boolean isExecutable);
//QUrlInfo QUrlInfo.new(QUrl url, int permissions, String owner, String group, int size, QDateTime lastModified, QDateTime lastRead, boolean isDir, boolean isFile, boolean isSymLink, boolean isWritable, boolean isReadable, boolean isExecutable);
String QUrlInfo.getGroup();
boolean QUrlInfo.isDir();
boolean QUrlInfo.isExecutable();
boolean QUrlInfo.isFile();
boolean QUrlInfo.isReadable();
boolean QUrlInfo.isSymLink();
boolean QUrlInfo.isWritable();
QDateTime QUrlInfo.getLastModified();
QDateTime QUrlInfo.getLastRead();
String QUrlInfo.getName();
String QUrlInfo.getOwner();
int QUrlInfo.getPermissions();
@Virtual void QUrlInfo.setDir(boolean b);
@Virtual void QUrlInfo.setFile(boolean b);
@Virtual void QUrlInfo.setGroup(String s);
@Virtual void QUrlInfo.setLastModified(QDateTime dt);
void QUrlInfo.setLastRead(QDateTime dt);
@Virtual void QUrlInfo.setName(String name);
@Virtual void QUrlInfo.setOwner(String s);
@Virtual void QUrlInfo.setPermissions(int p);
@Virtual void QUrlInfo.setReadable(boolean b);
@Virtual void QUrlInfo.setSize(int size);
@Virtual void QUrlInfo.setSymLink(boolean b);
@Virtual void QUrlInfo.setWritable(boolean b);
int QUrlInfo.getSize();
boolean QUrlInfo.equal(QUrlInfo i1, QUrlInfo i2, int sortBy);
boolean QUrlInfo.greaterThan(QUrlInfo i1, QUrlInfo i2, int sortBy);
boolean QUrlInfo.lessThan(QUrlInfo i1, QUrlInfo i2, int sortBy);
@Virtual void QUrlInfo.addEvent(String event_name, dynamic callback_func);
@Virtual void QUrlInfo.signalConnect(String signal_name, dynamic callback_func);
Array<String> QUrlInfo.parents();

@Virtual @Override QRectF QGraphicsBlurEffect.boundingRectFor(QRectF rect);
QGraphicsBlurEffect QGraphicsBlurEffect.new(QObject parent);
QGraphicsBlurEffectBlurHints QGraphicsBlurEffect.getBlurHints();
float QGraphicsBlurEffect.getBlurRadius();
void QGraphicsBlurEffect.setBlurHints(QGraphicsBlurEffectBlurHints hints);
void QGraphicsBlurEffect.setBlurRadius(float blurRadius);
@Override @Virtual void QGraphicsBlurEffect.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsBlurEffect.signalConnect(String signal_name, dynamic callback_func);

@Virtual Array<QNetworkProxy> QNetworkProxyFactory.queryProxy(QNetworkProxyQuery query);
Array<QNetworkProxy> QNetworkProxyFactory.proxyForQuery(QNetworkProxyQuery query);
void QNetworkProxyFactory.setApplicationProxyFactory(QNetworkProxyFactory factory);
void QNetworkProxyFactory.setUseSystemConfiguration(boolean enable);
Array<QNetworkProxy> QNetworkProxyFactory.systemProxyForQuery(QNetworkProxyQuery query);
@Virtual void QNetworkProxyFactory.addEvent(String event_name, dynamic callback_func);
@Virtual void QNetworkProxyFactory.signalConnect(String signal_name, dynamic callback_func);
Array<String> QNetworkProxyFactory.parents();

QStyleOptionViewItem QStyleOptionViewItem.new();
//QStyleOptionViewItem QStyleOptionViewItem.new(QStyleOptionViewItem other);
@Override @Virtual void QStyleOptionViewItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionViewItem.signalConnect(String signal_name, dynamic callback_func);

boolean QRunnable.getAutoDelete();
@Virtual void QRunnable.run();
void QRunnable.setAutoDelete(boolean autoDelete);
@Virtual void QRunnable.addEvent(String event_name, dynamic callback_func);
@Virtual void QRunnable.signalConnect(String signal_name, dynamic callback_func);
Array<String> QRunnable.parents();

@Virtual @Override void QSizeGrip.setVisible(boolean visible);
@Virtual @Override QSize QSizeGrip.sizeHint();
QSizeGrip QSizeGrip.new(QWidget parent);
@Override @Virtual void QSizeGrip.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSizeGrip.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFileSystemWatcher.addEvent(String event_name, dynamic callback_func);
@Virtual void QFileSystemWatcher.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QTextIStream.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextIStream.signalConnect(String signal_name, dynamic callback_func);

QWhatsThisClickedEvent QWhatsThisClickedEvent.new(String href);
String QWhatsThisClickedEvent.href();
@Override @Virtual void QWhatsThisClickedEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWhatsThisClickedEvent.signalConnect(String signal_name, dynamic callback_func);

QTextDocumentWriter QTextDocumentWriter.new();
//QTextDocumentWriter QTextDocumentWriter.new(QIODevice device, QByteArray fmt);
//QTextDocumentWriter QTextDocumentWriter.new(String fileName, QByteArray fmt);
QTextCodec QTextDocumentWriter.getCodec();
QIODevice QTextDocumentWriter.getDevice();
String QTextDocumentWriter.getFileName();
QByteArray QTextDocumentWriter.getFormat();
void QTextDocumentWriter.setCodec(QTextCodec codec);
void QTextDocumentWriter.setDevice(QIODevice device);
void QTextDocumentWriter.setFileName(String fileName);
void QTextDocumentWriter.setFormat(QByteArray fmt);
boolean QTextDocumentWriter.write(QTextDocument document);
//boolean QTextDocumentWriter.write(QTextDocumentFragment fragment);
Array<QByteArray> QTextDocumentWriter.supportedDocumentFormats();
@Virtual void QTextDocumentWriter.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextDocumentWriter.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextDocumentWriter.parents();

@Virtual void QMacStyle.addEvent(String event_name, dynamic callback_func);
@Virtual void QMacStyle.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QDoubleSpinBox.fixup(String input);
@Virtual @Override int QDoubleSpinBox.validate(String text, int pos);
QDoubleSpinBox QDoubleSpinBox.new(QWidget parent);
String QDoubleSpinBox.cleanText();
int QDoubleSpinBox.getDecimals();
double QDoubleSpinBox.getMaximum();
double QDoubleSpinBox.getMinimum();
String QDoubleSpinBox.getPrefix();
void QDoubleSpinBox.setDecimals(int prec);
void QDoubleSpinBox.setMaximum(double max);
void QDoubleSpinBox.setMinimum(double min);
void QDoubleSpinBox.setPrefix(String prefix);
void QDoubleSpinBox.setRange(double minimum, double maximum);
void QDoubleSpinBox.setSingleStep(double val);
void QDoubleSpinBox.setSuffix(String suffix);
double QDoubleSpinBox.getSingleStep();
String QDoubleSpinBox.getSuffix();
@Virtual String QDoubleSpinBox.textFromValue(double value);
double QDoubleSpinBox.getValue();
@Virtual double QDoubleSpinBox.valueFromText(String text);
void QDoubleSpinBox.setValue(double val);
@Override @Virtual void QDoubleSpinBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDoubleSpinBox.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMacPasteboardMime.addEvent(String event_name, dynamic callback_func);
@Virtual void QMacPasteboardMime.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMacPasteboardMime.parents();

@Virtual void QWSKeyboardHandler.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSKeyboardHandler.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWSKeyboardHandler.parents();

@Virtual void QListView.addEvent(String event_name, dynamic callback_func);
@Virtual void QListView.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override int QProxyModel.columnCount(QModelIndex parent);
@Virtual @Override QVariant QProxyModel.getData(QModelIndex index, int role);
@Virtual @Override boolean QProxyModel.dropMimeData(QMimeData data, int action, int row, int column, QModelIndex parent);
@Virtual @Override void QProxyModel.fetchMore(QModelIndex parent);
@Virtual @Override QtItemFlags QProxyModel.flags(QModelIndex index);
@Virtual @Override boolean QProxyModel.hasChildren(QModelIndex parent);
@Virtual @Override QVariant QProxyModel.getHeaderData(int section, int orientation, int role);
@Virtual @Override QModelIndex QProxyModel.index(int row, int column, QModelIndex parent);
@Virtual @Override boolean QProxyModel.insertColumns(int column, int count, QModelIndex parent);
@Virtual @Override boolean QProxyModel.insertRows(int row, int count, QModelIndex parent);
@Virtual @Override QModelIndexList QProxyModel.match(QModelIndex start, int role, QVariant value, int hits, QtMatchFlags flags);
@Virtual @Override QMimeData QProxyModel.mimeData(QModelIndexList indexes);
@Virtual @Override QModelIndex QProxyModel.parent(QModelIndex child);
@Virtual @Override void QProxyModel.revert();
@Virtual @Override int QProxyModel.rowCount(QModelIndex parent);
@Virtual @Override boolean QProxyModel.setData(QModelIndex index, QVariant value, int role);
@Virtual @Override boolean QProxyModel.setHeaderData(int section, int orientation, QVariant value, int role);
@Virtual @Override void QProxyModel.sort(int column, int order);
@Virtual @Override QSize QProxyModel.span(QModelIndex index);
@Virtual @Override boolean QProxyModel.submit();
@Virtual @Override QtDropActions QProxyModel.supportedDropActions();
QProxyModel QProxyModel.new(QObject parent);
QAbstractItemModel QProxyModel.getModel();
@Virtual void QProxyModel.setModel(QAbstractItemModel model);
@Override @Virtual void QProxyModel.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QProxyModel.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QTreeView.dataChanged(QModelIndex topLeft, QModelIndex bottomRight);
@Virtual @Override QModelIndex QTreeView.indexAt(QPoint point);
@Virtual @Override void QTreeView.keyboardSearch(String search);
@Virtual @Override void QTreeView.reset();
@Virtual @Override void QTreeView.scrollTo(QModelIndex index, int hint);
@Virtual @Override void QTreeView.selectAll();
@Virtual @Override void QTreeView.setModel(QAbstractItemModel model);
@Virtual @Override void QTreeView.setRootIndex(QModelIndex index);
@Virtual @Override void QTreeView.setSelectionModel(QItemSelectionModel selectionModel);
@Virtual @Override QRect QTreeView.visualRect(QModelIndex index);
QTreeView QTreeView.new(QWidget parent);
boolean QTreeView.getAllColumnsShowFocus();
int QTreeView.getAutoExpandDelay();
int QTreeView.columnAt(int x);
int QTreeView.columnViewportPosition(int column);
int QTreeView.getColumnWidth(int column);
boolean QTreeView.getExpandsOnDoubleClick();
QHeaderView QTreeView.getHeader();
int QTreeView.getIndentation();
QModelIndex QTreeView.indexAbove(QModelIndex index);
QModelIndex QTreeView.indexBelow(QModelIndex index);
boolean QTreeView.isAnimated();
boolean QTreeView.isColumnHidden(int column);
boolean QTreeView.isExpanded(QModelIndex index);
boolean QTreeView.isFirstColumnSpanned(int row, QModelIndex parent);
boolean QTreeView.isHeaderHidden();
boolean QTreeView.isRowHidden(int row, QModelIndex parent);
boolean QTreeView.isSortingEnabled();
boolean QTreeView.getItemsExpandable();
boolean QTreeView.getRootIsDecorated();
void QTreeView.setAllColumnsShowFocus(boolean enable);
void QTreeView.setAnimated(boolean enable);
void QTreeView.setAutoExpandDelay(int delay);
void QTreeView.setColumnHidden(int column, boolean hide);
void QTreeView.setColumnWidth(int column, int width);
void QTreeView.setExpanded(QModelIndex index, boolean expanded);
void QTreeView.setExpandsOnDoubleClick(boolean enable);
void QTreeView.setFirstColumnSpanned(int row, QModelIndex parent, boolean span);
void QTreeView.setHeader(QHeaderView header);
void QTreeView.setHeaderHidden(boolean hide);
void QTreeView.setIndentation(int i);
void QTreeView.setItemsExpandable(boolean enable);
void QTreeView.setRootIsDecorated(boolean show);
void QTreeView.setRowHidden(int row, QModelIndex parent, boolean hide);
void QTreeView.setSortingEnabled(boolean enable);
void QTreeView.setUniformRowHeights(boolean uniform);
void QTreeView.setWordWrap(boolean on);
void QTreeView.sortByColumn(int column, int order);
boolean QTreeView.getUniformRowHeights();
boolean QTreeView.getWordWrap();
void QTreeView.collapse(QModelIndex index);
void QTreeView.collapseAll();
void QTreeView.expand(QModelIndex index);
void QTreeView.expandAll();
void QTreeView.expandToDepth(int depth);
void QTreeView.hideColumn(int column);
void QTreeView.resizeColumnToContents(int column);
void QTreeView.showColumn(int column);
@Override @Virtual void QTreeView.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTreeView.signalConnect(String signal_name, dynamic callback_func);

QTextBlock QTextBlock.new(QTextBlock other);
QTextBlockFormat QTextBlock.blockFormat();
int QTextBlock.blockFormatIndex();
int QTextBlock.blockNumber();
QTextCharFormat QTextBlock.charFormat();
int QTextBlock.charFormatIndex();
void QTextBlock.clearLayout();
boolean QTextBlock.contains(int position);
QTextDocument QTextBlock.document();
int QTextBlock.firstLineNumber();
boolean QTextBlock.isVisible();
QTextLayout QTextBlock.layout();
int QTextBlock.length();
int QTextBlock.getLineCount();
QTextBlock QTextBlock.next();
int QTextBlock.position();
QTextBlock QTextBlock.previous();
int QTextBlock.getRevision();
void QTextBlock.setLineCount(int count);
void QTextBlock.setRevision(int rev);
void QTextBlock.setUserData(QTextBlockUserData data);
void QTextBlock.setUserState(int state);
void QTextBlock.setVisible(boolean visible);
String QTextBlock.text();
int QTextBlock.textDirection();
QTextList QTextBlock.textList();
QTextBlockUserData QTextBlock.getUserData();
int QTextBlock.getUserState();
@Virtual void QTextBlock.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextBlock.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextBlock.parents();

@Virtual void QS60MainApplication.addEvent(String event_name, dynamic callback_func);
@Virtual void QS60MainApplication.signalConnect(String signal_name, dynamic callback_func);
Array<String> QS60MainApplication.parents();

QInputContext QInputContextFactory.create(String key, QObject parent);
String QInputContextFactory.description(String key);
String QInputContextFactory.displayName(String key);
@Virtual void QInputContextFactory.addEvent(String event_name, dynamic callback_func);
@Virtual void QInputContextFactory.signalConnect(String signal_name, dynamic callback_func);
Array<String> QInputContextFactory.parents();

QPicture QPicture.new(int formatVersion);
//QPicture QPicture.new(QPicture pic);
QRect QPicture.getBoundingRect();
String QPicture.getData();
boolean QPicture.load(String fileName, String fmt);
//boolean QPicture.load(QIODevice dev, String fmt);
boolean QPicture.play(QPainter painter);
boolean QPicture.save(String fileName, String fmt);
//boolean QPicture.save(QIODevice dev, String fmt);
void QPicture.setBoundingRect(QRect r);
@Virtual void QPicture.setData(String data, int size);
int QPicture.size();
@Override @Virtual void QPicture.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPicture.signalConnect(String signal_name, dynamic callback_func);

QButtonGroup QButtonGroup.new(QObject parent);
void QButtonGroup.addButton(QAbstractButton button);
//void QButtonGroup.addButton(QAbstractButton button, int id);
QAbstractButton QButtonGroup.button(int id);
Array<QAbstractButton> QButtonGroup.buttons();
QAbstractButton QButtonGroup.checkedButton();
int QButtonGroup.checkedId();
boolean QButtonGroup.getExclusive();
int QButtonGroup.getId(QAbstractButton button);
void QButtonGroup.removeButton(QAbstractButton button);
void QButtonGroup.setExclusive(boolean arg0);
void QButtonGroup.setId(QAbstractButton button, int id);
@Override @Virtual void QButtonGroup.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QButtonGroup.signalConnect(String signal_name, dynamic callback_func);

QStyleOptionSlider QStyleOptionSlider.new();
//QStyleOptionSlider QStyleOptionSlider.new(QStyleOptionSlider other);
@Override @Virtual void QStyleOptionSlider.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionSlider.signalConnect(String signal_name, dynamic callback_func);

QFtp QFtp.new(QObject parent);
int QFtp.bytesAvailable();
int QFtp.cd(String dir);
void QFtp.clearPendingCommands();
int QFtp.close();
int QFtp.connectToHost(String host, int port);
int QFtp.currentCommand();
QIODevice QFtp.currentDevice();
int QFtp.currentId();
int QFtp.error();
String QFtp.errorString();
int QFtp.get(String file, QIODevice dev, int type);
boolean QFtp.hasPendingCommands();
int QFtp.list(String dir);
int QFtp.login(String user, String password);
int QFtp.mkdir(String dir);
int QFtp.put(QIODevice dev, String file, int type);
//int QFtp.put(QByteArray data, String file, int type);
int QFtp.rawCommand(String command);
int QFtp.read(String data, int maxlen);
QByteArray QFtp.readAll();
int QFtp.remove(String file);
int QFtp.rename(String oldname, String new_name);
int QFtp.rmdir(String dir);
int QFtp.setProxy(String host, int port);
int QFtp.setTransferMode(int mode);
int QFtp.state();
void QFtp.abort();
@Override @Virtual void QFtp.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QFtp.signalConnect(String signal_name, dynamic callback_func);

QSplashScreen QSplashScreen.new(QPixmap pixmap, QtWindowFlags f);
//QSplashScreen QSplashScreen.new(QWidget parent, QPixmap pixmap, QtWindowFlags f);
void QSplashScreen.finish(QWidget mainWin);
QPixmap QSplashScreen.getPixmap();
void QSplashScreen.repaintOL();
void QSplashScreen.setPixmap(QPixmap pixmap);
void QSplashScreen.clearMessage();
void QSplashScreen.showMessage(String message, int alignment, QColor color);
@Override @Virtual void QSplashScreen.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSplashScreen.signalConnect(String signal_name, dynamic callback_func);

QTimer QTimer.new(QObject parent);
int QTimer.getInterval();
boolean QTimer.isActive();
boolean QTimer.isSingleShot();
void QTimer.setInterval(int msec);
void QTimer.setSingleShot(boolean singleShot);
int QTimer.timerId();
void QTimer.getSingleShot(int msec, QObject receiver, String member);
void QTimer.start(int msec);
//void QTimer.start();
void QTimer.stop();
@Override @Virtual void QTimer.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTimer.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QStack.addEvent(String event_name, dynamic callback_func);
@Virtual void QStack.signalConnect(String signal_name, dynamic callback_func);

QHBoxLayout QHBoxLayout.new();
//QHBoxLayout QHBoxLayout.new(QWidget parent);
@Override @Virtual void QHBoxLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QHBoxLayout.signalConnect(String signal_name, dynamic callback_func);

QRadialGradient QRadialGradient.new();
//QRadialGradient QRadialGradient.new(QPointF center, float radius, QPointF focalPoint);
//QRadialGradient QRadialGradient.new(float cx, float cy, float radius, float fx, float fy);
//QRadialGradient QRadialGradient.new(QPointF center, float radius);
//QRadialGradient QRadialGradient.new(float cx, float cy, float radius);
QPointF QRadialGradient.getCenter();
QPointF QRadialGradient.getFocalPoint();
float QRadialGradient.getRadius();
void QRadialGradient.setCenter(QPointF center);
//void QRadialGradient.setCenter(float x, float y);
void QRadialGradient.setFocalPoint(QPointF focalPoint);
//void QRadialGradient.setFocalPoint(float x, float y);
void QRadialGradient.setRadius(float radius);
@Override @Virtual void QRadialGradient.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QRadialGradient.signalConnect(String signal_name, dynamic callback_func);

QPalette QPalette.new();
//QPalette QPalette.new(QColor button);
//QPalette QPalette.new(int button);
//QPalette QPalette.new(QColor button, QColor window);
//QPalette QPalette.new(QBrush windowText, QBrush button, QBrush light, QBrush dark, QBrush mid, QBrush text, QBrush bright_text, QBrush base, QBrush window);
//QPalette QPalette.new(QPalette p);
QBrush QPalette.alternateBase();
QBrush QPalette.base();
QBrush QPalette.brightText();
QBrush QPalette.getBrush(int group, int role);
//QBrush QPalette.getBrush(int role);
QBrush QPalette.button();
QBrush QPalette.buttonText();
int QPalette.cacheKey();
QColor QPalette.getColor(int group, int role);
//QColor QPalette.getColor(int role);
int QPalette.getCurrentColorGroup();
QBrush QPalette.dark();
QBrush QPalette.highlight();
QBrush QPalette.highlightedText();
boolean QPalette.isBrushSet(int cg, int cr);
boolean QPalette.isCopyOf(QPalette p);
boolean QPalette.isEqual(int cg1, int cg2);
QBrush QPalette.light();
QBrush QPalette.link();
QBrush QPalette.linkVisited();
QBrush QPalette.mid();
QBrush QPalette.midlight();
QPalette QPalette.resolve(QPalette other);
void QPalette.setBrush(int role, QBrush brush);
//void QPalette.setBrush(int group, int role, QBrush brush);
void QPalette.setColor(int group, int role, QColor color);
//void QPalette.setColor(int role, QColor color);
void QPalette.setColorGroup(int cg, QBrush windowText, QBrush button, QBrush light, QBrush dark, QBrush mid, QBrush text, QBrush bright_text, QBrush base, QBrush window);
void QPalette.setCurrentColorGroup(int cg);
QBrush QPalette.shadow();
QBrush QPalette.text();
QBrush QPalette.toolTipBase();
QBrush QPalette.toolTipText();
QBrush QPalette.window();
QBrush QPalette.windowText();
@Virtual void QPalette.addEvent(String event_name, dynamic callback_func);
@Virtual void QPalette.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPalette.parents();

QSocketNotifier QSocketNotifier.new(int socket, int type, QObject parent);
boolean QSocketNotifier.isEnabled();
int QSocketNotifier.socket();
int QSocketNotifier.type();
void QSocketNotifier.setEnabled(boolean enable);
@Override @Virtual void QSocketNotifier.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSocketNotifier.signalConnect(String signal_name, dynamic callback_func);

QDateTime QDateTime.new();
//QDateTime QDateTime.new(QDate date);
//QDateTime QDateTime.new(QDate date, QTime time, int spec);
//QDateTime QDateTime.new(QDateTime other);
QDateTime QDateTime.addDays(int ndays);
QDateTime QDateTime.addMSecs(int msecs);
QDateTime QDateTime.addMonths(int nmonths);
QDateTime QDateTime.addSecs(int s);
QDateTime QDateTime.addYears(int nyears);
QDate QDateTime.getDate();
int QDateTime.daysTo(QDateTime other);
int QDateTime.msecsTo(QDateTime other);
int QDateTime.secsTo(QDateTime other);
void QDateTime.setDate(QDate date);
void QDateTime.setMSecsSinceEpoch(int msecs);
void QDateTime.setTime(QTime time);
void QDateTime.setTimeSpec(int spec);
void QDateTime.setTime_t(int seconds);
QTime QDateTime.getTime();
int QDateTime.getTimeSpec();
QDateTime QDateTime.toLocalTime();
int QDateTime.toMSecsSinceEpoch();
String QDateTime.toString(String fmt);
//String QDateTime.toString(int fmt);
QDateTime QDateTime.toTimeSpec(int specification);
int QDateTime.toTime_t();
QDateTime QDateTime.toUTC();
QDateTime QDateTime.currentDateTime();
QDateTime QDateTime.currentDateTimeUtc();
int QDateTime.currentMSecsSinceEpoch();
QDateTime QDateTime.fromMSecsSinceEpoch(int msecs);
QDateTime QDateTime.fromString(String str, int fmt);
//QDateTime QDateTime.fromString(String str, String fmt);
QDateTime QDateTime.fromTime_t(int seconds);
@Virtual void QDateTime.addEvent(String event_name, dynamic callback_func);
@Virtual void QDateTime.signalConnect(String signal_name, dynamic callback_func);
Array<String> QDateTime.parents();

QLinearGradient QLinearGradient.new();
//QLinearGradient QLinearGradient.new(QPointF start, QPointF finalStop);
//QLinearGradient QLinearGradient.new(float x1, float y1, float x2, float y2);
QPointF QLinearGradient.getFinalStop();
void QLinearGradient.setFinalStop(QPointF stop);
//void QLinearGradient.setFinalStop(float x, float y);
void QLinearGradient.setStart(QPointF start);
//void QLinearGradient.setStart(float x, float y);
QPointF QLinearGradient.getStart();
@Override @Virtual void QLinearGradient.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QLinearGradient.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override int QMenuBar.heightForWidth(int arg0);
@Virtual @Override QSize QMenuBar.minimumSizeHint();
@Virtual @Override QSize QMenuBar.sizeHint();
QMenuBar QMenuBar.new(QWidget parent);
QAction QMenuBar.actionAt(QPoint pt);
QRect QMenuBar.actionGeometry(QAction act);
QAction QMenuBar.getActiveAction();
QAction QMenuBar.addMenu(QMenu menu);
//QMenu QMenuBar.addMenu(String title);
//QMenu QMenuBar.addMenu(QIcon icon, String title);
QAction QMenuBar.addSeparator();
void QMenuBar.clear();
QWidget QMenuBar.getCornerWidget(int corner);
QAction QMenuBar.insertMenu(QAction before, QMenu menu);
QAction QMenuBar.insertSeparator(QAction before);
boolean QMenuBar.isDefaultUp();
boolean QMenuBar.isNativeMenuBar();
void QMenuBar.setActiveAction(QAction act);
void QMenuBar.setCornerWidget(QWidget widget, int corner);
void QMenuBar.setDefaultUp(boolean arg0);
void QMenuBar.setNativeMenuBar(boolean nativeMenuBar);
@Virtual void QMenuBar.setVisible(boolean visible);
@Override @Virtual void QMenuBar.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMenuBar.signalConnect(String signal_name, dynamic callback_func);

QDynamicPropertyChangeEvent QDynamicPropertyChangeEvent.new(QByteArray name);
QByteArray QDynamicPropertyChangeEvent.propertyName();
@Override @Virtual void QDynamicPropertyChangeEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDynamicPropertyChangeEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QFutureIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QFutureIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFutureIterator.parents();

QtKeyboardModifiers QInputEvent.modifiers();
@Override @Virtual void QInputEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QInputEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QTextStream.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextStream.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextStream.parents();

QUrl QUrl.new();
//QUrl QUrl.new(String url);
//QUrl QUrl.new(QUrl other);
//QUrl QUrl.new(String url, int parsingMode);
void QUrl.addEncodedQueryItem(QByteArray key, QByteArray value);
void QUrl.addQueryItem(String key, String value);
Array<QByteArray> QUrl.allEncodedQueryItemValues(QByteArray key);
String QUrl.getAuthority();
void QUrl.clear();
QByteArray QUrl.getEncodedFragment();
QByteArray QUrl.getEncodedHost();
QByteArray QUrl.getEncodedPassword();
QByteArray QUrl.getEncodedPath();
QByteArray QUrl.getEncodedQuery();
QByteArray QUrl.encodedQueryItemValue(QByteArray key);
QByteArray QUrl.getEncodedUserName();
String QUrl.errorString();
String QUrl.getFragment();
boolean QUrl.hasEncodedQueryItem(QByteArray key);
boolean QUrl.hasFragment();
boolean QUrl.hasQuery();
boolean QUrl.hasQueryItem(String key);
String QUrl.getHost();
boolean QUrl.isEmpty();
boolean QUrl.isParentOf(QUrl childUrl);
boolean QUrl.isRelative();
String QUrl.getPassword();
String QUrl.getPath();
int QUrl.getPort();
//int QUrl.getPort(int defaultPort);
String QUrl.queryItemValue(String key);
String QUrl.queryPairDelimiter();
String QUrl.queryValueDelimiter();
void QUrl.removeAllEncodedQueryItems(QByteArray key);
void QUrl.removeAllQueryItems(String key);
void QUrl.removeEncodedQueryItem(QByteArray key);
void QUrl.removeQueryItem(String key);
QUrl QUrl.resolved(QUrl relative);
String QUrl.getScheme();
void QUrl.setAuthority(String authority);
void QUrl.setEncodedFragment(QByteArray fragment);
void QUrl.setEncodedHost(QByteArray host);
void QUrl.setEncodedPassword(QByteArray password);
void QUrl.setEncodedPath(QByteArray path);
void QUrl.setEncodedQuery(QByteArray query);
void QUrl.setEncodedUrl(QByteArray encodedUrl);
//void QUrl.setEncodedUrl(QByteArray encodedUrl, int parsingMode);
void QUrl.setEncodedUserName(QByteArray userName);
void QUrl.setFragment(String fragment);
void QUrl.setHost(String host);
void QUrl.setPassword(String password);
void QUrl.setPath(String path);
void QUrl.setPort(int port);
void QUrl.setQueryDelimiters(String valueDelimiter, String pairDelimiter);
void QUrl.setScheme(String scheme);
void QUrl.setUrl(String url);
//void QUrl.setUrl(String url, int parsingMode);
void QUrl.setUserInfo(String userInfo);
void QUrl.setUserName(String userName);
QByteArray QUrl.toEncoded(QUrlFormattingOptions options);
String QUrl.toLocalFile();
String QUrl.toString(QUrlFormattingOptions options);
String QUrl.getUserInfo();
String QUrl.getUserName();
String QUrl.fromAce(QByteArray domain);
QUrl QUrl.fromEncoded(QByteArray input);
//QUrl QUrl.fromEncoded(QByteArray input, int parsingMode);
QUrl QUrl.fromLocalFile(String localFile);
String QUrl.fromPercentEncoding(QByteArray input);
QUrl QUrl.fromUserInput(String userInput);
QByteArray QUrl.toAce(String domain);
QByteArray QUrl.toPercentEncoding(String input, QByteArray exclude, QByteArray inc);
@Virtual void QUrl.addEvent(String event_name, dynamic callback_func);
@Virtual void QUrl.signalConnect(String signal_name, dynamic callback_func);
Array<String> QUrl.parents();

@Virtual @Override QSize QSplitter.minimumSizeHint();
@Virtual @Override QSize QSplitter.sizeHint();
QSplitter QSplitter.new(QWidget parent);
//QSplitter QSplitter.new(int orientation, QWidget parent);
void QSplitter.addWidget(QWidget widget);
boolean QSplitter.getChildrenCollapsible();
int QSplitter.count();
void QSplitter.getRange(int index, int min, int max);
QSplitterHandle QSplitter.handle(int index);
int QSplitter.getHandleWidth();
int QSplitter.indexOf(QWidget widget);
void QSplitter.insertWidget(int index, QWidget widget);
boolean QSplitter.isCollapsible(int index);
boolean QSplitter.getOpaqueResize();
int QSplitter.getOrientation();
void QSplitter.refresh();
boolean QSplitter.restoreState(QByteArray state);
QByteArray QSplitter.saveState();
void QSplitter.setChildrenCollapsible(boolean arg0);
void QSplitter.setCollapsible(int index, boolean collapse);
void QSplitter.setHandleWidth(int arg0);
void QSplitter.setOpaqueResize(boolean opaque);
void QSplitter.setOrientation(int arg0);
void QSplitter.setSizes(Array<int> list);
void QSplitter.setStretchFactor(int index, int stretch);
Array<int> QSplitter.getSizes();
QWidget QSplitter.widget(int index);
@Override @Virtual void QSplitter.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSplitter.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QAbstractSpinBox.event(QEvent event);
@Virtual @Override QVariant QAbstractSpinBox.inputMethodQuery(int query);
@Virtual @Override QSize QAbstractSpinBox.minimumSizeHint();
@Virtual @Override QSize QAbstractSpinBox.sizeHint();
QtAlignment QAbstractSpinBox.getAlignment();
int QAbstractSpinBox.getButtonSymbols();
int QAbstractSpinBox.getCorrectionMode();
@Virtual void QAbstractSpinBox.fixup(String input);
boolean QAbstractSpinBox.hasAcceptableInput();
boolean QAbstractSpinBox.hasFrame();
void QAbstractSpinBox.interpretText();
boolean QAbstractSpinBox.isAccelerated();
boolean QAbstractSpinBox.isReadOnly();
boolean QAbstractSpinBox.getKeyboardTracking();
void QAbstractSpinBox.setAccelerated(boolean on);
void QAbstractSpinBox.setAlignment(QtAlignment flag);
void QAbstractSpinBox.setButtonSymbols(int bs);
void QAbstractSpinBox.setCorrectionMode(int cm);
void QAbstractSpinBox.setFrame(boolean arg0);
void QAbstractSpinBox.setKeyboardTracking(boolean kt);
void QAbstractSpinBox.setReadOnly(boolean r);
void QAbstractSpinBox.setSpecialValueText(String txt);
void QAbstractSpinBox.setWrapping(boolean w);
String QAbstractSpinBox.getSpecialValueText();
@Virtual void QAbstractSpinBox.stepBy(int steps);
String QAbstractSpinBox.text();
@Virtual int QAbstractSpinBox.validate(String input, int pos);
boolean QAbstractSpinBox.getWrapping();
@Virtual void QAbstractSpinBox.clear();
void QAbstractSpinBox.selectAll();
void QAbstractSpinBox.stepDown();
void QAbstractSpinBox.stepUp();
@Override @Virtual void QAbstractSpinBox.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QAbstractSpinBox.signalConnect(String signal_name, dynamic callback_func);

QTextImageFormat QTextImageFormat.new();
float QTextImageFormat.getHeight();
String QTextImageFormat.getName();
void QTextImageFormat.setHeight(float height);
void QTextImageFormat.setName(String name);
void QTextImageFormat.setWidth(float width);
float QTextImageFormat.getWidth();
@Override @Virtual void QTextImageFormat.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextImageFormat.signalConnect(String signal_name, dynamic callback_func);

QRectF QRectF.new();
//QRectF QRectF.new(QPointF topLeft, QSizeF size);
//QRectF QRectF.new(QPointF topLeft, QPointF bottomRight);
//QRectF QRectF.new(float x, float y, float width, float height);
//QRectF QRectF.new(QRect rectangle);
void QRectF.adjust(float dx1, float dy1, float dx2, float dy2);
QRectF QRectF.adjusted(float dx1, float dy1, float dx2, float dy2);
float QRectF.getBottom();
QPointF QRectF.getBottomLeft();
QPointF QRectF.getBottomRight();
QPointF QRectF.center();
boolean QRectF.contains(QPointF point);
//boolean QRectF.contains(float x, float y);
//boolean QRectF.contains(QRectF rectangle);
void QRectF.getCoords(float x1, float y1, float x2, float y2);
void QRectF.getRect(float x, float y, float width, float height);
float QRectF.getHeight();
QRectF QRectF.intersected(QRectF rectangle);
boolean QRectF.intersects(QRectF rectangle);
boolean QRectF.isEmpty();
float QRectF.getLeft();
void QRectF.moveBottom(float y);
void QRectF.moveBottomLeft(QPointF position);
void QRectF.moveBottomRight(QPointF position);
void QRectF.moveCenter(QPointF position);
void QRectF.moveLeft(float x);
void QRectF.moveRight(float x);
void QRectF.moveTo(float x, float y);
//void QRectF.moveTo(QPointF position);
void QRectF.moveTop(float y);
void QRectF.moveTopLeft(QPointF position);
void QRectF.moveTopRight(QPointF position);
QRectF QRectF.normalized();
float QRectF.getRight();
void QRectF.setBottom(float y);
void QRectF.setBottomLeft(QPointF position);
void QRectF.setBottomRight(QPointF position);
void QRectF.setCoords(float x1, float y1, float x2, float y2);
void QRectF.setHeight(float height);
void QRectF.setLeft(float x);
void QRectF.setRect(float x, float y, float width, float height);
void QRectF.setRight(float x);
void QRectF.setSize(QSizeF size);
void QRectF.setTop(float y);
void QRectF.setTopLeft(QPointF position);
void QRectF.setTopRight(QPointF position);
void QRectF.setWidth(float width);
void QRectF.setX(float x);
void QRectF.setY(float y);
QSizeF QRectF.getSize();
QRect QRectF.toAlignedRect();
QRect QRectF.toRect();
float QRectF.getTop();
QPointF QRectF.getTopLeft();
QPointF QRectF.getTopRight();
void QRectF.translate(float dx, float dy);
//void QRectF.translate(QPointF offset);
QRectF QRectF.translated(float dx, float dy);
//QRectF QRectF.translated(QPointF offset);
QRectF QRectF.united(QRectF rectangle);
float QRectF.getWidth();
float QRectF.getX();
float QRectF.getY();
@Virtual void QRectF.addEvent(String event_name, dynamic callback_func);
@Virtual void QRectF.signalConnect(String signal_name, dynamic callback_func);
Array<String> QRectF.parents();

@Virtual @Override void QCommonStyle.drawComplexControl(int cc, QStyleOptionComplex opt, QPainter p, QWidget widget);
@Virtual @Override void QCommonStyle.drawControl(int element, QStyleOption opt, QPainter p, QWidget widget);
@Virtual @Override void QCommonStyle.drawPrimitive(int pe, QStyleOption opt, QPainter p, QWidget widget);
@Virtual @Override QPixmap QCommonStyle.generatedIconPixmap(int iconMode, QPixmap pixmap, QStyleOption opt);
@Virtual @Override int QCommonStyle.hitTestComplexControl(int cc, QStyleOptionComplex opt, QPoint pt, QWidget widget);
@Virtual @Override int QCommonStyle.pixelMetric(int m, QStyleOption opt, QWidget widget);
//@Virtual @Override void QCommonStyle.polish(QPalette pal);
//@Virtual @Override void QCommonStyle.polish(QApplication app);
//@Virtual @Override void QCommonStyle.polish(QWidget widget);
@Virtual @Override QSize QCommonStyle.sizeFromContents(int ct, QStyleOption opt, QSize csz, QWidget widget);
@Virtual @Override QPixmap QCommonStyle.standardPixmap(int sp, QStyleOption option, QWidget widget);
@Virtual @Override int QCommonStyle.styleHint(int sh, QStyleOption opt, QWidget widget, QStyleHintReturn hret);
@Virtual @Override QRect QCommonStyle.subControlRect(int cc, QStyleOptionComplex opt, int sc, QWidget widget);
@Virtual @Override QRect QCommonStyle.subElementRect(int sr, QStyleOption opt, QWidget widget);
//@Virtual @Override void QCommonStyle.unpolish(QWidget widget);
//@Virtual @Override void QCommonStyle.unpolish(QApplication application);
QCommonStyle QCommonStyle.new();
@Override @Virtual void QCommonStyle.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QCommonStyle.signalConnect(String signal_name, dynamic callback_func);

QDateEdit QDateEdit.new(QWidget parent);
//QDateEdit QDateEdit.new(QDate date, QWidget parent);
@Override @Virtual void QDateEdit.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDateEdit.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QGraphicsRotation.applyTo(QMatrix4x4 matrix);
QGraphicsRotation QGraphicsRotation.new(QObject parent);
float QGraphicsRotation.getAngle();
void QGraphicsRotation.setAngle(float arg0);
void QGraphicsRotation.setAxis(int axis);
@Override @Virtual void QGraphicsRotation.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsRotation.signalConnect(String signal_name, dynamic callback_func);

QTcpServer QTcpServer.new(QObject parent);
void QTcpServer.close();
String QTcpServer.errorString();
@Virtual boolean QTcpServer.hasPendingConnections();
boolean QTcpServer.isListening();
boolean QTcpServer.listen(QHostAddress address, int port);
int QTcpServer.getMaxPendingConnections();
@Virtual QTcpSocket QTcpServer.nextPendingConnection();
QNetworkProxy QTcpServer.getProxy();
QHostAddress QTcpServer.serverAddress();
int QTcpServer.serverError();
int QTcpServer.serverPort();
void QTcpServer.setMaxPendingConnections(int numConnections);
void QTcpServer.setProxy(QNetworkProxy networkProxy);
boolean QTcpServer.setSocketDescriptor(int socketDescriptor);
int QTcpServer.getSocketDescriptor();
boolean QTcpServer.waitForNewConnection(int msec, boolean timedOut);
@Override @Virtual void QTcpServer.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTcpServer.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QFormLayout.addItem(QLayoutItem item);
@Virtual @Override int QFormLayout.count();
@Virtual @Override QtOrientations QFormLayout.expandingDirections();
@Virtual @Override boolean QFormLayout.hasHeightForWidth();
@Virtual @Override int QFormLayout.heightForWidth(int width);
@Virtual @Override void QFormLayout.invalidate();
@Virtual @Override QLayoutItem QFormLayout.itemAt(int index);
@Virtual @Override QSize QFormLayout.minimumSize();
@Virtual @Override void QFormLayout.setGeometry(QRect rect);
@Virtual @Override QSize QFormLayout.sizeHint();
@Virtual @Override QLayoutItem QFormLayout.takeAt(int index);
QFormLayout QFormLayout.new(QWidget parent);
void QFormLayout.addRow(QWidget label, QWidget field);
//void QFormLayout.addRow(QWidget label, QLayout field);
//void QFormLayout.addRow(String labelText, QWidget field);
//void QFormLayout.addRow(String labelText, QLayout field);
//void QFormLayout.addRow(QWidget widget);
//void QFormLayout.addRow(QLayout layout);
int QFormLayout.getFieldGrowthPolicy();
QtAlignment QFormLayout.getFormAlignment();
void QFormLayout.getItemPosition(int index, int rowPtr, int rolePtr);
void QFormLayout.getLayoutPosition(QLayout layout, int rowPtr, int rolePtr);
void QFormLayout.getWidgetPosition(QWidget widget, int rowPtr, int rolePtr);
int QFormLayout.getHorizontalSpacing();
//QLayoutItem QFormLayout.itemAt(int row, int role);
QtAlignment QFormLayout.getLabelAlignment();
QWidget QFormLayout.labelForField(QWidget field);
//QWidget QFormLayout.labelForField(QLayout field);
int QFormLayout.rowCount();
int QFormLayout.getRowWrapPolicy();
void QFormLayout.setFieldGrowthPolicy(int policy);
void QFormLayout.setFormAlignment(QtAlignment alignment);
void QFormLayout.setHorizontalSpacing(int spacing);
void QFormLayout.setItem(int row, int role, QLayoutItem item);
void QFormLayout.setLabelAlignment(QtAlignment alignment);
void QFormLayout.setLayout(int row, int role, QLayout layout);
void QFormLayout.setRowWrapPolicy(int policy);
void QFormLayout.setSpacing(int spacing);
void QFormLayout.setVerticalSpacing(int spacing);
void QFormLayout.setWidget(int row, int role, QWidget widget);
int QFormLayout.getSpacing();
int QFormLayout.getVerticalSpacing();
@Override @Virtual void QFormLayout.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QFormLayout.signalConnect(String signal_name, dynamic callback_func);

QFocusFrame QFocusFrame.new(QWidget parent);
void QFocusFrame.setWidget(QWidget widget);
QWidget QFocusFrame.getWidget();
@Override @Virtual void QFocusFrame.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QFocusFrame.signalConnect(String signal_name, dynamic callback_func);

QGenericArgument QGenericArgument.new(String name, void data);
void QGenericArgument.data();
String QGenericArgument.name();
@Virtual void QGenericArgument.addEvent(String event_name, dynamic callback_func);
@Virtual void QGenericArgument.signalConnect(String signal_name, dynamic callback_func);
Array<String> QGenericArgument.parents();

QPainterPathStroker QPainterPathStroker.new();
int QPainterPathStroker.getCapStyle();
QPainterPath QPainterPathStroker.createStroke(QPainterPath path);
float QPainterPathStroker.getCurveThreshold();
float QPainterPathStroker.dashOffset();
int QPainterPathStroker.getJoinStyle();
float QPainterPathStroker.getMiterLimit();
void QPainterPathStroker.setCapStyle(int style);
void QPainterPathStroker.setCurveThreshold(float threshold);
void QPainterPathStroker.setDashOffset(float offset);
void QPainterPathStroker.setDashPattern(int style);
void QPainterPathStroker.setJoinStyle(int style);
void QPainterPathStroker.setMiterLimit(float limit);
void QPainterPathStroker.setWidth(float width);
float QPainterPathStroker.getWidth();
@Virtual void QPainterPathStroker.addEvent(String event_name, dynamic callback_func);
@Virtual void QPainterPathStroker.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPainterPathStroker.parents();

QTextFormat QTextFormat.new();
//QTextFormat QTextFormat.new(int type);
//QTextFormat QTextFormat.new(QTextFormat other);
QBrush QTextFormat.getBackground();
boolean QTextFormat.boolProperty(int propertyId);
QBrush QTextFormat.brushProperty(int propertyId);
void QTextFormat.clearBackground();
void QTextFormat.clearForeground();
void QTextFormat.clearProperty(int propertyId);
QColor QTextFormat.colorProperty(int propertyId);
float QTextFormat.doubleProperty(int propertyId);
QBrush QTextFormat.getForeground();
boolean QTextFormat.hasProperty(int propertyId);
int QTextFormat.intProperty(int propertyId);
boolean QTextFormat.isBlockFormat();
boolean QTextFormat.isCharFormat();
boolean QTextFormat.isFrameFormat();
boolean QTextFormat.isImageFormat();
boolean QTextFormat.isListFormat();
boolean QTextFormat.isTableCellFormat();
boolean QTextFormat.isTableFormat();
int QTextFormat.getLayoutDirection();
QTextLength QTextFormat.lengthProperty(int propertyId);
void QTextFormat.merge(QTextFormat other);
int QTextFormat.getObjectIndex();
int QTextFormat.getObjectType();
QPen QTextFormat.penProperty(int propertyId);
QVariant QTextFormat.getProperty(int propertyId);
int QTextFormat.propertyCount();
void QTextFormat.setBackground(QBrush brush);
void QTextFormat.setForeground(QBrush brush);
void QTextFormat.setLayoutDirection(int direction);
void QTextFormat.setObjectIndex(int index);
void QTextFormat.setObjectType(int type);
void QTextFormat.setProperty(int propertyId, QVariant value);
String QTextFormat.stringProperty(int propertyId);
QTextBlockFormat QTextFormat.toBlockFormat();
QTextCharFormat QTextFormat.toCharFormat();
QTextFrameFormat QTextFormat.toFrameFormat();
QTextImageFormat QTextFormat.toImageFormat();
QTextListFormat QTextFormat.toListFormat();
QTextTableCellFormat QTextFormat.toTableCellFormat();
QTextTableFormat QTextFormat.toTableFormat();
int QTextFormat.type();
@Virtual void QTextFormat.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextFormat.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextFormat.parents();

QThread QThread.new(QObject parent);
void QThread.exit(int returnCode);
boolean QThread.isFinished();
boolean QThread.isRunning();
int QThread.getPriority();
void QThread.setPriority(int priority);
void QThread.setStackSize(int stackSize);
int QThread.getStackSize();
boolean QThread.wait(long time);
QThread QThread.currentThread();
int QThread.idealThreadCount();
void QThread.yieldCurrentThread();
void QThread.quit();
void QThread.start(int priority);
void QThread.terminate();
@Override @Virtual void QThread.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QThread.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QFontDialog.setVisible(boolean visible);
QFontDialog QFontDialog.new(QWidget parent);
//QFontDialog QFontDialog.new(QFont initial, QWidget parent);
QFont QFontDialog.getCurrentFont();
void QFontDialog.openOL(QObject receiver, String member);
QFontDialogFontDialogOptions QFontDialog.getOptions();
QFont QFontDialog.selectedFont();
void QFontDialog.setCurrentFont(QFont font);
void QFontDialog.setOption(int option, boolean on);
void QFontDialog.setOptions(QFontDialogFontDialogOptions options);
boolean QFontDialog.testOption(int option);
QFont QFontDialog.getFontOL(boolean ok, QFont initial, QWidget parent, String title, QFontDialogFontDialogOptions options);
//QFont QFontDialog.getFontOL(boolean ok, QFont initial, QWidget parent, String name);
//QFont QFontDialog.getFontOL(boolean ok, QWidget parent, String name);
//QFont QFontDialog.getFontOL(boolean ok, QFont initial, QWidget parent, String title);
//QFont QFontDialog.getFontOL(boolean ok, QFont initial, QWidget parent);
//QFont QFontDialog.getFontOL(boolean ok, QWidget parent);
@Override @Virtual void QFontDialog.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QFontDialog.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QScopedArrayPointer.addEvent(String event_name, dynamic callback_func);
@Virtual void QScopedArrayPointer.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QWebHistoryInterface.addHistoryEntry(String url);
@Virtual boolean QWebHistoryInterface.historyContains(String url);
QWebHistoryInterface QWebHistoryInterface.getDefaultInterface();
void QWebHistoryInterface.setDefaultInterface(QWebHistoryInterface defaultInterface);
@Override @Virtual void QWebHistoryInterface.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWebHistoryInterface.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMacNativeWidget.addEvent(String event_name, dynamic callback_func);
@Virtual void QMacNativeWidget.signalConnect(String signal_name, dynamic callback_func);

QCoreApplication QCoreApplication.new(int argc, String argv);
boolean QCoreApplication.filterEvent(void message, long result);
@Virtual boolean QCoreApplication.notify(QObject receiver, QEvent event);
void QCoreApplication.addLibraryPath(String path);
String QCoreApplication.applicationDirPath();
String QCoreApplication.applicationFilePath();
String QCoreApplication.getApplicationName();
int QCoreApplication.applicationPid();
String QCoreApplication.getApplicationVersion();
boolean QCoreApplication.closingDown();
int QCoreApplication.exec();
void QCoreApplication.exit(int returnCode);
void QCoreApplication.flush();
boolean QCoreApplication.hasPendingEvents();
void QCoreApplication.installTranslator(QTranslator translationFile);
QCoreApplication QCoreApplication.instance();
String QCoreApplication.getOrganizationDomain();
String QCoreApplication.getOrganizationName();
void QCoreApplication.postEvent(QObject receiver, QEvent event);
//void QCoreApplication.postEvent(QObject receiver, QEvent event, int priority);
void QCoreApplication.processEvents(int flags);
//void QCoreApplication.processEvents(int flags, int maxtime);
void QCoreApplication.removeLibraryPath(String path);
void QCoreApplication.removePostedEvents(QObject receiver);
//void QCoreApplication.removePostedEvents(QObject receiver, int eventType);
void QCoreApplication.removeTranslator(QTranslator translationFile);
boolean QCoreApplication.sendEvent(QObject receiver, QEvent event);
void QCoreApplication.sendPostedEvents(QObject receiver, int event_type);
//void QCoreApplication.sendPostedEvents();
void QCoreApplication.setApplicationName(String application);
void QCoreApplication.setApplicationVersion(String version);
void QCoreApplication.setAttribute(int attribute, boolean on);
void QCoreApplication.setOrganizationDomain(String orgDomain);
void QCoreApplication.setOrganizationName(String orgName);
boolean QCoreApplication.startingUp();
boolean QCoreApplication.testAttribute(int attribute);
String QCoreApplication.translate(String context, String sourceText, String disambiguation, int encoding, int n);
//String QCoreApplication.translate(String context, String sourceText, String disambiguation, int encoding);
void QCoreApplication.quit();
@Override @Virtual void QCoreApplication.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QCoreApplication.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override boolean QProcess.atEnd();
@Virtual @Override int QProcess.bytesAvailable();
@Virtual @Override int QProcess.bytesToWrite();
@Virtual @Override boolean QProcess.canReadLine();
@Virtual @Override void QProcess.close();
@Virtual @Override boolean QProcess.isSequential();
@Virtual @Override boolean QProcess.waitForBytesWritten(int msecs);
@Virtual @Override boolean QProcess.waitForReadyRead(int msecs);
QProcess QProcess.new(QObject parent);
void QProcess.closeReadChannel(int channel);
void QProcess.closeWriteChannel();
int QProcess.error();
int QProcess.exitCode();
int QProcess.exitStatus();
Q_PID QProcess.pid();
int QProcess.getProcessChannelMode();
QProcessEnvironment QProcess.getProcessEnvironment();
QByteArray QProcess.readAllStandardError();
QByteArray QProcess.readAllStandardOutput();
int QProcess.getReadChannel();
void QProcess.setProcessChannelMode(int mode);
void QProcess.setProcessEnvironment(QProcessEnvironment environment);
void QProcess.setReadChannel(int channel);
void QProcess.setStandardErrorFile(String fileName, QIODeviceOpenMode mode);
void QProcess.setStandardInputFile(String fileName);
void QProcess.setStandardOutputFile(String fileName, QIODeviceOpenMode mode);
void QProcess.setStandardOutputProcess(QProcess destination);
void QProcess.setWorkingDirectory(String dir);
void QProcess.start(String program, QIODeviceOpenMode mode);
int QProcess.state();
boolean QProcess.waitForFinished(int msecs);
boolean QProcess.waitForStarted(int msecs);
String QProcess.getWorkingDirectory();
int QProcess.execute(String program);
boolean QProcess.startDetached(String program);
void QProcess.kill();
void QProcess.terminate();
@Override @Virtual void QProcess.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QProcess.signalConnect(String signal_name, dynamic callback_func);

QtMouseButtons QGraphicsSceneWheelEvent.buttons();
int QGraphicsSceneWheelEvent.delta();
QtKeyboardModifiers QGraphicsSceneWheelEvent.modifiers();
int QGraphicsSceneWheelEvent.orientation();
QPointF QGraphicsSceneWheelEvent.pos();
QPointF QGraphicsSceneWheelEvent.scenePos();
QPoint QGraphicsSceneWheelEvent.screenPos();
@Override @Virtual void QGraphicsSceneWheelEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsSceneWheelEvent.signalConnect(String signal_name, dynamic callback_func);

QRegExp QRegExp.new();
//QRegExp QRegExp.new(String pattern, int cs, int syntax);
//QRegExp QRegExp.new(QRegExp rx);
String QRegExp.cap(int nth);
int QRegExp.captureCount();
int QRegExp.getCaseSensitivity();
String QRegExp.errorString();
boolean QRegExp.exactMatch(String str);
int QRegExp.indexIn(String str, int offset, int caretMode);
boolean QRegExp.isEmpty();
boolean QRegExp.isMinimal();
int QRegExp.lastIndexIn(String str, int offset, int caretMode);
int QRegExp.matchedLength();
String QRegExp.getPattern();
int QRegExp.getPatternSyntax();
int QRegExp.pos(int nth);
void QRegExp.setCaseSensitivity(int cs);
void QRegExp.setMinimal(boolean minimal);
void QRegExp.setPattern(String pattern);
void QRegExp.setPatternSyntax(int syntax);
String QRegExp.escape(String str);
@Virtual void QRegExp.addEvent(String event_name, dynamic callback_func);
@Virtual void QRegExp.signalConnect(String signal_name, dynamic callback_func);
Array<String> QRegExp.parents();

String QWebSettings.getDefaultTextEncoding();
String QWebSettings.getFontFamily(int which);
int QWebSettings.getFontSize(int type);
String QWebSettings.getLocalStoragePath();
void QWebSettings.resetAttribute(int attribute);
void QWebSettings.resetFontFamily(int which);
void QWebSettings.resetFontSize(int type);
void QWebSettings.setAttribute(int attribute, boolean on);
void QWebSettings.setDefaultTextEncoding(String encoding);
void QWebSettings.setFontFamily(int which, String family);
void QWebSettings.setFontSize(int type, int size);
void QWebSettings.setLocalStoragePath(String path);
void QWebSettings.setUserStyleSheetUrl(QUrl location);
boolean QWebSettings.testAttribute(int attribute);
QUrl QWebSettings.getUserStyleSheetUrl();
void QWebSettings.clearIconDatabase();
void QWebSettings.clearMemoryCaches();
void QWebSettings.enablePersistentStorage(String path);
QWebSettings QWebSettings.globalSettings();
String QWebSettings.getIconDatabasePath();
QIcon QWebSettings.iconForUrl(QUrl url);
int QWebSettings.getMaximumPagesInCache();
int QWebSettings.getOfflineStorageDefaultQuota();
String QWebSettings.getOfflineStoragePath();
String QWebSettings.getOfflineWebApplicationCachePath();
int QWebSettings.getOfflineWebApplicationCacheQuota();
void QWebSettings.setIconDatabasePath(String path);
void QWebSettings.setMaximumPagesInCache(int pages);
void QWebSettings.setObjectCacheCapacities(int cacheMinDeadCapacity, int cacheMaxDead, int totalCapacity);
void QWebSettings.setOfflineStorageDefaultQuota(int maximumSize);
void QWebSettings.setOfflineStoragePath(String path);
void QWebSettings.setOfflineWebApplicationCachePath(String path);
void QWebSettings.setOfflineWebApplicationCacheQuota(int maximumSize);
void QWebSettings.setWebGraphic(int type, QPixmap graphic);
QPixmap QWebSettings.getWebGraphic(int type);
@Virtual void QWebSettings.addEvent(String event_name, dynamic callback_func);
@Virtual void QWebSettings.signalConnect(String signal_name, dynamic callback_func);
Array<String> QWebSettings.parents();

@Virtual @Override QtOrientations QSpacerItem.expandingDirections();
@Virtual @Override QRect QSpacerItem.getGeometry();
@Virtual @Override boolean QSpacerItem.isEmpty();
@Virtual @Override QSize QSpacerItem.maximumSize();
@Virtual @Override QSize QSpacerItem.minimumSize();
@Virtual @Override void QSpacerItem.setGeometry(QRect r);
@Virtual @Override QSize QSpacerItem.sizeHint();
@Virtual @Override QSpacerItem QSpacerItem.spacerItem();
QSpacerItem QSpacerItem.new(int w, int h, int hPolicy, int vPolicy);
void QSpacerItem.changeSize(int w, int h, int hPolicy, int vPolicy);
@Override @Virtual void QSpacerItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSpacerItem.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QSize QTabWidget.minimumSizeHint();
@Virtual @Override QSize QTabWidget.sizeHint();
QTabWidget QTabWidget.new(QWidget parent);
int QTabWidget.addTab(QWidget page, String label);
//int QTabWidget.addTab(QWidget page, QIcon icon, String label);
void QTabWidget.clear();
QWidget QTabWidget.getCornerWidget(int corner);
int QTabWidget.count();
int QTabWidget.getCurrentIndex();
QWidget QTabWidget.getCurrentWidget();
boolean QTabWidget.getDocumentMode();
int QTabWidget.getElideMode();
QSize QTabWidget.getIconSize();
int QTabWidget.indexOf(QWidget w);
int QTabWidget.insertTab(int index, QWidget page, String label);
//int QTabWidget.insertTab(int index, QWidget page, QIcon icon, String label);
boolean QTabWidget.isMovable();
boolean QTabWidget.isTabEnabled(int index);
void QTabWidget.removeTab(int index);
void QTabWidget.setCornerWidget(QWidget widget, int corner);
void QTabWidget.setDocumentMode(boolean set);
void QTabWidget.setElideMode(int arg0);
void QTabWidget.setIconSize(QSize size);
void QTabWidget.setMovable(boolean movable);
void QTabWidget.setTabEnabled(int index, boolean enable);
void QTabWidget.setTabIcon(int index, QIcon icon);
void QTabWidget.setTabPosition(int arg0);
void QTabWidget.setTabShape(int s);
void QTabWidget.setTabText(int index, String label);
void QTabWidget.setTabToolTip(int index, String tip);
void QTabWidget.setTabWhatsThis(int index, String text);
void QTabWidget.setTabsClosable(boolean closeable);
void QTabWidget.setUsesScrollButtons(boolean useButtons);
QIcon QTabWidget.getTabIcon(int index);
int QTabWidget.getTabPosition();
int QTabWidget.getTabShape();
String QTabWidget.getTabText(int index);
String QTabWidget.getTabToolTip(int index);
String QTabWidget.getTabWhatsThis(int index);
boolean QTabWidget.getTabsClosable();
boolean QTabWidget.getUsesScrollButtons();
QWidget QTabWidget.widget(int index);
void QTabWidget.setCurrentIndex(int index);
void QTabWidget.setCurrentWidget(QWidget widget);
@Override @Virtual void QTabWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTabWidget.signalConnect(String signal_name, dynamic callback_func);

QTextBlockFormat QTextBlockFormat.new();
QtAlignment QTextBlockFormat.getAlignment();
float QTextBlockFormat.getBottomMargin();
int QTextBlockFormat.getIndent();
float QTextBlockFormat.getLeftMargin();
boolean QTextBlockFormat.getNonBreakableLines();
QTextFormatPageBreakFlags QTextBlockFormat.getPageBreakPolicy();
float QTextBlockFormat.getRightMargin();
void QTextBlockFormat.setAlignment(QtAlignment alignment);
void QTextBlockFormat.setBottomMargin(float margin);
void QTextBlockFormat.setIndent(int indentation);
void QTextBlockFormat.setLeftMargin(float margin);
void QTextBlockFormat.setNonBreakableLines(boolean b);
void QTextBlockFormat.setPageBreakPolicy(QTextFormatPageBreakFlags policy);
void QTextBlockFormat.setRightMargin(float margin);
void QTextBlockFormat.setTextIndent(float indent);
void QTextBlockFormat.setTopMargin(float margin);
float QTextBlockFormat.getTextIndent();
float QTextBlockFormat.getTopMargin();
@Override @Virtual void QTextBlockFormat.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextBlockFormat.signalConnect(String signal_name, dynamic callback_func);

QMutex QMutex.new(int mode);
void QMutex.lock();
boolean QMutex.tryLock();
//boolean QMutex.tryLock(int timeout);
void QMutex.unlock();
@Virtual void QMutex.addEvent(String event_name, dynamic callback_func);
@Virtual void QMutex.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMutex.parents();

QTranslator QTranslator.new(QObject parent);
@Virtual boolean QTranslator.isEmpty();
boolean QTranslator.load(String filename, String directory, String search_delimiters, String suffix);
//boolean QTranslator.load(String data, int len);
@Virtual String QTranslator.translate(String context, String sourceText, String disambiguation);
//String QTranslator.translate(String context, String sourceText, String disambiguation, int n);
@Override @Virtual void QTranslator.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTranslator.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QRectF QGraphicsWidget.boundingRect();
@Virtual @Override void QGraphicsWidget.getContentsMargins(float left, float top, float right, float bottom);
@Virtual @Override void QGraphicsWidget.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override void QGraphicsWidget.setGeometry(QRectF rect);
@Virtual @Override QPainterPath QGraphicsWidget.shape();
@Virtual @Override int QGraphicsWidget.type();
QGraphicsWidget QGraphicsWidget.new(QGraphicsItem parent, QtWindowFlags wFlags);
Array<QAction> QGraphicsWidget.actions();
void QGraphicsWidget.addActions(Array<QAction> actions);
void QGraphicsWidget.adjustSize();
boolean QGraphicsWidget.getAutoFillBackground();
int QGraphicsWidget.getFocusPolicy();
QGraphicsWidget QGraphicsWidget.focusWidget();
QFont QGraphicsWidget.getFont();
void QGraphicsWidget.getWindowFrameMargins(float left, float top, float right, float bottom);
int QGraphicsWidget.grabShortcut(QKeySequence sequence, int context);
void QGraphicsWidget.insertAction(QAction before, QAction action);
void QGraphicsWidget.insertActions(QAction before, Array<QAction> actions);
boolean QGraphicsWidget.isActiveWindow();
QGraphicsLayout QGraphicsWidget.getLayout();
int QGraphicsWidget.getLayoutDirection();
@Virtual void QGraphicsWidget.paintWindowFrame(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
QPalette QGraphicsWidget.getPalette();
QRectF QGraphicsWidget.rect();
void QGraphicsWidget.releaseShortcut(int id);
void QGraphicsWidget.removeAction(QAction action);
void QGraphicsWidget.resize(QSizeF size);
//void QGraphicsWidget.resize(float w, float h);
void QGraphicsWidget.setAttribute(int attribute, boolean on);
void QGraphicsWidget.setAutoFillBackground(boolean enabled);
void QGraphicsWidget.setContentsMargins(float left, float top, float right, float bottom);
void QGraphicsWidget.setFocusPolicy(int policy);
void QGraphicsWidget.setFont(QFont font);
//void QGraphicsWidget.setGeometry(float x, float y, float w, float h);
void QGraphicsWidget.setLayout(QGraphicsLayout layout);
void QGraphicsWidget.setLayoutDirection(int direction);
void QGraphicsWidget.setPalette(QPalette palette);
void QGraphicsWidget.setShortcutAutoRepeat(int id, boolean enabled);
void QGraphicsWidget.setShortcutEnabled(int id, boolean enabled);
void QGraphicsWidget.setStyle(QStyle style);
void QGraphicsWidget.setWindowFlags(QtWindowFlags wFlags);
void QGraphicsWidget.setWindowFrameMargins(float left, float top, float right, float bottom);
void QGraphicsWidget.setWindowTitle(String title);
QSizeF QGraphicsWidget.size();
QStyle QGraphicsWidget.getStyle();
boolean QGraphicsWidget.testAttribute(int attribute);
void QGraphicsWidget.unsetLayoutDirection();
void QGraphicsWidget.unsetWindowFrameMargins();
QtWindowFlags QGraphicsWidget.getWindowFlags();
QRectF QGraphicsWidget.windowFrameGeometry();
QRectF QGraphicsWidget.windowFrameRect();
String QGraphicsWidget.getWindowTitle();
int QGraphicsWidget.windowType();
void QGraphicsWidget.setTabOrder(QGraphicsWidget first, QGraphicsWidget second);
boolean QGraphicsWidget.close();
@Override @Virtual void QGraphicsWidget.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsWidget.signalConnect(String signal_name, dynamic callback_func);

QIcon QIcon.new();
//QIcon QIcon.new(QPixmap pixmap);
//QIcon QIcon.new(QIcon other);
//QIcon QIcon.new(String fileName);
//QIcon QIcon.new(QIconEngine engine);
//QIcon QIcon.new(QIconEngineV2 engine);
QSize QIcon.actualSize(QSize size, int mode, int state);
void QIcon.addFile(String fileName, QSize size, int mode, int state);
void QIcon.addPixmap(QPixmap pixmap, int mode, int state);
Array<QSize> QIcon.availableSizes(int mode, int state);
int QIcon.cacheKey();
String QIcon.name();
void QIcon.paint(QPainter painter, QRect rect, QtAlignment alignment, int mode, int state);
//void QIcon.paint(QPainter painter, int x, int y, int w, int h, QtAlignment alignment, int mode, int state);
QPixmap QIcon.pixmap(QSize size, int mode, int state);
//QPixmap QIcon.pixmap(int w, int h, int mode, int state);
//QPixmap QIcon.pixmap(int extent, int mode, int state);
QIcon QIcon.fromTheme(String name, QIcon fallback);
boolean QIcon.hasThemeIcon(String name);
void QIcon.setThemeName(String name);
String QIcon.getThemeName();
@Virtual void QIcon.addEvent(String event_name, dynamic callback_func);
@Virtual void QIcon.signalConnect(String signal_name, dynamic callback_func);
Array<String> QIcon.parents();

QTimeEdit QTimeEdit.new(QWidget parent);
//QTimeEdit QTimeEdit.new(QTime time, QWidget parent);
@Override @Virtual void QTimeEdit.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTimeEdit.signalConnect(String signal_name, dynamic callback_func);

QCryptographicHash QCryptographicHash.new(int method);
void QCryptographicHash.addData(String data, int length);
//void QCryptographicHash.addData(QByteArray data);
void QCryptographicHash.reset();
QByteArray QCryptographicHash.result();
QByteArray QCryptographicHash.hash(QByteArray data, int method);
@Virtual void QCryptographicHash.addEvent(String event_name, dynamic callback_func);
@Virtual void QCryptographicHash.signalConnect(String signal_name, dynamic callback_func);
Array<String> QCryptographicHash.parents();

@Virtual boolean QPrintEngine.abort();
@Virtual int QPrintEngine.metric(int id);
@Virtual boolean QPrintEngine.newPage();
@Virtual int QPrintEngine.printerState();
@Virtual QVariant QPrintEngine.getProperty(int key);
@Virtual void QPrintEngine.setProperty(int key, QVariant value);
@Virtual void QPrintEngine.addEvent(String event_name, dynamic callback_func);
@Virtual void QPrintEngine.signalConnect(String signal_name, dynamic callback_func);
Array<String> QPrintEngine.parents();

@Virtual void QAbstractFontEngine.addEvent(String event_name, dynamic callback_func);
@Virtual void QAbstractFontEngine.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMutableMapIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QMutableMapIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMutableMapIterator.parents();

float QPanGesture.getAcceleration();
QPointF QPanGesture.delta();
QPointF QPanGesture.lastOffset();
QPointF QPanGesture.offset();
void QPanGesture.setAcceleration(float value);
void QPanGesture.setLastOffset(QPointF value);
void QPanGesture.setOffset(QPointF value);
@Override @Virtual void QPanGesture.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPanGesture.signalConnect(String signal_name, dynamic callback_func);

QMouseEvent QMouseEvent.new(int type, QPoint position, int button, QtMouseButtons buttons, QtKeyboardModifiers modifiers);
//QMouseEvent QMouseEvent.new(int type, QPoint pos, QPoint globalPos, int button, QtMouseButtons buttons, QtKeyboardModifiers modifiers);
int QMouseEvent.button();
QtMouseButtons QMouseEvent.buttons();
QPoint QMouseEvent.globalPos();
int QMouseEvent.globalX();
int QMouseEvent.globalY();
QPoint QMouseEvent.pos();
QPointF QMouseEvent.posF();
int QMouseEvent.x();
int QMouseEvent.y();
@Override @Virtual void QMouseEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QMouseEvent.signalConnect(String signal_name, dynamic callback_func);

QReadWriteLock QReadWriteLock.new();
//QReadWriteLock QReadWriteLock.new(int recursionMode);
void QReadWriteLock.lockForRead();
void QReadWriteLock.lockForWrite();
boolean QReadWriteLock.tryLockForRead();
//boolean QReadWriteLock.tryLockForRead(int timeout);
boolean QReadWriteLock.tryLockForWrite();
//boolean QReadWriteLock.tryLockForWrite(int timeout);
void QReadWriteLock.unlock();
@Virtual void QReadWriteLock.addEvent(String event_name, dynamic callback_func);
@Virtual void QReadWriteLock.signalConnect(String signal_name, dynamic callback_func);
Array<String> QReadWriteLock.parents();

QNetworkProxyQuery QNetworkProxyQuery.new();
//QNetworkProxyQuery QNetworkProxyQuery.new(QUrl requestUrl, int queryType);
//QNetworkProxyQuery QNetworkProxyQuery.new(String hostname, int port, String protocolTag, int queryType);
//QNetworkProxyQuery QNetworkProxyQuery.new(int bindPort, String protocolTag, int queryType);
//QNetworkProxyQuery QNetworkProxyQuery.new(QNetworkProxyQuery other);
int QNetworkProxyQuery.getLocalPort();
String QNetworkProxyQuery.getPeerHostName();
int QNetworkProxyQuery.getPeerPort();
String QNetworkProxyQuery.getProtocolTag();
int QNetworkProxyQuery.getQueryType();
void QNetworkProxyQuery.setLocalPort(int port);
void QNetworkProxyQuery.setPeerHostName(String hostname);
void QNetworkProxyQuery.setPeerPort(int port);
void QNetworkProxyQuery.setProtocolTag(String protocolTag);
void QNetworkProxyQuery.setQueryType(int type);
void QNetworkProxyQuery.setUrl(QUrl url);
QUrl QNetworkProxyQuery.getUrl();
@Virtual void QNetworkProxyQuery.addEvent(String event_name, dynamic callback_func);
@Virtual void QNetworkProxyQuery.signalConnect(String signal_name, dynamic callback_func);
Array<String> QNetworkProxyQuery.parents();

QTextDecoder QTextDecoder.new(QTextCodec codec);
//QTextDecoder QTextDecoder.new(QTextCodec codec, int flags);
String QTextDecoder.toUnicode(String chars, int len);
//void QTextDecoder.toUnicode(String target, String chars, int len);
//String QTextDecoder.toUnicode(QByteArray ba);
@Virtual void QTextDecoder.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextDecoder.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextDecoder.parents();

@Virtual @Override QSize QWorkspace.sizeHint();
QWorkspace QWorkspace.new(QWidget parent);
QWidget QWorkspace.getActiveWindow();
QWidget QWorkspace.addWindow(QWidget w, QtWindowFlags flags);
QBrush QWorkspace.getBackground();
boolean QWorkspace.getScrollBarsEnabled();
void QWorkspace.setBackground(QBrush background);
void QWorkspace.setScrollBarsEnabled(boolean enable);
QWidgetList QWorkspace.windowList(int order);
void QWorkspace.activateNextWindow();
void QWorkspace.activatePreviousWindow();
void QWorkspace.arrangeIcons();
void QWorkspace.cascade();
void QWorkspace.closeActiveWindow();
void QWorkspace.closeAllWindows();
void QWorkspace.setActiveWindow(QWidget w);
void QWorkspace.tile();
@Override @Virtual void QWorkspace.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QWorkspace.signalConnect(String signal_name, dynamic callback_func);

QSharedMemory QSharedMemory.new(String key, QObject parent);
//QSharedMemory QSharedMemory.new(QObject parent);
boolean QSharedMemory.attach(int mode);
void QSharedMemory.constData();
boolean QSharedMemory.create(int size, int mode);
void QSharedMemory.data();
//void QSharedMemory.data();
boolean QSharedMemory.detach();
int QSharedMemory.error();
String QSharedMemory.errorString();
boolean QSharedMemory.isAttached();
String QSharedMemory.getKey();
boolean QSharedMemory.lock();
void QSharedMemory.setKey(String key);
int QSharedMemory.size();
boolean QSharedMemory.unlock();
@Override @Virtual void QSharedMemory.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSharedMemory.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QMacCocoaViewContainer.addEvent(String event_name, dynamic callback_func);
@Virtual void QMacCocoaViewContainer.signalConnect(String signal_name, dynamic callback_func);

QLineF QLineF.new();
//QLineF QLineF.new(QPointF p1, QPointF p2);
//QLineF QLineF.new(float x1, float y1, float x2, float y2);
//QLineF QLineF.new(QLine line);
QPointF QLineF.getP1();
QPointF QLineF.getP2();
float QLineF.x1();
float QLineF.x2();
float QLineF.y1();
float QLineF.y2();
float QLineF.getAngle();
float QLineF.angleTo(QLineF line);
float QLineF.dx();
float QLineF.dy();
int QLineF.intersect(QLineF line, QPointF intersectionPoint);
float QLineF.getLength();
QLineF QLineF.normalVector();
QPointF QLineF.pointAt(float t);
void QLineF.setP1(QPointF p1);
void QLineF.setP2(QPointF p2);
void QLineF.setAngle(float angle);
void QLineF.setLength(float length);
void QLineF.setLine(float x1, float y1, float x2, float y2);
void QLineF.setPoints(QPointF p1, QPointF p2);
QLine QLineF.toLine();
void QLineF.translate(QPointF offset);
//void QLineF.translate(float dx, float dy);
QLineF QLineF.translated(QPointF offset);
//QLineF QLineF.translated(float dx, float dy);
QLineF QLineF.unitVector();
QLineF QLineF.fromPolar(float length, float angle);
@Virtual void QLineF.addEvent(String event_name, dynamic callback_func);
@Virtual void QLineF.signalConnect(String signal_name, dynamic callback_func);
Array<String> QLineF.parents();

@Virtual void QWSCalibratedMouseHandler.addEvent(String event_name, dynamic callback_func);
@Virtual void QWSCalibratedMouseHandler.signalConnect(String signal_name, dynamic callback_func);

int QElapsedTimer.elapsed();
boolean QElapsedTimer.hasExpired(int timeout);
void QElapsedTimer.invalidate();
int QElapsedTimer.msecsSinceReference();
int QElapsedTimer.msecsTo(QElapsedTimer other);
int QElapsedTimer.restart();
int QElapsedTimer.secsTo(QElapsedTimer other);
void QElapsedTimer.start();
int QElapsedTimer.clockType();
boolean QElapsedTimer.isMonotonic();
@Virtual void QElapsedTimer.addEvent(String event_name, dynamic callback_func);
@Virtual void QElapsedTimer.signalConnect(String signal_name, dynamic callback_func);
Array<String> QElapsedTimer.parents();

@Virtual void QTableWidget.addEvent(String event_name, dynamic callback_func);
@Virtual void QTableWidget.signalConnect(String signal_name, dynamic callback_func);

String QMetaClassInfo.name();
String QMetaClassInfo.value();
@Virtual void QMetaClassInfo.addEvent(String event_name, dynamic callback_func);
@Virtual void QMetaClassInfo.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMetaClassInfo.parents();

QTextLine QTextLine.new();
float QTextLine.ascent();
float QTextLine.cursorToX(int cursorPos, int edge);
//float QTextLine.cursorToX(int cursorPos, int edge);
float QTextLine.descent();
void QTextLine.draw(QPainter painter, QPointF position, int selection);
float QTextLine.height();
float QTextLine.horizontalAdvance();
float QTextLine.leading();
boolean QTextLine.getLeadingIncluded();
int QTextLine.lineNumber();
QRectF QTextLine.naturalTextRect();
float QTextLine.naturalTextWidth();
QPointF QTextLine.getPosition();
QRectF QTextLine.rect();
void QTextLine.setLeadingIncluded(boolean incd);
void QTextLine.setLineWidth(float width);
void QTextLine.setNumColumns(int numColumns);
//void QTextLine.setNumColumns(int numColumns, float alignmentWidth);
void QTextLine.setPosition(QPointF pos);
int QTextLine.textLength();
int QTextLine.textStart();
float QTextLine.width();
float QTextLine.x();
int QTextLine.xToCursor(float x, int cpos);
float QTextLine.y();
@Virtual void QTextLine.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextLine.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextLine.parents();

@Virtual void QXmlStreamReader.addEvent(String event_name, dynamic callback_func);
@Virtual void QXmlStreamReader.signalConnect(String signal_name, dynamic callback_func);
Array<String> QXmlStreamReader.parents();

QTextListFormat QTextListFormat.new();
int QTextListFormat.getIndent();
void QTextListFormat.setIndent(int indentation);
void QTextListFormat.setStyle(int style);
int QTextListFormat.getStyle();
@Override @Virtual void QTextListFormat.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextListFormat.signalConnect(String signal_name, dynamic callback_func);

QShortcut QShortcut.new(QWidget parent);
//QShortcut QShortcut.new(QKeySequence key, QWidget parent, String member, String ambiguousMember, int context);
boolean QShortcut.getAutoRepeat();
int QShortcut.getContext();
int QShortcut.id();
boolean QShortcut.isEnabled();
QKeySequence QShortcut.getKey();
QWidget QShortcut.parentWidget();
void QShortcut.setAutoRepeat(boolean on);
void QShortcut.setContext(int context);
void QShortcut.setEnabled(boolean enable);
void QShortcut.setKey(QKeySequence key);
void QShortcut.setWhatsThis(String text);
String QShortcut.getWhatsThis();
@Override @Virtual void QShortcut.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QShortcut.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QRectF QGraphicsPathItem.boundingRect();
@Virtual @Override boolean QGraphicsPathItem.contains(QPointF point);
@Virtual @Override boolean QGraphicsPathItem.isObscuredBy(QGraphicsItem item);
@Virtual @Override QPainterPath QGraphicsPathItem.opaqueArea();
@Virtual @Override void QGraphicsPathItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget);
@Virtual @Override QPainterPath QGraphicsPathItem.shape();
@Virtual @Override int QGraphicsPathItem.type();
QGraphicsPathItem QGraphicsPathItem.new(QGraphicsItem parent);
//QGraphicsPathItem QGraphicsPathItem.new(QPainterPath path, QGraphicsItem parent);
QPainterPath QGraphicsPathItem.getPath();
void QGraphicsPathItem.setPath(QPainterPath path);
@Override @Virtual void QGraphicsPathItem.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsPathItem.signalConnect(String signal_name, dynamic callback_func);

QPointF QPinchGesture.getCenterPoint();
QPinchGestureChangeFlags QPinchGesture.getChangeFlags();
QPointF QPinchGesture.getLastCenterPoint();
float QPinchGesture.getLastRotationAngle();
float QPinchGesture.getLastScaleFactor();
float QPinchGesture.getRotationAngle();
float QPinchGesture.getScaleFactor();
void QPinchGesture.setCenterPoint(QPointF value);
void QPinchGesture.setChangeFlags(QPinchGestureChangeFlags value);
void QPinchGesture.setLastCenterPoint(QPointF value);
void QPinchGesture.setLastRotationAngle(float value);
void QPinchGesture.setLastScaleFactor(float value);
void QPinchGesture.setRotationAngle(float value);
void QPinchGesture.setScaleFactor(float value);
void QPinchGesture.setStartCenterPoint(QPointF value);
void QPinchGesture.setTotalChangeFlags(QPinchGestureChangeFlags value);
void QPinchGesture.setTotalRotationAngle(float value);
void QPinchGesture.setTotalScaleFactor(float value);
QPointF QPinchGesture.getStartCenterPoint();
QPinchGestureChangeFlags QPinchGesture.getTotalChangeFlags();
float QPinchGesture.getTotalRotationAngle();
float QPinchGesture.getTotalScaleFactor();
@Override @Virtual void QPinchGesture.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QPinchGesture.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QDecorationPlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QDecorationPlugin.signalConnect(String signal_name, dynamic callback_func);

QBrush QBrush.new();
//QBrush QBrush.new(int style);
//QBrush QBrush.new(QColor color, int style);
//QBrush QBrush.new(int color, int style);
//QBrush QBrush.new(QColor color, QPixmap pixmap);
//QBrush QBrush.new(int color, QPixmap pixmap);
//QBrush QBrush.new(QPixmap pixmap);
//QBrush QBrush.new(QImage image);
//QBrush QBrush.new(QBrush other);
//QBrush QBrush.new(QGradient gradient);
QColor QBrush.getColor();
QGradient QBrush.gradient();
boolean QBrush.isOpaque();
QMatrix QBrush.getMatrix();
void QBrush.setColor(QColor color);
//void QBrush.setColor(int color);
void QBrush.setMatrix(QMatrix matrix);
void QBrush.setStyle(int style);
void QBrush.setTexture(QPixmap pixmap);
void QBrush.setTextureImage(QImage image);
void QBrush.setTransform(QTransform matrix);
int QBrush.getStyle();
QPixmap QBrush.getTexture();
QImage QBrush.getTextureImage();
QTransform QBrush.getTransform();
@Virtual void QBrush.addEvent(String event_name, dynamic callback_func);
@Virtual void QBrush.signalConnect(String signal_name, dynamic callback_func);
Array<String> QBrush.parents();

QTextInlineObject QTextInlineObject.new(int i, QTextEngine e);
float QTextInlineObject.getAscent();
float QTextInlineObject.getDescent();
QTextFormat QTextInlineObject.format();
int QTextInlineObject.formatIndex();
float QTextInlineObject.height();
QRectF QTextInlineObject.rect();
void QTextInlineObject.setAscent(float a);
void QTextInlineObject.setDescent(float d);
void QTextInlineObject.setWidth(float w);
int QTextInlineObject.textDirection();
int QTextInlineObject.textPosition();
float QTextInlineObject.getWidth();
@Virtual void QTextInlineObject.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextInlineObject.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextInlineObject.parents();

@Virtual void QInputContextPlugin.addEvent(String event_name, dynamic callback_func);
@Virtual void QInputContextPlugin.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QModelIndex QSortFilterProxyModel.buddy(QModelIndex index);
@Virtual @Override boolean QSortFilterProxyModel.canFetchMore(QModelIndex parent);
@Virtual @Override int QSortFilterProxyModel.columnCount(QModelIndex parent);
@Virtual @Override QVariant QSortFilterProxyModel.getData(QModelIndex index, int role);
@Virtual @Override boolean QSortFilterProxyModel.dropMimeData(QMimeData data, int action, int row, int column, QModelIndex parent);
@Virtual @Override void QSortFilterProxyModel.fetchMore(QModelIndex parent);
@Virtual @Override QtItemFlags QSortFilterProxyModel.flags(QModelIndex index);
@Virtual @Override boolean QSortFilterProxyModel.hasChildren(QModelIndex parent);
@Virtual @Override QVariant QSortFilterProxyModel.getHeaderData(int section, int orientation, int role);
@Virtual @Override QModelIndex QSortFilterProxyModel.index(int row, int column, QModelIndex parent);
@Virtual @Override boolean QSortFilterProxyModel.insertColumns(int column, int count, QModelIndex parent);
@Virtual @Override boolean QSortFilterProxyModel.insertRows(int row, int count, QModelIndex parent);
@Virtual @Override QModelIndex QSortFilterProxyModel.mapFromSource(QModelIndex sourceIndex);
@Virtual @Override QItemSelection QSortFilterProxyModel.mapSelectionFromSource(QItemSelection sourceSelection);
@Virtual @Override QItemSelection QSortFilterProxyModel.mapSelectionToSource(QItemSelection proxySelection);
@Virtual @Override QModelIndex QSortFilterProxyModel.mapToSource(QModelIndex proxyIndex);
@Virtual @Override QModelIndexList QSortFilterProxyModel.match(QModelIndex start, int role, QVariant value, int hits, QtMatchFlags flags);
@Virtual @Override QMimeData QSortFilterProxyModel.mimeData(QModelIndexList indexes);
@Virtual @Override QModelIndex QSortFilterProxyModel.parent(QModelIndex child);
@Virtual @Override boolean QSortFilterProxyModel.removeColumns(int column, int count, QModelIndex parent);
@Virtual @Override boolean QSortFilterProxyModel.removeRows(int row, int count, QModelIndex parent);
@Virtual @Override int QSortFilterProxyModel.rowCount(QModelIndex parent);
@Virtual @Override boolean QSortFilterProxyModel.setData(QModelIndex index, QVariant value, int role);
@Virtual @Override boolean QSortFilterProxyModel.setHeaderData(int section, int orientation, QVariant value, int role);
@Virtual @Override void QSortFilterProxyModel.setSourceModel(QAbstractItemModel sourceModel);
@Virtual @Override void QSortFilterProxyModel.sort(int column, int order);
@Virtual @Override QSize QSortFilterProxyModel.span(QModelIndex index);
@Virtual @Override QtDropActions QSortFilterProxyModel.supportedDropActions();
QSortFilterProxyModel QSortFilterProxyModel.new(QObject parent);
boolean QSortFilterProxyModel.getDynamicSortFilter();
int QSortFilterProxyModel.getFilterCaseSensitivity();
int QSortFilterProxyModel.getFilterKeyColumn();
QRegExp QSortFilterProxyModel.getFilterRegExp();
int QSortFilterProxyModel.getFilterRole();
boolean QSortFilterProxyModel.isSortLocaleAware();
void QSortFilterProxyModel.setDynamicSortFilter(boolean enable);
void QSortFilterProxyModel.setFilterCaseSensitivity(int cs);
void QSortFilterProxyModel.setFilterKeyColumn(int column);
void QSortFilterProxyModel.setFilterRegExp(QRegExp regExp);
void QSortFilterProxyModel.setFilterRole(int role);
void QSortFilterProxyModel.setSortCaseSensitivity(int cs);
void QSortFilterProxyModel.setSortLocaleAware(boolean on);
void QSortFilterProxyModel.setSortRole(int role);
int QSortFilterProxyModel.getSortCaseSensitivity();
int QSortFilterProxyModel.sortColumn();
int QSortFilterProxyModel.sortOrder();
int QSortFilterProxyModel.getSortRole();
void QSortFilterProxyModel.invalidate();
void QSortFilterProxyModel.setFilterFixedString(String pattern);
//void QSortFilterProxyModel.setFilterRegExp(String pattern);
void QSortFilterProxyModel.setFilterWildcard(String pattern);
@Override @Virtual void QSortFilterProxyModel.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QSortFilterProxyModel.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override QByteArray QDropEvent.encodedData(String fmt);
@Virtual @Override String QDropEvent.format(int n);
@Virtual @Override boolean QDropEvent.provides(String mimeType);
QDropEvent QDropEvent.new(QPoint pos, QtDropActions actions, QMimeData data, QtMouseButtons buttons, QtKeyboardModifiers modifiers, int type);
void QDropEvent.acceptProposedAction();
int QDropEvent.getDropAction();
QtKeyboardModifiers QDropEvent.keyboardModifiers();
QMimeData QDropEvent.mimeData();
QtMouseButtons QDropEvent.mouseButtons();
QPoint QDropEvent.pos();
QtDropActions QDropEvent.possibleActions();
int QDropEvent.proposedAction();
void QDropEvent.setDropAction(int action);
QWidget QDropEvent.source();
@Override @Virtual void QDropEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QDropEvent.signalConnect(String signal_name, dynamic callback_func);

QChar QChar.new();
//QChar QChar.new(String ch);
//QChar QChar.new(String ch);
//QChar QChar.new(QLatin1Char ch);
//QChar QChar.new(String cell, String row);
//QChar QChar.new(int code);
//QChar QChar.new(short code);
//QChar QChar.new(int code);
//QChar QChar.new(int code);
//QChar QChar.new(int ch);
int QChar.category();
String QChar.cell();
String QChar.combiningClass();
String QChar.decomposition();
int QChar.decompositionTag();
int QChar.digitValue();
int QChar.direction();
boolean QChar.hasMirrored();
boolean QChar.isDigit();
boolean QChar.isHighSurrogate();
boolean QChar.isLetter();
boolean QChar.isLetterOrNumber();
boolean QChar.isLowSurrogate();
boolean QChar.isLower();
boolean QChar.isMark();
boolean QChar.isNumber();
boolean QChar.isPrint();
boolean QChar.isPunct();
boolean QChar.isSpace();
boolean QChar.isSymbol();
boolean QChar.isTitleCase();
boolean QChar.isUpper();
int QChar.joining();
QChar QChar.mirroredChar();
String QChar.row();
String QChar.toAscii();
QChar QChar.toCaseFolded();
String QChar.toLatin1();
QChar QChar.toLower();
QChar QChar.toTitleCase();
QChar QChar.toUpper();
int QChar.unicode();
//int QChar.unicode();
int QChar.unicodeVersion();
//int QChar.category(int ucs4);
//int QChar.category(int ucs2);
//String QChar.combiningClass(int ucs4);
//String QChar.combiningClass(int ucs2);
//String QChar.decomposition(int ucs4);
//int QChar.decompositionTag(int ucs4);
//int QChar.digitValue(int ucs2);
//int QChar.digitValue(int ucs4);
//int QChar.direction(int ucs4);
//int QChar.direction(int ucs2);
QChar QChar.fromAscii(String c);
QChar QChar.fromLatin1(String c);
int QChar.highSurrogate(int ucs4);
//boolean QChar.isHighSurrogate(int ucs4);
//boolean QChar.isLowSurrogate(int ucs4);
//int QChar.joining(int ucs4);
//int QChar.joining(int ucs2);
int QChar.lowSurrogate(int ucs4);
//int QChar.mirroredChar(int ucs4);
//int QChar.mirroredChar(int ucs2);
boolean QChar.requiresSurrogates(int ucs4);
int QChar.surrogateToUcs4(int high, int low);
//int QChar.surrogateToUcs4(QChar high, QChar low);
//int QChar.toCaseFolded(int ucs4);
//int QChar.toCaseFolded(int ucs2);
//int QChar.toLower(int ucs4);
//int QChar.toLower(int ucs2);
//int QChar.toTitleCase(int ucs4);
//int QChar.toTitleCase(int ucs2);
//int QChar.toUpper(int ucs4);
//int QChar.toUpper(int ucs2);
//int QChar.unicodeVersion(int ucs4);
//int QChar.unicodeVersion(int ucs2);
@Virtual void QChar.addEvent(String event_name, dynamic callback_func);
@Virtual void QChar.signalConnect(String signal_name, dynamic callback_func);
Array<String> QChar.parents();

QStyleOptionFrame QStyleOptionFrame.new();
//QStyleOptionFrame QStyleOptionFrame.new(QStyleOptionFrame other);
@Override @Virtual void QStyleOptionFrame.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionFrame.signalConnect(String signal_name, dynamic callback_func);

QFontDatabase QFontDatabase.new();
boolean QFontDatabase.bold(String family, String style);
QFont QFontDatabase.font(String family, String style, int pointSize);
boolean QFontDatabase.isBitmapScalable(String family, String style);
boolean QFontDatabase.isFixedPitch(String family, String style);
boolean QFontDatabase.isScalable(String family, String style);
boolean QFontDatabase.isSmoothlyScalable(String family, String style);
boolean QFontDatabase.italic(String family, String style);
Array<int> QFontDatabase.pointSizes(String family, String style);
Array<int> QFontDatabase.smoothSizes(String family, String style);
String QFontDatabase.styleString(QFont font);
//String QFontDatabase.styleString(QFontInfo fontInfo);
int QFontDatabase.weight(String family, String style);
Array<int> QFontDatabase.writingSystems();
//Array<int> QFontDatabase.writingSystems(String family);
int QFontDatabase.addApplicationFont(String fileName);
int QFontDatabase.addApplicationFontFromData(QByteArray fontData);
boolean QFontDatabase.removeAllApplicationFonts();
boolean QFontDatabase.removeApplicationFont(int id);
Array<int> QFontDatabase.standardSizes();
boolean QFontDatabase.supportsThreadedFontRendering();
String QFontDatabase.writingSystemName(int writingSystem);
String QFontDatabase.writingSystemSample(int writingSystem);
@Virtual void QFontDatabase.addEvent(String event_name, dynamic callback_func);
@Virtual void QFontDatabase.signalConnect(String signal_name, dynamic callback_func);
Array<String> QFontDatabase.parents();

QTextEncoder QTextEncoder.new(QTextCodec codec);
//QTextEncoder QTextEncoder.new(QTextCodec codec, int flags);
QByteArray QTextEncoder.fromUnicode(String str);
//QByteArray QTextEncoder.fromUnicode(QChar uc, int len);
@Virtual void QTextEncoder.addEvent(String event_name, dynamic callback_func);
@Virtual void QTextEncoder.signalConnect(String signal_name, dynamic callback_func);
Array<String> QTextEncoder.parents();

@Virtual void QCache.addEvent(String event_name, dynamic callback_func);
@Virtual void QCache.signalConnect(String signal_name, dynamic callback_func);
Array<String> QCache.parents();

QStyleOption QStyleOption.new(int version, int type);
//QStyleOption QStyleOption.new(QStyleOption other);
void QStyleOption.initFrom(QWidget widget);
@Virtual void QStyleOption.addEvent(String event_name, dynamic callback_func);
@Virtual void QStyleOption.signalConnect(String signal_name, dynamic callback_func);
Array<String> QStyleOption.parents();

int QMetaMethod.access();
boolean QMetaMethod.invoke(QObject object, int connectionType, QGenericReturnArgument returnValue, QGenericArgument val0);
//boolean QMetaMethod.invoke(QObject object, QGenericReturnArgument returnValue, QGenericArgument val0);
//boolean QMetaMethod.invoke(QObject object, int connectionType, QGenericArgument val0);
//boolean QMetaMethod.invoke(QObject object, QGenericArgument val0);
int QMetaMethod.methodIndex();
int QMetaMethod.methodType();
Array<QByteArray> QMetaMethod.parameterNames();
Array<QByteArray> QMetaMethod.parameterTypes();
String QMetaMethod.signature();
String QMetaMethod.tag();
String QMetaMethod.typeName();
@Virtual void QMetaMethod.addEvent(String event_name, dynamic callback_func);
@Virtual void QMetaMethod.signalConnect(String signal_name, dynamic callback_func);
Array<String> QMetaMethod.parents();

QSize QSize.new();
//QSize QSize.new(int width, int height);
QSize QSize.boundedTo(QSize otherSize);
QSize QSize.expandedTo(QSize otherSize);
int QSize.getHeight();
boolean QSize.isEmpty();
int QSize.rheight();
int QSize.rwidth();
void QSize.scale(int width, int height, int mode);
//void QSize.scale(QSize size, int mode);
void QSize.setHeight(int height);
void QSize.setWidth(int width);
void QSize.transpose();
int QSize.getWidth();
@Virtual void QSize.addEvent(String event_name, dynamic callback_func);
@Virtual void QSize.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSize.parents();

QStyleOptionTabWidgetFrame QStyleOptionTabWidgetFrame.new();
//QStyleOptionTabWidgetFrame QStyleOptionTabWidgetFrame.new(QStyleOptionTabWidgetFrame other);
@Override @Virtual void QStyleOptionTabWidgetFrame.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QStyleOptionTabWidgetFrame.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QLinkedListIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QLinkedListIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QLinkedListIterator.parents();

QtKeyboardModifiers QGraphicsSceneContextMenuEvent.modifiers();
QPointF QGraphicsSceneContextMenuEvent.pos();
int QGraphicsSceneContextMenuEvent.reason();
QPointF QGraphicsSceneContextMenuEvent.scenePos();
QPoint QGraphicsSceneContextMenuEvent.screenPos();
@Override @Virtual void QGraphicsSceneContextMenuEvent.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QGraphicsSceneContextMenuEvent.signalConnect(String signal_name, dynamic callback_func);

@Virtual @Override void QHeaderView.reset();
@Virtual @Override void QHeaderView.setModel(QAbstractItemModel model);
@Virtual @Override QSize QHeaderView.sizeHint();
QHeaderView QHeaderView.new(int orientation, QWidget parent);
boolean QHeaderView.getCascadingSectionResizes();
int QHeaderView.count();
QtAlignment QHeaderView.getDefaultAlignment();
int QHeaderView.getDefaultSectionSize();
int QHeaderView.hiddenSectionCount();
void QHeaderView.hideSection(int logicalIndex);
boolean QHeaderView.getHighlightSections();
boolean QHeaderView.isClickable();
boolean QHeaderView.isMovable();
boolean QHeaderView.isSectionHidden(int logicalIndex);
boolean QHeaderView.isSortIndicatorShown();
int QHeaderView.length();
int QHeaderView.logicalIndex(int visualIndex);
int QHeaderView.logicalIndexAt(int position);
//int QHeaderView.logicalIndexAt(int x, int y);
//int QHeaderView.logicalIndexAt(QPoint pos);
int QHeaderView.getMinimumSectionSize();
void QHeaderView.moveSection(int from_, int to_);
int QHeaderView.offset();
int QHeaderView.orientation();
int QHeaderView.getResizeMode(int logicalIndex);
void QHeaderView.resizeSection(int logicalIndex, int size);
void QHeaderView.resizeSections(int mode);
boolean QHeaderView.restoreState(QByteArray state);
QByteArray QHeaderView.saveState();
int QHeaderView.sectionPosition(int logicalIndex);
int QHeaderView.sectionSize(int logicalIndex);
int QHeaderView.sectionSizeHint(int logicalIndex);
int QHeaderView.sectionViewportPosition(int logicalIndex);
boolean QHeaderView.sectionsHidden();
boolean QHeaderView.sectionsMoved();
void QHeaderView.setCascadingSectionResizes(boolean enable);
void QHeaderView.setClickable(boolean clickable);
void QHeaderView.setDefaultAlignment(QtAlignment alignment);
void QHeaderView.setDefaultSectionSize(int size);
void QHeaderView.setHighlightSections(boolean highlight);
void QHeaderView.setMinimumSectionSize(int size);
void QHeaderView.setMovable(boolean movable);
void QHeaderView.setResizeMode(int mode);
//void QHeaderView.setResizeMode(int logicalIndex, int mode);
void QHeaderView.setSectionHidden(int logicalIndex, boolean hide);
void QHeaderView.setSortIndicator(int logicalIndex, int order);
void QHeaderView.setSortIndicatorShown(boolean show);
void QHeaderView.setStretchLastSection(boolean stretch);
void QHeaderView.showSection(int logicalIndex);
int QHeaderView.sortIndicatorOrder();
int QHeaderView.sortIndicatorSection();
boolean QHeaderView.getStretchLastSection();
int QHeaderView.stretchSectionCount();
void QHeaderView.swapSections(int first, int second);
int QHeaderView.visualIndex(int logicalIndex);
int QHeaderView.visualIndexAt(int position);
void QHeaderView.headerDataChanged(int orientation, int logicalFirst, int logicalLast);
void QHeaderView.setOffset(int offset);
void QHeaderView.setOffsetToLastSection();
void QHeaderView.setOffsetToSectionPosition(int visualIndex);
@Override @Virtual void QHeaderView.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QHeaderView.signalConnect(String signal_name, dynamic callback_func);

@Virtual void QHashIterator.addEvent(String event_name, dynamic callback_func);
@Virtual void QHashIterator.signalConnect(String signal_name, dynamic callback_func);
Array<String> QHashIterator.parents();

QTextDocument QTextDocument.new(QObject parent);
//QTextDocument QTextDocument.new(String text, QObject parent);
void QTextDocument.addResource(int type, QUrl name, QVariant resource);
void QTextDocument.adjustSize();
int QTextDocument.availableRedoSteps();
int QTextDocument.availableUndoSteps();
QTextBlock QTextDocument.begin();
int QTextDocument.blockCount();
QChar QTextDocument.characterAt(int pos);
int QTextDocument.characterCount();
@Virtual void QTextDocument.clear();
void QTextDocument.clearUndoRedoStacks(int stacksToClear);
QTextDocument QTextDocument.clone(QObject parent);
QFont QTextDocument.getDefaultFont();
String QTextDocument.getDefaultStyleSheet();
QTextOption QTextDocument.getDefaultTextOption();
QAbstractTextDocumentLayout QTextDocument.getDocumentLayout();
float QTextDocument.getDocumentMargin();
void QTextDocument.drawContents(QPainter p, QRectF rect);
QTextBlock QTextDocument.end();
QTextCursor QTextDocument.find(String subString, QTextCursor cursor, QTextDocumentFindFlags options);
//QTextCursor QTextDocument.find(QRegExp expr, QTextCursor cursor, QTextDocumentFindFlags options);
//QTextCursor QTextDocument.find(String subString, int position, QTextDocumentFindFlags options);
//QTextCursor QTextDocument.find(QRegExp expr, int position, QTextDocumentFindFlags options);
QTextBlock QTextDocument.findBlock(int pos);
QTextBlock QTextDocument.findBlockByLineNumber(int lineNumber);
QTextBlock QTextDocument.findBlockByNumber(int blockNumber);
QTextBlock QTextDocument.firstBlock();
float QTextDocument.idealWidth();
float QTextDocument.getIndentWidth();
boolean QTextDocument.isEmpty();
boolean QTextDocument.isModified();
boolean QTextDocument.isRedoAvailable();
boolean QTextDocument.isUndoAvailable();
boolean QTextDocument.isUndoRedoEnabled();
QTextBlock QTextDocument.lastBlock();
int QTextDocument.lineCount();
void QTextDocument.markContentsDirty(int position, int length);
int QTextDocument.getMaximumBlockCount();
String QTextDocument.getMetaInformation(int info);
QTextObject QTextDocument.object(int objectIndex);
QTextObject QTextDocument.objectForFormat(QTextFormat f);
int QTextDocument.pageCount();
QSizeF QTextDocument.getPageSize();
void QTextDocument.print(QPrinter printer);
void QTextDocument.redo(QTextCursor cursor);
QVariant QTextDocument.resource(int type, QUrl name);
int QTextDocument.revision();
QTextFrame QTextDocument.rootFrame();
void QTextDocument.setDefaultFont(QFont font);
void QTextDocument.setDefaultStyleSheet(String sheet);
void QTextDocument.setDefaultTextOption(QTextOption option);
void QTextDocument.setDocumentLayout(QAbstractTextDocumentLayout layout);
void QTextDocument.setDocumentMargin(float margin);
void QTextDocument.setHtml(String html);
void QTextDocument.setIndentWidth(float width);
void QTextDocument.setMaximumBlockCount(int maximum);
void QTextDocument.setMetaInformation(int info, String str);
void QTextDocument.setPageSize(QSizeF size);
void QTextDocument.setPlainText(String text);
void QTextDocument.setTextWidth(float width);
void QTextDocument.setUndoRedoEnabled(boolean enable);
void QTextDocument.setUseDesignMetrics(boolean b);
QSizeF QTextDocument.size();
float QTextDocument.getTextWidth();
String QTextDocument.toHtml(QByteArray encoding);
String QTextDocument.toPlainText();
void QTextDocument.undo(QTextCursor cursor);
boolean QTextDocument.getUseDesignMetrics();
//void QTextDocument.redo();
void QTextDocument.setModified(boolean m);
//void QTextDocument.undo();
@Override @Virtual void QTextDocument.addEvent(String event_name, dynamic callback_func);
@Override @Virtual void QTextDocument.signalConnect(String signal_name, dynamic callback_func);

QSslCertificate QSslCertificate.new(QIODevice device, int fmt);
//QSslCertificate QSslCertificate.new(QByteArray data, int fmt);
//QSslCertificate QSslCertificate.new(QSslCertificate other);
void QSslCertificate.clear();
QByteArray QSslCertificate.digest(int algorithm);
QDateTime QSslCertificate.effectiveDate();
QDateTime QSslCertificate.expiryDate();
String QSslCertificate.issuerInfo(int subject);
//String QSslCertificate.issuerInfo(QByteArray tag);
QSslKey QSslCertificate.publicKey();
QByteArray QSslCertificate.serialNumber();
String QSslCertificate.subjectInfo(int subject);
//String QSslCertificate.subjectInfo(QByteArray tag);
QByteArray QSslCertificate.toDer();
QByteArray QSslCertificate.toPem();
QByteArray QSslCertificate.version();
Array<QSslCertificate> QSslCertificate.fromData(QByteArray data, int fmt);
Array<QSslCertificate> QSslCertificate.fromDevice(QIODevice device, int fmt);
Array<QSslCertificate> QSslCertificate.fromPath(String path, int fmt, int syntax);
@Virtual void QSslCertificate.addEvent(String event_name, dynamic callback_func);
@Virtual void QSslCertificate.signalConnect(String signal_name, dynamic callback_func);
Array<String> QSslCertificate.parents();


QNetworkConfigurationManagerCapabilities QNetworkConfigurationManagerCapabilities.new(int value);
QNetworkConfigurationManagerCapabilities QNetworkConfigurationManagerCapabilities.and(int mask);
QNetworkConfigurationManagerCapabilities QNetworkConfigurationManagerCapabilities.iand(QNetworkConfigurationManagerCapabilities other);
QNetworkConfigurationManagerCapabilities QNetworkConfigurationManagerCapabilities.or(QNetworkConfigurationManagerCapabilities f);
QNetworkConfigurationManagerCapabilities QNetworkConfigurationManagerCapabilities.ior(QNetworkConfigurationManagerCapabilities other);
QNetworkConfigurationManagerCapabilities QNetworkConfigurationManagerCapabilities.xor(QNetworkConfigurationManagerCapabilities f);
QNetworkConfigurationManagerCapabilities QNetworkConfigurationManagerCapabilities.ixor(QNetworkConfigurationManagerCapabilities other);
boolean QNetworkConfigurationManagerCapabilities.testFlag(int flag);
int QNetworkConfigurationManagerCapabilities.value();

QStyleOptionToolBarToolBarFeatures QStyleOptionToolBarToolBarFeatures.new(int value);
QStyleOptionToolBarToolBarFeatures QStyleOptionToolBarToolBarFeatures.and(int mask);
QStyleOptionToolBarToolBarFeatures QStyleOptionToolBarToolBarFeatures.iand(QStyleOptionToolBarToolBarFeatures other);
QStyleOptionToolBarToolBarFeatures QStyleOptionToolBarToolBarFeatures.or(QStyleOptionToolBarToolBarFeatures f);
QStyleOptionToolBarToolBarFeatures QStyleOptionToolBarToolBarFeatures.ior(QStyleOptionToolBarToolBarFeatures other);
QStyleOptionToolBarToolBarFeatures QStyleOptionToolBarToolBarFeatures.xor(QStyleOptionToolBarToolBarFeatures f);
QStyleOptionToolBarToolBarFeatures QStyleOptionToolBarToolBarFeatures.ixor(QStyleOptionToolBarToolBarFeatures other);
boolean QStyleOptionToolBarToolBarFeatures.testFlag(int flag);
int QStyleOptionToolBarToolBarFeatures.value();

QWizardWizardOptions QWizardWizardOptions.new(int value);
QWizardWizardOptions QWizardWizardOptions.and(int mask);
QWizardWizardOptions QWizardWizardOptions.iand(QWizardWizardOptions other);
QWizardWizardOptions QWizardWizardOptions.or(QWizardWizardOptions f);
QWizardWizardOptions QWizardWizardOptions.ior(QWizardWizardOptions other);
QWizardWizardOptions QWizardWizardOptions.xor(QWizardWizardOptions f);
QWizardWizardOptions QWizardWizardOptions.ixor(QWizardWizardOptions other);
boolean QWizardWizardOptions.testFlag(int flag);
int QWizardWizardOptions.value();

QTextCodecConversionFlags QTextCodecConversionFlags.new(int value);
QTextCodecConversionFlags QTextCodecConversionFlags.and(int mask);
QTextCodecConversionFlags QTextCodecConversionFlags.iand(QTextCodecConversionFlags other);
QTextCodecConversionFlags QTextCodecConversionFlags.or(QTextCodecConversionFlags f);
QTextCodecConversionFlags QTextCodecConversionFlags.ior(QTextCodecConversionFlags other);
QTextCodecConversionFlags QTextCodecConversionFlags.xor(QTextCodecConversionFlags f);
QTextCodecConversionFlags QTextCodecConversionFlags.ixor(QTextCodecConversionFlags other);
boolean QTextCodecConversionFlags.testFlag(int flag);
int QTextCodecConversionFlags.value();

QStyleOptionButtonButtonFeatures QStyleOptionButtonButtonFeatures.new(int value);
QStyleOptionButtonButtonFeatures QStyleOptionButtonButtonFeatures.and(int mask);
QStyleOptionButtonButtonFeatures QStyleOptionButtonButtonFeatures.iand(QStyleOptionButtonButtonFeatures other);
QStyleOptionButtonButtonFeatures QStyleOptionButtonButtonFeatures.or(QStyleOptionButtonButtonFeatures f);
QStyleOptionButtonButtonFeatures QStyleOptionButtonButtonFeatures.ior(QStyleOptionButtonButtonFeatures other);
QStyleOptionButtonButtonFeatures QStyleOptionButtonButtonFeatures.xor(QStyleOptionButtonButtonFeatures f);
QStyleOptionButtonButtonFeatures QStyleOptionButtonButtonFeatures.ixor(QStyleOptionButtonButtonFeatures other);
boolean QStyleOptionButtonButtonFeatures.testFlag(int flag);
int QStyleOptionButtonButtonFeatures.value();

QTextEditAutoFormatting QTextEditAutoFormatting.new(int value);
QTextEditAutoFormatting QTextEditAutoFormatting.and(int mask);
QTextEditAutoFormatting QTextEditAutoFormatting.iand(QTextEditAutoFormatting other);
QTextEditAutoFormatting QTextEditAutoFormatting.or(QTextEditAutoFormatting f);
QTextEditAutoFormatting QTextEditAutoFormatting.ior(QTextEditAutoFormatting other);
QTextEditAutoFormatting QTextEditAutoFormatting.xor(QTextEditAutoFormatting f);
QTextEditAutoFormatting QTextEditAutoFormatting.ixor(QTextEditAutoFormatting other);
boolean QTextEditAutoFormatting.testFlag(int flag);
int QTextEditAutoFormatting.value();

QLocaleNumberOptions QLocaleNumberOptions.new(int value);
QLocaleNumberOptions QLocaleNumberOptions.and(int mask);
QLocaleNumberOptions QLocaleNumberOptions.iand(QLocaleNumberOptions other);
QLocaleNumberOptions QLocaleNumberOptions.or(QLocaleNumberOptions f);
QLocaleNumberOptions QLocaleNumberOptions.ior(QLocaleNumberOptions other);
QLocaleNumberOptions QLocaleNumberOptions.xor(QLocaleNumberOptions f);
QLocaleNumberOptions QLocaleNumberOptions.ixor(QLocaleNumberOptions other);
boolean QLocaleNumberOptions.testFlag(int flag);
int QLocaleNumberOptions.value();

QMainWindowDockOptions QMainWindowDockOptions.new(int value);
QMainWindowDockOptions QMainWindowDockOptions.and(int mask);
QMainWindowDockOptions QMainWindowDockOptions.iand(QMainWindowDockOptions other);
QMainWindowDockOptions QMainWindowDockOptions.or(QMainWindowDockOptions f);
QMainWindowDockOptions QMainWindowDockOptions.ior(QMainWindowDockOptions other);
QMainWindowDockOptions QMainWindowDockOptions.xor(QMainWindowDockOptions f);
QMainWindowDockOptions QMainWindowDockOptions.ixor(QMainWindowDockOptions other);
boolean QMainWindowDockOptions.testFlag(int flag);
int QMainWindowDockOptions.value();

QTextBoundaryFinderBoundaryReasons QTextBoundaryFinderBoundaryReasons.new(int value);
QTextBoundaryFinderBoundaryReasons QTextBoundaryFinderBoundaryReasons.and(int mask);
QTextBoundaryFinderBoundaryReasons QTextBoundaryFinderBoundaryReasons.iand(QTextBoundaryFinderBoundaryReasons other);
QTextBoundaryFinderBoundaryReasons QTextBoundaryFinderBoundaryReasons.or(QTextBoundaryFinderBoundaryReasons f);
QTextBoundaryFinderBoundaryReasons QTextBoundaryFinderBoundaryReasons.ior(QTextBoundaryFinderBoundaryReasons other);
QTextBoundaryFinderBoundaryReasons QTextBoundaryFinderBoundaryReasons.xor(QTextBoundaryFinderBoundaryReasons f);
QTextBoundaryFinderBoundaryReasons QTextBoundaryFinderBoundaryReasons.ixor(QTextBoundaryFinderBoundaryReasons other);
boolean QTextBoundaryFinderBoundaryReasons.testFlag(int flag);
int QTextBoundaryFinderBoundaryReasons.value();

QDialogButtonBoxStandardButtons QDialogButtonBoxStandardButtons.new(int value);
QDialogButtonBoxStandardButtons QDialogButtonBoxStandardButtons.and(int mask);
QDialogButtonBoxStandardButtons QDialogButtonBoxStandardButtons.iand(QDialogButtonBoxStandardButtons other);
QDialogButtonBoxStandardButtons QDialogButtonBoxStandardButtons.or(QDialogButtonBoxStandardButtons f);
QDialogButtonBoxStandardButtons QDialogButtonBoxStandardButtons.ior(QDialogButtonBoxStandardButtons other);
QDialogButtonBoxStandardButtons QDialogButtonBoxStandardButtons.xor(QDialogButtonBoxStandardButtons f);
QDialogButtonBoxStandardButtons QDialogButtonBoxStandardButtons.ixor(QDialogButtonBoxStandardButtons other);
boolean QDialogButtonBoxStandardButtons.testFlag(int flag);
int QDialogButtonBoxStandardButtons.value();

QPainterPixmapFragmentHints QPainterPixmapFragmentHints.new(int value);
QPainterPixmapFragmentHints QPainterPixmapFragmentHints.and(int mask);
QPainterPixmapFragmentHints QPainterPixmapFragmentHints.iand(QPainterPixmapFragmentHints other);
QPainterPixmapFragmentHints QPainterPixmapFragmentHints.or(QPainterPixmapFragmentHints f);
QPainterPixmapFragmentHints QPainterPixmapFragmentHints.ior(QPainterPixmapFragmentHints other);
QPainterPixmapFragmentHints QPainterPixmapFragmentHints.xor(QPainterPixmapFragmentHints f);
QPainterPixmapFragmentHints QPainterPixmapFragmentHints.ixor(QPainterPixmapFragmentHints other);
boolean QPainterPixmapFragmentHints.testFlag(int flag);
int QPainterPixmapFragmentHints.value();

QPainterRenderHints QPainterRenderHints.new(int value);
QPainterRenderHints QPainterRenderHints.and(int mask);
QPainterRenderHints QPainterRenderHints.iand(QPainterRenderHints other);
QPainterRenderHints QPainterRenderHints.or(QPainterRenderHints f);
QPainterRenderHints QPainterRenderHints.ior(QPainterRenderHints other);
QPainterRenderHints QPainterRenderHints.xor(QPainterRenderHints f);
QPainterRenderHints QPainterRenderHints.ixor(QPainterRenderHints other);
boolean QPainterRenderHints.testFlag(int flag);
int QPainterRenderHints.value();

QGraphicsViewCacheMode QGraphicsViewCacheMode.new(int value);
QGraphicsViewCacheMode QGraphicsViewCacheMode.and(int mask);
QGraphicsViewCacheMode QGraphicsViewCacheMode.iand(QGraphicsViewCacheMode other);
QGraphicsViewCacheMode QGraphicsViewCacheMode.or(QGraphicsViewCacheMode f);
QGraphicsViewCacheMode QGraphicsViewCacheMode.ior(QGraphicsViewCacheMode other);
QGraphicsViewCacheMode QGraphicsViewCacheMode.xor(QGraphicsViewCacheMode f);
QGraphicsViewCacheMode QGraphicsViewCacheMode.ixor(QGraphicsViewCacheMode other);
boolean QGraphicsViewCacheMode.testFlag(int flag);
int QGraphicsViewCacheMode.value();

QGraphicsViewOptimizationFlags QGraphicsViewOptimizationFlags.new(int value);
QGraphicsViewOptimizationFlags QGraphicsViewOptimizationFlags.and(int mask);
QGraphicsViewOptimizationFlags QGraphicsViewOptimizationFlags.iand(QGraphicsViewOptimizationFlags other);
QGraphicsViewOptimizationFlags QGraphicsViewOptimizationFlags.or(QGraphicsViewOptimizationFlags f);
QGraphicsViewOptimizationFlags QGraphicsViewOptimizationFlags.ior(QGraphicsViewOptimizationFlags other);
QGraphicsViewOptimizationFlags QGraphicsViewOptimizationFlags.xor(QGraphicsViewOptimizationFlags f);
QGraphicsViewOptimizationFlags QGraphicsViewOptimizationFlags.ixor(QGraphicsViewOptimizationFlags other);
boolean QGraphicsViewOptimizationFlags.testFlag(int flag);
int QGraphicsViewOptimizationFlags.value();

QGraphicsSceneSceneLayers QGraphicsSceneSceneLayers.new(int value);
QGraphicsSceneSceneLayers QGraphicsSceneSceneLayers.and(int mask);
QGraphicsSceneSceneLayers QGraphicsSceneSceneLayers.iand(QGraphicsSceneSceneLayers other);
QGraphicsSceneSceneLayers QGraphicsSceneSceneLayers.or(QGraphicsSceneSceneLayers f);
QGraphicsSceneSceneLayers QGraphicsSceneSceneLayers.ior(QGraphicsSceneSceneLayers other);
QGraphicsSceneSceneLayers QGraphicsSceneSceneLayers.xor(QGraphicsSceneSceneLayers f);
QGraphicsSceneSceneLayers QGraphicsSceneSceneLayers.ixor(QGraphicsSceneSceneLayers other);
boolean QGraphicsSceneSceneLayers.testFlag(int flag);
int QGraphicsSceneSceneLayers.value();

QGraphicsEffectChangeFlags QGraphicsEffectChangeFlags.new(int value);
QGraphicsEffectChangeFlags QGraphicsEffectChangeFlags.and(int mask);
QGraphicsEffectChangeFlags QGraphicsEffectChangeFlags.iand(QGraphicsEffectChangeFlags other);
QGraphicsEffectChangeFlags QGraphicsEffectChangeFlags.or(QGraphicsEffectChangeFlags f);
QGraphicsEffectChangeFlags QGraphicsEffectChangeFlags.ior(QGraphicsEffectChangeFlags other);
QGraphicsEffectChangeFlags QGraphicsEffectChangeFlags.xor(QGraphicsEffectChangeFlags f);
QGraphicsEffectChangeFlags QGraphicsEffectChangeFlags.ixor(QGraphicsEffectChangeFlags other);
boolean QGraphicsEffectChangeFlags.testFlag(int flag);
int QGraphicsEffectChangeFlags.value();

QNetworkProxyCapabilities QNetworkProxyCapabilities.new(int value);
QNetworkProxyCapabilities QNetworkProxyCapabilities.and(int mask);
QNetworkProxyCapabilities QNetworkProxyCapabilities.iand(QNetworkProxyCapabilities other);
QNetworkProxyCapabilities QNetworkProxyCapabilities.or(QNetworkProxyCapabilities f);
QNetworkProxyCapabilities QNetworkProxyCapabilities.ior(QNetworkProxyCapabilities other);
QNetworkProxyCapabilities QNetworkProxyCapabilities.xor(QNetworkProxyCapabilities f);
QNetworkProxyCapabilities QNetworkProxyCapabilities.ixor(QNetworkProxyCapabilities other);
boolean QNetworkProxyCapabilities.testFlag(int flag);
int QNetworkProxyCapabilities.value();

QLibraryLoadHints QLibraryLoadHints.new(int value);
QLibraryLoadHints QLibraryLoadHints.and(int mask);
QLibraryLoadHints QLibraryLoadHints.iand(QLibraryLoadHints other);
QLibraryLoadHints QLibraryLoadHints.or(QLibraryLoadHints f);
QLibraryLoadHints QLibraryLoadHints.ior(QLibraryLoadHints other);
QLibraryLoadHints QLibraryLoadHints.xor(QLibraryLoadHints f);
QLibraryLoadHints QLibraryLoadHints.ixor(QLibraryLoadHints other);
boolean QLibraryLoadHints.testFlag(int flag);
int QLibraryLoadHints.value();

QPaintEngineDirtyFlags QPaintEngineDirtyFlags.new(int value);
QPaintEngineDirtyFlags QPaintEngineDirtyFlags.and(int mask);
QPaintEngineDirtyFlags QPaintEngineDirtyFlags.iand(QPaintEngineDirtyFlags other);
QPaintEngineDirtyFlags QPaintEngineDirtyFlags.or(QPaintEngineDirtyFlags f);
QPaintEngineDirtyFlags QPaintEngineDirtyFlags.ior(QPaintEngineDirtyFlags other);
QPaintEngineDirtyFlags QPaintEngineDirtyFlags.xor(QPaintEngineDirtyFlags f);
QPaintEngineDirtyFlags QPaintEngineDirtyFlags.ixor(QPaintEngineDirtyFlags other);
boolean QPaintEngineDirtyFlags.testFlag(int flag);
int QPaintEngineDirtyFlags.value();

QPaintEnginePaintEngineFeatures QPaintEnginePaintEngineFeatures.new(int value);
QPaintEnginePaintEngineFeatures QPaintEnginePaintEngineFeatures.and(int mask);
QPaintEnginePaintEngineFeatures QPaintEnginePaintEngineFeatures.iand(QPaintEnginePaintEngineFeatures other);
QPaintEnginePaintEngineFeatures QPaintEnginePaintEngineFeatures.or(QPaintEnginePaintEngineFeatures f);
QPaintEnginePaintEngineFeatures QPaintEnginePaintEngineFeatures.ior(QPaintEnginePaintEngineFeatures other);
QPaintEnginePaintEngineFeatures QPaintEnginePaintEngineFeatures.xor(QPaintEnginePaintEngineFeatures f);
QPaintEnginePaintEngineFeatures QPaintEnginePaintEngineFeatures.ixor(QPaintEnginePaintEngineFeatures other);
boolean QPaintEnginePaintEngineFeatures.testFlag(int flag);
int QPaintEnginePaintEngineFeatures.value();

QIODeviceOpenMode QIODeviceOpenMode.new(int value);
QIODeviceOpenMode QIODeviceOpenMode.and(int mask);
QIODeviceOpenMode QIODeviceOpenMode.iand(QIODeviceOpenMode other);
QIODeviceOpenMode QIODeviceOpenMode.or(QIODeviceOpenMode f);
QIODeviceOpenMode QIODeviceOpenMode.ior(QIODeviceOpenMode other);
QIODeviceOpenMode QIODeviceOpenMode.xor(QIODeviceOpenMode f);
QIODeviceOpenMode QIODeviceOpenMode.ixor(QIODeviceOpenMode other);
boolean QIODeviceOpenMode.testFlag(int flag);
int QIODeviceOpenMode.value();

QStyleState QStyleState.new(int value);
QStyleState QStyleState.and(int mask);
QStyleState QStyleState.iand(QStyleState other);
QStyleState QStyleState.or(QStyleState f);
QStyleState QStyleState.ior(QStyleState other);
QStyleState QStyleState.xor(QStyleState f);
QStyleState QStyleState.ixor(QStyleState other);
boolean QStyleState.testFlag(int flag);
int QStyleState.value();

QStyleSubControls QStyleSubControls.new(int value);
QStyleSubControls QStyleSubControls.and(int mask);
QStyleSubControls QStyleSubControls.iand(QStyleSubControls other);
QStyleSubControls QStyleSubControls.or(QStyleSubControls f);
QStyleSubControls QStyleSubControls.ior(QStyleSubControls other);
QStyleSubControls QStyleSubControls.xor(QStyleSubControls f);
QStyleSubControls QStyleSubControls.ixor(QStyleSubControls other);
boolean QStyleSubControls.testFlag(int flag);
int QStyleSubControls.value();

QStyleOptionViewItemV2ViewItemFeatures QStyleOptionViewItemV2ViewItemFeatures.new(int value);
QStyleOptionViewItemV2ViewItemFeatures QStyleOptionViewItemV2ViewItemFeatures.and(int mask);
QStyleOptionViewItemV2ViewItemFeatures QStyleOptionViewItemV2ViewItemFeatures.iand(QStyleOptionViewItemV2ViewItemFeatures other);
QStyleOptionViewItemV2ViewItemFeatures QStyleOptionViewItemV2ViewItemFeatures.or(QStyleOptionViewItemV2ViewItemFeatures f);
QStyleOptionViewItemV2ViewItemFeatures QStyleOptionViewItemV2ViewItemFeatures.ior(QStyleOptionViewItemV2ViewItemFeatures other);
QStyleOptionViewItemV2ViewItemFeatures QStyleOptionViewItemV2ViewItemFeatures.xor(QStyleOptionViewItemV2ViewItemFeatures f);
QStyleOptionViewItemV2ViewItemFeatures QStyleOptionViewItemV2ViewItemFeatures.ixor(QStyleOptionViewItemV2ViewItemFeatures other);
boolean QStyleOptionViewItemV2ViewItemFeatures.testFlag(int flag);
int QStyleOptionViewItemV2ViewItemFeatures.value();

QTextOptionFlags QTextOptionFlags.new(int value);
QTextOptionFlags QTextOptionFlags.and(int mask);
QTextOptionFlags QTextOptionFlags.iand(QTextOptionFlags other);
QTextOptionFlags QTextOptionFlags.or(QTextOptionFlags f);
QTextOptionFlags QTextOptionFlags.ior(QTextOptionFlags other);
QTextOptionFlags QTextOptionFlags.xor(QTextOptionFlags f);
QTextOptionFlags QTextOptionFlags.ixor(QTextOptionFlags other);
boolean QTextOptionFlags.testFlag(int flag);
int QTextOptionFlags.value();

QNetworkInterfaceInterfaceFlags QNetworkInterfaceInterfaceFlags.new(int value);
QNetworkInterfaceInterfaceFlags QNetworkInterfaceInterfaceFlags.and(int mask);
QNetworkInterfaceInterfaceFlags QNetworkInterfaceInterfaceFlags.iand(QNetworkInterfaceInterfaceFlags other);
QNetworkInterfaceInterfaceFlags QNetworkInterfaceInterfaceFlags.or(QNetworkInterfaceInterfaceFlags f);
QNetworkInterfaceInterfaceFlags QNetworkInterfaceInterfaceFlags.ior(QNetworkInterfaceInterfaceFlags other);
QNetworkInterfaceInterfaceFlags QNetworkInterfaceInterfaceFlags.xor(QNetworkInterfaceInterfaceFlags f);
QNetworkInterfaceInterfaceFlags QNetworkInterfaceInterfaceFlags.ixor(QNetworkInterfaceInterfaceFlags other);
boolean QNetworkInterfaceInterfaceFlags.testFlag(int flag);
int QNetworkInterfaceInterfaceFlags.value();

QStyleOptionToolButtonToolButtonFeatures QStyleOptionToolButtonToolButtonFeatures.new(int value);
QStyleOptionToolButtonToolButtonFeatures QStyleOptionToolButtonToolButtonFeatures.and(int mask);
QStyleOptionToolButtonToolButtonFeatures QStyleOptionToolButtonToolButtonFeatures.iand(QStyleOptionToolButtonToolButtonFeatures other);
QStyleOptionToolButtonToolButtonFeatures QStyleOptionToolButtonToolButtonFeatures.or(QStyleOptionToolButtonToolButtonFeatures f);
QStyleOptionToolButtonToolButtonFeatures QStyleOptionToolButtonToolButtonFeatures.ior(QStyleOptionToolButtonToolButtonFeatures other);
QStyleOptionToolButtonToolButtonFeatures QStyleOptionToolButtonToolButtonFeatures.xor(QStyleOptionToolButtonToolButtonFeatures f);
QStyleOptionToolButtonToolButtonFeatures QStyleOptionToolButtonToolButtonFeatures.ixor(QStyleOptionToolButtonToolButtonFeatures other);
boolean QStyleOptionToolButtonToolButtonFeatures.testFlag(int flag);
int QStyleOptionToolButtonToolButtonFeatures.value();

QInputDialogInputDialogOptions QInputDialogInputDialogOptions.new(int value);
QInputDialogInputDialogOptions QInputDialogInputDialogOptions.and(int mask);
QInputDialogInputDialogOptions QInputDialogInputDialogOptions.iand(QInputDialogInputDialogOptions other);
QInputDialogInputDialogOptions QInputDialogInputDialogOptions.or(QInputDialogInputDialogOptions f);
QInputDialogInputDialogOptions QInputDialogInputDialogOptions.ior(QInputDialogInputDialogOptions other);
QInputDialogInputDialogOptions QInputDialogInputDialogOptions.xor(QInputDialogInputDialogOptions f);
QInputDialogInputDialogOptions QInputDialogInputDialogOptions.ixor(QInputDialogInputDialogOptions other);
boolean QInputDialogInputDialogOptions.testFlag(int flag);
int QInputDialogInputDialogOptions.value();

QStyleOptionTabCornerWidgets QStyleOptionTabCornerWidgets.new(int value);
QStyleOptionTabCornerWidgets QStyleOptionTabCornerWidgets.and(int mask);
QStyleOptionTabCornerWidgets QStyleOptionTabCornerWidgets.iand(QStyleOptionTabCornerWidgets other);
QStyleOptionTabCornerWidgets QStyleOptionTabCornerWidgets.or(QStyleOptionTabCornerWidgets f);
QStyleOptionTabCornerWidgets QStyleOptionTabCornerWidgets.ior(QStyleOptionTabCornerWidgets other);
QStyleOptionTabCornerWidgets QStyleOptionTabCornerWidgets.xor(QStyleOptionTabCornerWidgets f);
QStyleOptionTabCornerWidgets QStyleOptionTabCornerWidgets.ixor(QStyleOptionTabCornerWidgets other);
boolean QStyleOptionTabCornerWidgets.testFlag(int flag);
int QStyleOptionTabCornerWidgets.value();

QWebPageFindFlags QWebPageFindFlags.new(int value);
QWebPageFindFlags QWebPageFindFlags.and(int mask);
QWebPageFindFlags QWebPageFindFlags.iand(QWebPageFindFlags other);
QWebPageFindFlags QWebPageFindFlags.or(QWebPageFindFlags f);
QWebPageFindFlags QWebPageFindFlags.ior(QWebPageFindFlags other);
QWebPageFindFlags QWebPageFindFlags.xor(QWebPageFindFlags f);
QWebPageFindFlags QWebPageFindFlags.ixor(QWebPageFindFlags other);
boolean QWebPageFindFlags.testFlag(int flag);
int QWebPageFindFlags.value();

QPageSetupDialogPageSetupDialogOptions QPageSetupDialogPageSetupDialogOptions.new(int value);
QPageSetupDialogPageSetupDialogOptions QPageSetupDialogPageSetupDialogOptions.and(int mask);
QPageSetupDialogPageSetupDialogOptions QPageSetupDialogPageSetupDialogOptions.iand(QPageSetupDialogPageSetupDialogOptions other);
QPageSetupDialogPageSetupDialogOptions QPageSetupDialogPageSetupDialogOptions.or(QPageSetupDialogPageSetupDialogOptions f);
QPageSetupDialogPageSetupDialogOptions QPageSetupDialogPageSetupDialogOptions.ior(QPageSetupDialogPageSetupDialogOptions other);
QPageSetupDialogPageSetupDialogOptions QPageSetupDialogPageSetupDialogOptions.xor(QPageSetupDialogPageSetupDialogOptions f);
QPageSetupDialogPageSetupDialogOptions QPageSetupDialogPageSetupDialogOptions.ixor(QPageSetupDialogPageSetupDialogOptions other);
boolean QPageSetupDialogPageSetupDialogOptions.testFlag(int flag);
int QPageSetupDialogPageSetupDialogOptions.value();

QColorDialogColorDialogOptions QColorDialogColorDialogOptions.new(int value);
QColorDialogColorDialogOptions QColorDialogColorDialogOptions.and(int mask);
QColorDialogColorDialogOptions QColorDialogColorDialogOptions.iand(QColorDialogColorDialogOptions other);
QColorDialogColorDialogOptions QColorDialogColorDialogOptions.or(QColorDialogColorDialogOptions f);
QColorDialogColorDialogOptions QColorDialogColorDialogOptions.ior(QColorDialogColorDialogOptions other);
QColorDialogColorDialogOptions QColorDialogColorDialogOptions.xor(QColorDialogColorDialogOptions f);
QColorDialogColorDialogOptions QColorDialogColorDialogOptions.ixor(QColorDialogColorDialogOptions other);
boolean QColorDialogColorDialogOptions.testFlag(int flag);
int QColorDialogColorDialogOptions.value();

QDateTimeEditSections QDateTimeEditSections.new(int value);
QDateTimeEditSections QDateTimeEditSections.and(int mask);
QDateTimeEditSections QDateTimeEditSections.iand(QDateTimeEditSections other);
QDateTimeEditSections QDateTimeEditSections.or(QDateTimeEditSections f);
QDateTimeEditSections QDateTimeEditSections.ior(QDateTimeEditSections other);
QDateTimeEditSections QDateTimeEditSections.xor(QDateTimeEditSections f);
QDateTimeEditSections QDateTimeEditSections.ixor(QDateTimeEditSections other);
boolean QDateTimeEditSections.testFlag(int flag);
int QDateTimeEditSections.value();

QAccessibleRelation QAccessibleRelation.new(int value);
QAccessibleRelation QAccessibleRelation.and(int mask);
QAccessibleRelation QAccessibleRelation.iand(QAccessibleRelation other);
QAccessibleRelation QAccessibleRelation.or(QAccessibleRelation f);
QAccessibleRelation QAccessibleRelation.ior(QAccessibleRelation other);
QAccessibleRelation QAccessibleRelation.xor(QAccessibleRelation f);
QAccessibleRelation QAccessibleRelation.ixor(QAccessibleRelation other);
boolean QAccessibleRelation.testFlag(int flag);
int QAccessibleRelation.value();

QAccessibleState QAccessibleState.new(int value);
QAccessibleState QAccessibleState.and(int mask);
QAccessibleState QAccessibleState.iand(QAccessibleState other);
QAccessibleState QAccessibleState.or(QAccessibleState f);
QAccessibleState QAccessibleState.ior(QAccessibleState other);
QAccessibleState QAccessibleState.xor(QAccessibleState f);
QAccessibleState QAccessibleState.ixor(QAccessibleState other);
boolean QAccessibleState.testFlag(int flag);
int QAccessibleState.value();

QAbstractItemViewEditTriggers QAbstractItemViewEditTriggers.new(int value);
QAbstractItemViewEditTriggers QAbstractItemViewEditTriggers.and(int mask);
QAbstractItemViewEditTriggers QAbstractItemViewEditTriggers.iand(QAbstractItemViewEditTriggers other);
QAbstractItemViewEditTriggers QAbstractItemViewEditTriggers.or(QAbstractItemViewEditTriggers f);
QAbstractItemViewEditTriggers QAbstractItemViewEditTriggers.ior(QAbstractItemViewEditTriggers other);
QAbstractItemViewEditTriggers QAbstractItemViewEditTriggers.xor(QAbstractItemViewEditTriggers f);
QAbstractItemViewEditTriggers QAbstractItemViewEditTriggers.ixor(QAbstractItemViewEditTriggers other);
boolean QAbstractItemViewEditTriggers.testFlag(int flag);
int QAbstractItemViewEditTriggers.value();

QEventLoopProcessEventsFlags QEventLoopProcessEventsFlags.new(int value);
QEventLoopProcessEventsFlags QEventLoopProcessEventsFlags.and(int mask);
QEventLoopProcessEventsFlags QEventLoopProcessEventsFlags.iand(QEventLoopProcessEventsFlags other);
QEventLoopProcessEventsFlags QEventLoopProcessEventsFlags.or(QEventLoopProcessEventsFlags f);
QEventLoopProcessEventsFlags QEventLoopProcessEventsFlags.ior(QEventLoopProcessEventsFlags other);
QEventLoopProcessEventsFlags QEventLoopProcessEventsFlags.xor(QEventLoopProcessEventsFlags f);
QEventLoopProcessEventsFlags QEventLoopProcessEventsFlags.ixor(QEventLoopProcessEventsFlags other);
boolean QEventLoopProcessEventsFlags.testFlag(int flag);
int QEventLoopProcessEventsFlags.value();

QAbstractFileEngineFileFlags QAbstractFileEngineFileFlags.new(int value);
QAbstractFileEngineFileFlags QAbstractFileEngineFileFlags.and(int mask);
QAbstractFileEngineFileFlags QAbstractFileEngineFileFlags.iand(QAbstractFileEngineFileFlags other);
QAbstractFileEngineFileFlags QAbstractFileEngineFileFlags.or(QAbstractFileEngineFileFlags f);
QAbstractFileEngineFileFlags QAbstractFileEngineFileFlags.ior(QAbstractFileEngineFileFlags other);
QAbstractFileEngineFileFlags QAbstractFileEngineFileFlags.xor(QAbstractFileEngineFileFlags f);
QAbstractFileEngineFileFlags QAbstractFileEngineFileFlags.ixor(QAbstractFileEngineFileFlags other);
boolean QAbstractFileEngineFileFlags.testFlag(int flag);
int QAbstractFileEngineFileFlags.value();

QSizePolicyControlTypes QSizePolicyControlTypes.new(int value);
QSizePolicyControlTypes QSizePolicyControlTypes.and(int mask);
QSizePolicyControlTypes QSizePolicyControlTypes.iand(QSizePolicyControlTypes other);
QSizePolicyControlTypes QSizePolicyControlTypes.or(QSizePolicyControlTypes f);
QSizePolicyControlTypes QSizePolicyControlTypes.ior(QSizePolicyControlTypes other);
QSizePolicyControlTypes QSizePolicyControlTypes.xor(QSizePolicyControlTypes f);
QSizePolicyControlTypes QSizePolicyControlTypes.ixor(QSizePolicyControlTypes other);
boolean QSizePolicyControlTypes.testFlag(int flag);
int QSizePolicyControlTypes.value();

QFontComboBoxFontFilters QFontComboBoxFontFilters.new(int value);
QFontComboBoxFontFilters QFontComboBoxFontFilters.and(int mask);
QFontComboBoxFontFilters QFontComboBoxFontFilters.iand(QFontComboBoxFontFilters other);
QFontComboBoxFontFilters QFontComboBoxFontFilters.or(QFontComboBoxFontFilters f);
QFontComboBoxFontFilters QFontComboBoxFontFilters.ior(QFontComboBoxFontFilters other);
QFontComboBoxFontFilters QFontComboBoxFontFilters.xor(QFontComboBoxFontFilters f);
QFontComboBoxFontFilters QFontComboBoxFontFilters.ixor(QFontComboBoxFontFilters other);
boolean QFontComboBoxFontFilters.testFlag(int flag);
int QFontComboBoxFontFilters.value();

QNetworkConfigurationStateFlags QNetworkConfigurationStateFlags.new(int value);
QNetworkConfigurationStateFlags QNetworkConfigurationStateFlags.and(int mask);
QNetworkConfigurationStateFlags QNetworkConfigurationStateFlags.iand(QNetworkConfigurationStateFlags other);
QNetworkConfigurationStateFlags QNetworkConfigurationStateFlags.or(QNetworkConfigurationStateFlags f);
QNetworkConfigurationStateFlags QNetworkConfigurationStateFlags.ior(QNetworkConfigurationStateFlags other);
QNetworkConfigurationStateFlags QNetworkConfigurationStateFlags.xor(QNetworkConfigurationStateFlags f);
QNetworkConfigurationStateFlags QNetworkConfigurationStateFlags.ixor(QNetworkConfigurationStateFlags other);
boolean QNetworkConfigurationStateFlags.testFlag(int flag);
int QNetworkConfigurationStateFlags.value();

QUdpSocketBindMode QUdpSocketBindMode.new(int value);
QUdpSocketBindMode QUdpSocketBindMode.and(int mask);
QUdpSocketBindMode QUdpSocketBindMode.iand(QUdpSocketBindMode other);
QUdpSocketBindMode QUdpSocketBindMode.or(QUdpSocketBindMode f);
QUdpSocketBindMode QUdpSocketBindMode.ior(QUdpSocketBindMode other);
QUdpSocketBindMode QUdpSocketBindMode.xor(QUdpSocketBindMode f);
QUdpSocketBindMode QUdpSocketBindMode.ixor(QUdpSocketBindMode other);
boolean QUdpSocketBindMode.testFlag(int flag);
int QUdpSocketBindMode.value();

QMdiAreaAreaOptions QMdiAreaAreaOptions.new(int value);
QMdiAreaAreaOptions QMdiAreaAreaOptions.and(int mask);
QMdiAreaAreaOptions QMdiAreaAreaOptions.iand(QMdiAreaAreaOptions other);
QMdiAreaAreaOptions QMdiAreaAreaOptions.or(QMdiAreaAreaOptions f);
QMdiAreaAreaOptions QMdiAreaAreaOptions.ior(QMdiAreaAreaOptions other);
QMdiAreaAreaOptions QMdiAreaAreaOptions.xor(QMdiAreaAreaOptions f);
QMdiAreaAreaOptions QMdiAreaAreaOptions.ixor(QMdiAreaAreaOptions other);
boolean QMdiAreaAreaOptions.testFlag(int flag);
int QMdiAreaAreaOptions.value();

QDockWidgetDockWidgetFeatures QDockWidgetDockWidgetFeatures.new(int value);
QDockWidgetDockWidgetFeatures QDockWidgetDockWidgetFeatures.and(int mask);
QDockWidgetDockWidgetFeatures QDockWidgetDockWidgetFeatures.iand(QDockWidgetDockWidgetFeatures other);
QDockWidgetDockWidgetFeatures QDockWidgetDockWidgetFeatures.or(QDockWidgetDockWidgetFeatures f);
QDockWidgetDockWidgetFeatures QDockWidgetDockWidgetFeatures.ior(QDockWidgetDockWidgetFeatures other);
QDockWidgetDockWidgetFeatures QDockWidgetDockWidgetFeatures.xor(QDockWidgetDockWidgetFeatures f);
QDockWidgetDockWidgetFeatures QDockWidgetDockWidgetFeatures.ixor(QDockWidgetDockWidgetFeatures other);
boolean QDockWidgetDockWidgetFeatures.testFlag(int flag);
int QDockWidgetDockWidgetFeatures.value();

QDirFilters QDirFilters.new(int value);
QDirFilters QDirFilters.and(int mask);
QDirFilters QDirFilters.iand(QDirFilters other);
QDirFilters QDirFilters.or(QDirFilters f);
QDirFilters QDirFilters.ior(QDirFilters other);
QDirFilters QDirFilters.xor(QDirFilters f);
QDirFilters QDirFilters.ixor(QDirFilters other);
boolean QDirFilters.testFlag(int flag);
int QDirFilters.value();

QDirSortFlags QDirSortFlags.new(int value);
QDirSortFlags QDirSortFlags.and(int mask);
QDirSortFlags QDirSortFlags.iand(QDirSortFlags other);
QDirSortFlags QDirSortFlags.or(QDirSortFlags f);
QDirSortFlags QDirSortFlags.ior(QDirSortFlags other);
QDirSortFlags QDirSortFlags.xor(QDirSortFlags f);
QDirSortFlags QDirSortFlags.ixor(QDirSortFlags other);
boolean QDirSortFlags.testFlag(int flag);
int QDirSortFlags.value();

QMdiSubWindowSubWindowOptions QMdiSubWindowSubWindowOptions.new(int value);
QMdiSubWindowSubWindowOptions QMdiSubWindowSubWindowOptions.and(int mask);
QMdiSubWindowSubWindowOptions QMdiSubWindowSubWindowOptions.iand(QMdiSubWindowSubWindowOptions other);
QMdiSubWindowSubWindowOptions QMdiSubWindowSubWindowOptions.or(QMdiSubWindowSubWindowOptions f);
QMdiSubWindowSubWindowOptions QMdiSubWindowSubWindowOptions.ior(QMdiSubWindowSubWindowOptions other);
QMdiSubWindowSubWindowOptions QMdiSubWindowSubWindowOptions.xor(QMdiSubWindowSubWindowOptions f);
QMdiSubWindowSubWindowOptions QMdiSubWindowSubWindowOptions.ixor(QMdiSubWindowSubWindowOptions other);
boolean QMdiSubWindowSubWindowOptions.testFlag(int flag);
int QMdiSubWindowSubWindowOptions.value();

QMessageBoxStandardButtons QMessageBoxStandardButtons.new(int value);
QMessageBoxStandardButtons QMessageBoxStandardButtons.and(int mask);
QMessageBoxStandardButtons QMessageBoxStandardButtons.iand(QMessageBoxStandardButtons other);
QMessageBoxStandardButtons QMessageBoxStandardButtons.or(QMessageBoxStandardButtons f);
QMessageBoxStandardButtons QMessageBoxStandardButtons.ior(QMessageBoxStandardButtons other);
QMessageBoxStandardButtons QMessageBoxStandardButtons.xor(QMessageBoxStandardButtons f);
QMessageBoxStandardButtons QMessageBoxStandardButtons.ixor(QMessageBoxStandardButtons other);
boolean QMessageBoxStandardButtons.testFlag(int flag);
int QMessageBoxStandardButtons.value();

QStyleOptionFrameV2FrameFeatures QStyleOptionFrameV2FrameFeatures.new(int value);
QStyleOptionFrameV2FrameFeatures QStyleOptionFrameV2FrameFeatures.and(int mask);
QStyleOptionFrameV2FrameFeatures QStyleOptionFrameV2FrameFeatures.iand(QStyleOptionFrameV2FrameFeatures other);
QStyleOptionFrameV2FrameFeatures QStyleOptionFrameV2FrameFeatures.or(QStyleOptionFrameV2FrameFeatures f);
QStyleOptionFrameV2FrameFeatures QStyleOptionFrameV2FrameFeatures.ior(QStyleOptionFrameV2FrameFeatures other);
QStyleOptionFrameV2FrameFeatures QStyleOptionFrameV2FrameFeatures.xor(QStyleOptionFrameV2FrameFeatures f);
QStyleOptionFrameV2FrameFeatures QStyleOptionFrameV2FrameFeatures.ixor(QStyleOptionFrameV2FrameFeatures other);
boolean QStyleOptionFrameV2FrameFeatures.testFlag(int flag);
int QStyleOptionFrameV2FrameFeatures.value();

QAbstractPrintDialogPrintDialogOptions QAbstractPrintDialogPrintDialogOptions.new(int value);
QAbstractPrintDialogPrintDialogOptions QAbstractPrintDialogPrintDialogOptions.and(int mask);
QAbstractPrintDialogPrintDialogOptions QAbstractPrintDialogPrintDialogOptions.iand(QAbstractPrintDialogPrintDialogOptions other);
QAbstractPrintDialogPrintDialogOptions QAbstractPrintDialogPrintDialogOptions.or(QAbstractPrintDialogPrintDialogOptions f);
QAbstractPrintDialogPrintDialogOptions QAbstractPrintDialogPrintDialogOptions.ior(QAbstractPrintDialogPrintDialogOptions other);
QAbstractPrintDialogPrintDialogOptions QAbstractPrintDialogPrintDialogOptions.xor(QAbstractPrintDialogPrintDialogOptions f);
QAbstractPrintDialogPrintDialogOptions QAbstractPrintDialogPrintDialogOptions.ixor(QAbstractPrintDialogPrintDialogOptions other);
boolean QAbstractPrintDialogPrintDialogOptions.testFlag(int flag);
int QAbstractPrintDialogPrintDialogOptions.value();

QWidgetRenderFlags QWidgetRenderFlags.new(int value);
QWidgetRenderFlags QWidgetRenderFlags.and(int mask);
QWidgetRenderFlags QWidgetRenderFlags.iand(QWidgetRenderFlags other);
QWidgetRenderFlags QWidgetRenderFlags.or(QWidgetRenderFlags f);
QWidgetRenderFlags QWidgetRenderFlags.ior(QWidgetRenderFlags other);
QWidgetRenderFlags QWidgetRenderFlags.xor(QWidgetRenderFlags f);
QWidgetRenderFlags QWidgetRenderFlags.ixor(QWidgetRenderFlags other);
boolean QWidgetRenderFlags.testFlag(int flag);
int QWidgetRenderFlags.value();

QGraphicsItemGraphicsItemFlags QGraphicsItemGraphicsItemFlags.new(int value);
QGraphicsItemGraphicsItemFlags QGraphicsItemGraphicsItemFlags.and(int mask);
QGraphicsItemGraphicsItemFlags QGraphicsItemGraphicsItemFlags.iand(QGraphicsItemGraphicsItemFlags other);
QGraphicsItemGraphicsItemFlags QGraphicsItemGraphicsItemFlags.or(QGraphicsItemGraphicsItemFlags f);
QGraphicsItemGraphicsItemFlags QGraphicsItemGraphicsItemFlags.ior(QGraphicsItemGraphicsItemFlags other);
QGraphicsItemGraphicsItemFlags QGraphicsItemGraphicsItemFlags.xor(QGraphicsItemGraphicsItemFlags f);
QGraphicsItemGraphicsItemFlags QGraphicsItemGraphicsItemFlags.ixor(QGraphicsItemGraphicsItemFlags other);
boolean QGraphicsItemGraphicsItemFlags.testFlag(int flag);
int QGraphicsItemGraphicsItemFlags.value();

QTextItemRenderFlags QTextItemRenderFlags.new(int value);
QTextItemRenderFlags QTextItemRenderFlags.and(int mask);
QTextItemRenderFlags QTextItemRenderFlags.iand(QTextItemRenderFlags other);
QTextItemRenderFlags QTextItemRenderFlags.or(QTextItemRenderFlags f);
QTextItemRenderFlags QTextItemRenderFlags.ior(QTextItemRenderFlags other);
QTextItemRenderFlags QTextItemRenderFlags.xor(QTextItemRenderFlags f);
QTextItemRenderFlags QTextItemRenderFlags.ixor(QTextItemRenderFlags other);
boolean QTextItemRenderFlags.testFlag(int flag);
int QTextItemRenderFlags.value();

QGraphicsBlurEffectBlurHints QGraphicsBlurEffectBlurHints.new(int value);
QGraphicsBlurEffectBlurHints QGraphicsBlurEffectBlurHints.and(int mask);
QGraphicsBlurEffectBlurHints QGraphicsBlurEffectBlurHints.iand(QGraphicsBlurEffectBlurHints other);
QGraphicsBlurEffectBlurHints QGraphicsBlurEffectBlurHints.or(QGraphicsBlurEffectBlurHints f);
QGraphicsBlurEffectBlurHints QGraphicsBlurEffectBlurHints.ior(QGraphicsBlurEffectBlurHints other);
QGraphicsBlurEffectBlurHints QGraphicsBlurEffectBlurHints.xor(QGraphicsBlurEffectBlurHints f);
QGraphicsBlurEffectBlurHints QGraphicsBlurEffectBlurHints.ixor(QGraphicsBlurEffectBlurHints other);
boolean QGraphicsBlurEffectBlurHints.testFlag(int flag);
int QGraphicsBlurEffectBlurHints.value();

QUrlFormattingOptions QUrlFormattingOptions.new(int value);
QUrlFormattingOptions QUrlFormattingOptions.and(int mask);
QUrlFormattingOptions QUrlFormattingOptions.iand(QUrlFormattingOptions other);
QUrlFormattingOptions QUrlFormattingOptions.or(QUrlFormattingOptions f);
QUrlFormattingOptions QUrlFormattingOptions.ior(QUrlFormattingOptions other);
QUrlFormattingOptions QUrlFormattingOptions.xor(QUrlFormattingOptions f);
QUrlFormattingOptions QUrlFormattingOptions.ixor(QUrlFormattingOptions other);
boolean QUrlFormattingOptions.testFlag(int flag);
int QUrlFormattingOptions.value();

QAbstractSpinBoxStepEnabled QAbstractSpinBoxStepEnabled.new(int value);
QAbstractSpinBoxStepEnabled QAbstractSpinBoxStepEnabled.and(int mask);
QAbstractSpinBoxStepEnabled QAbstractSpinBoxStepEnabled.iand(QAbstractSpinBoxStepEnabled other);
QAbstractSpinBoxStepEnabled QAbstractSpinBoxStepEnabled.or(QAbstractSpinBoxStepEnabled f);
QAbstractSpinBoxStepEnabled QAbstractSpinBoxStepEnabled.ior(QAbstractSpinBoxStepEnabled other);
QAbstractSpinBoxStepEnabled QAbstractSpinBoxStepEnabled.xor(QAbstractSpinBoxStepEnabled f);
QAbstractSpinBoxStepEnabled QAbstractSpinBoxStepEnabled.ixor(QAbstractSpinBoxStepEnabled other);
boolean QAbstractSpinBoxStepEnabled.testFlag(int flag);
int QAbstractSpinBoxStepEnabled.value();

QTextFormatPageBreakFlags QTextFormatPageBreakFlags.new(int value);
QTextFormatPageBreakFlags QTextFormatPageBreakFlags.and(int mask);
QTextFormatPageBreakFlags QTextFormatPageBreakFlags.iand(QTextFormatPageBreakFlags other);
QTextFormatPageBreakFlags QTextFormatPageBreakFlags.or(QTextFormatPageBreakFlags f);
QTextFormatPageBreakFlags QTextFormatPageBreakFlags.ior(QTextFormatPageBreakFlags other);
QTextFormatPageBreakFlags QTextFormatPageBreakFlags.xor(QTextFormatPageBreakFlags f);
QTextFormatPageBreakFlags QTextFormatPageBreakFlags.ixor(QTextFormatPageBreakFlags other);
boolean QTextFormatPageBreakFlags.testFlag(int flag);
int QTextFormatPageBreakFlags.value();

QFontDialogFontDialogOptions QFontDialogFontDialogOptions.new(int value);
QFontDialogFontDialogOptions QFontDialogFontDialogOptions.and(int mask);
QFontDialogFontDialogOptions QFontDialogFontDialogOptions.iand(QFontDialogFontDialogOptions other);
QFontDialogFontDialogOptions QFontDialogFontDialogOptions.or(QFontDialogFontDialogOptions f);
QFontDialogFontDialogOptions QFontDialogFontDialogOptions.ior(QFontDialogFontDialogOptions other);
QFontDialogFontDialogOptions QFontDialogFontDialogOptions.xor(QFontDialogFontDialogOptions f);
QFontDialogFontDialogOptions QFontDialogFontDialogOptions.ixor(QFontDialogFontDialogOptions other);
boolean QFontDialogFontDialogOptions.testFlag(int flag);
int QFontDialogFontDialogOptions.value();

QPinchGestureChangeFlags QPinchGestureChangeFlags.new(int value);
QPinchGestureChangeFlags QPinchGestureChangeFlags.and(int mask);
QPinchGestureChangeFlags QPinchGestureChangeFlags.iand(QPinchGestureChangeFlags other);
QPinchGestureChangeFlags QPinchGestureChangeFlags.or(QPinchGestureChangeFlags f);
QPinchGestureChangeFlags QPinchGestureChangeFlags.ior(QPinchGestureChangeFlags other);
QPinchGestureChangeFlags QPinchGestureChangeFlags.xor(QPinchGestureChangeFlags f);
QPinchGestureChangeFlags QPinchGestureChangeFlags.ixor(QPinchGestureChangeFlags other);
boolean QPinchGestureChangeFlags.testFlag(int flag);
int QPinchGestureChangeFlags.value();

QTextDocumentFindFlags QTextDocumentFindFlags.new(int value);
QTextDocumentFindFlags QTextDocumentFindFlags.and(int mask);
QTextDocumentFindFlags QTextDocumentFindFlags.iand(QTextDocumentFindFlags other);
QTextDocumentFindFlags QTextDocumentFindFlags.or(QTextDocumentFindFlags f);
QTextDocumentFindFlags QTextDocumentFindFlags.ior(QTextDocumentFindFlags other);
QTextDocumentFindFlags QTextDocumentFindFlags.xor(QTextDocumentFindFlags f);
QTextDocumentFindFlags QTextDocumentFindFlags.ixor(QTextDocumentFindFlags other);
boolean QTextDocumentFindFlags.testFlag(int flag);
int QTextDocumentFindFlags.value();

